/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { UiMsg } from "./utils/types";
import { UiCalendarDateChange, UiCalendarValueChange } from "./components/ui-calendar/ui-calendar";
export { UiMsg } from "./utils/types";
export { UiCalendarDateChange, UiCalendarValueChange } from "./components/ui-calendar/ui-calendar";
export namespace Components {
    /**
     * A simple button component designed for WoT device actions.
     * Features multiple visual styles, status indicators, and Web of Things integration.
     * Buttons trigger actions rather than managing state values.
     * @example Basic Usage
     * ```html
     * <ui-button label="Click Me"></ui-button>
     * <ui-button variant="filled" label="Submit" show-status="true"></ui-button>
     * ```
     * @example WoT Action Integration
     * ```javascript
     * const button = document.getElementById('device-button');
     * await button.setAction(async () => {
     * await thing.invokeAction('execute');
     * });
     * ```
     */
    interface UiButton {
        /**
          * Color theme for the button matching to thingsweb theme
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark": boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled": boolean;
        /**
          * Enable keyboard navigation so user can click using 'Space' and 'Enter' keys when true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed on the button
          * @default 'Button'
         */
        "label": string;
        /**
          * Sets the action to execute when button is clicked. This is the primary method for connecting button to real devices .
          * @param actionFn - The async function to execute on button click
          * @returns Promise resolving to true if successful, false if failed
          * @example Basic Usage ```javascript await button.setAction(async () => { await thing.invokeAction('execute'); }); ```
         */
        "setAction": (actionFn?: () => Promise<any>) => Promise<boolean>;
        /**
          * (Advance) to manually set the operation status indicator. Useful when managing device communication externally and you want to show loading/success/error states.
          * @param status - The status to display
          * @param errorMessage - (Optional) error message for error status
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus": boolean;
        /**
          * Visual style variant of the button. - minimal: Clean design with transparent background - outlined: Border-focused design with outline style - filled: Solid background design
          * @default 'outlined'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Advanced calendar component with comprehensive styling, variants, and features.
     * Matches the design family of ui-button, ui-slider, and other components.
     * @example Basic Usage
     * ```html
     * <ui-calendar variant="outlined" color="primary" label="Select Date"></ui-calendar>
     * ```
     * @example Different Variants & Colors
     * ```html
     * <ui-calendar variant="minimal" color="secondary" label="Minimal Calendar"></ui-calendar>
     * <ui-calendar variant="filled" color="primary" label="Filled Calendar"></ui-calendar>
     * <ui-calendar variant="outlined" color="neutral" label="Outlined Calendar"></ui-calendar>
     * ```
     * @example Sizes & Features
     * ```html
     * <ui-calendar size="large" include-time="true" label="Large with Time"></ui-calendar>
     * <ui-calendar size="small" inline="true" label="Small Inline"></ui-calendar>
     * ```
     * @example Dark Theme
     * ```html
     * <ui-calendar theme="dark" variant="filled" color="primary"></ui-calendar>
     * ```
     */
    interface UiCalendar {
        /**
          * Animation style for transitions. - none: No animations - slide: Slide transitions between months - fade: Fade transitions   - bounce: Playful bounce effects
          * @default 'slide'
         */
        "animation": 'none' | 'slide' | 'fade' | 'bounce';
        /**
          * Color scheme matching the component family palette. - primary: Main brand color (blue tones) - secondary: Accent color (green/teal tones)   - neutral: Grayscale for subtle integration - success: Green for positive actions - warning: Orange for caution - danger: Red for destructive actions
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral' | 'success' | 'warning' | 'danger';
        /**
          * Connection state for readonly mode
          * @default true
         */
        "connected": boolean;
        /**
          * Dark theme variant.
          * @example ```html <ui-calendar dark="true" variant="filled"></ui-calendar> ```
          * @default false
         */
        "dark": boolean;
        /**
          * Whether the component is disabled (cannot be interacted with).
          * @example ```html <ui-calendar disabled="true" label="Cannot select"></ui-calendar> ```
          * @default false
         */
        "disabled": boolean;
        /**
          * First day of week (0 = Sunday, 1 = Monday).
          * @default 0
         */
        "firstDayOfWeek": 0 | 1;
        /**
          * Get the current calendar value.
          * @returns Current date value as ISO string or undefined
          * @example ```typescript const currentDate = await calendar.getValue(); console.log('Selected date:', currentDate); ```
         */
        "getValue": () => Promise<string | undefined>;
        /**
          * Include time picker alongside date picker. Supports hour:minute selection with AM/PM or 24-hour format.
          * @default false
         */
        "includeTime": boolean;
        /**
          * Display calendar inline instead of as dropdown popup. Perfect for always-visible date selection.
          * @default false
         */
        "inline": boolean;
        /**
          * Enable keyboard navigation and shortcuts.
          * @example ```html <ui-calendar keyboard="false"></ui-calendar> ```
          * @default true
         */
        "keyboard": boolean;
        /**
          * Optional text label for the calendar with enhanced styling.
          * @example ```html <ui-calendar label="Select Date"></ui-calendar> ```
         */
        "label"?: string;
        /**
          * Maximum selectable date (ISO string).
         */
        "maxDate"?: string;
        /**
          * Minimum selectable date (ISO string).
         */
        "minDate"?: string;
        /**
          * Whether the component is read-only (displays value but cannot be changed).
          * @example ```html <ui-calendar readonly="true" value="2023-12-25"></ui-calendar> ```
          * @default false
         */
        "readonly": boolean;
        /**
          * Set the visual status of the calendar (success, warning, error).
          * @param status - Status type or null to clear
          * @param message - Optional status message
          * @example ```typescript await calendar.setStatus('error', 'Invalid date selected'); await calendar.setStatus('success', 'Date saved successfully'); await calendar.setStatus(null); // Clear status ```
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", message?: string) => Promise<void>;
        /**
          * Set the value programmatically with automatic operation handling
          * @param value - The date string value to set (ISO format)
          * @param writeOperation - Optional write function to call after value update
         */
        "setValue": (value: string, writeOperation?: (value: string) => Promise<any>) => Promise<any>;
        /**
          * Set the value silently without emitting events or status changes
          * @param value - The date string value to set (ISO format)
         */
        "setValueSilent": (value: string) => Promise<void>;
        /**
          * Show clear button to reset selection.
          * @default true
         */
        "showClearButton": boolean;
        /**
          * Show last updated timestamp below the component.
          * @example ```html <ui-calendar showLastUpdated="true"></ui-calendar> ```
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show status badge when true
          * @default true
         */
        "showStatus": boolean;
        /**
          * Show today button for quick navigation.
          * @default true
         */
        "showTodayButton": boolean;
        /**
          * Show week numbers in calendar grid.
          * @default false
         */
        "showWeekNumbers": boolean;
        /**
          * Component size for different use cases. - small: Compact calendar for tight spaces - medium: Standard size (default) - large: Prominent calendar with larger touch targets
          * @default 'medium'
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Time format when includeTime is enabled. - 12: 12-hour format with AM/PM - 24: 24-hour format
          * @default '12'
         */
        "timeFormat": '12' | '24';
        /**
          * Trigger a visual pulse effect to indicate the value was read/accessed.
          * @example ```typescript await calendar.triggerReadPulse(); ```
         */
        "triggerReadPulse": () => Promise<void>;
        /**
          * Current selected date-time value (ISO string).
         */
        "value"?: string;
        /**
          * Visual style variant matching component family design. - minimal: Clean, borderless design with subtle hover effects - outlined: Border with transparent background, colored accents - filled: Solid background with contrasting text - elevated: Shadow and depth for prominent display
          * @default 'minimal'
         */
        "variant": 'minimal' | 'outlined' | 'filled' | 'elevated';
    }
    /**
     * A versatile checkbox component designed for WoT device control.
     * It has various features, multiple visual styles, status and last updated timestamps.
     * @example Basic Usage
     * ```html
     * <ui-checkbox variant="outlined" value="true" label="Accept Terms"></ui-checkbox>
     * <ui-checkbox variant="minimal" value="false" label="Enable Notifications"></ui-checkbox>
     * <ui-checkbox variant="filled" label="Device Status" show-last-updated="true"></ui-checkbox>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const checkbox = document.getElementById('device-checkbox');
     * const initialValue = Boolean(await (await thing.readProperty('enabled')).value());
     * await checkbox.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('enabled', value);
     * }
     * });
     * ```
     */
    interface UiCheckbox {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark": boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled": boolean;
        /**
          * Gets the current checkbox value with optional metadata.
          * @param includeMetadata - Whether to include status, timestamp and other information
          * @returns Current value or detailed metadata object
         */
        "getValue": (includeMetadata?: boolean) => Promise<boolean | { value: boolean; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Enable keyboard navigation so user can toggle using 'Space' and 'Enter' keys) when true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed right to the checkbox (optional)
         */
        "label"?: string;
        /**
          * (Advance) to manually set the operation status indicator.  Useful when managing device communication externally and you want to show loading/success/error states.
          * @param status - The status to display
          * @param errorMessage - (Optional) error message for error status
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Sets the checkbox value with optional device communication api and other options.  This is the primary method for connecting checkboxes to real devices. It supports optimistic updates, error handling, and automatic retries.
          * @param value - The boolean value to set (true = checked, false = unchecked)
          * @param options - Configuration for device communication and behavior
          * @returns Promise resolving to true if successful, false if failed
          * @example Basic Usage ```javascript await checkbox.setValue(true); ```
          * @example JS integaration with node-wot browser bundle * ```javascript const checkbox = document.getElementById('device-checkbox'); const initialValue = Boolean(await (await thing.readProperty('enabled')).value()); await checkbox.setValue(initialValue, { writeOperation: async value => { await thing.writeProperty('enabled', value); }, autoRetry: { attempts: 3, delay: 1000 } }); ```
         */
        "setValue": (value: boolean, options?: { writeOperation?: (value: boolean) => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; autoRetry?: { attempts: number; delay: number; }; _isRevert?: boolean; }) => Promise<boolean>;
        /**
          * This method updates the value silently without triggering events.  Use this for external data synchronization to prevent event loops. Perfect for WebSocket updates or polling from remote devices.
          * @param value - The boolean value to set silently
         */
        "setValueSilent": (value: boolean) => Promise<void>;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus": boolean;
        /**
          * Current boolean value of the checkbox
          * @default false
         */
        "value": boolean;
        /**
          * Visual style variant of the checkbox. - minimal: Clean design with transparent background - outlined: Border-focused design with outline style - filled: Solid background when checked
          * @default 'outlined'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Event listener component for subscribing to and publishing WoT events.
     * Provides real-time event handling with filtering, buffering, and visual feedback.
     * @example Basic Event Subscription
     * ```html
     * <ui-event
     * label="Temperature Events"
     * event-name="temperatureChanged"
     * max-events="10"
     * show-timestamp="true">
     * </ui-event>
     * ```
     * @example Event Publishing
     * ```html
     * <ui-event
     * label="Alert Publisher"
     * mode="publisher"
     * event-name="alertTriggered"
     * auto-publish="true">
     * </ui-event>
     * ```
     * @example Advanced Filtering
     * ```javascript
     * const listener = document.getElementById('event-listener');
     * // Set custom filter
     * await listener.setEventFilter((event) => {
     * return event.payload.temperature > 25;
     * });
     * // Subscribe to events
     * listener.addEventListener('eventReceived', (e) => {
     * console.log('Filtered event:', e.detail);
     * });
     * ```
     */
    interface UiEvent {
        /**
          * Auto-publish mode for publishers
          * @default false
         */
        "autoPublish": boolean;
        /**
          * Clear event history
         */
        "clearEvents": () => Promise<void>;
        /**
          * Color theme
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Connection status indicator
          * @default false
         */
        "connected": boolean;
        /**
          * Dark mode support
          * @default false
         */
        "dark": boolean;
        /**
          * Whether the component is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Enable event filtering
          * @default false
         */
        "enableFiltering": boolean;
        /**
          * Event name to subscribe to or publish
         */
        "eventName"?: string;
        /**
          * Filter expression (JSONPath or simple property)
         */
        "filterExpression"?: string;
        /**
          * Get event history
         */
        "getEventHistory": () => Promise<Array<any>>;
        /**
          * Enable keyboard interactions
          * @default true
         */
        "keyboard": boolean;
        /**
          * Display label for the component
         */
        "label"?: string;
        /**
          * Maximum number of events to keep in history
          * @default 15
         */
        "maxEvents": number;
        /**
          * Component mode: listener or publisher
          * @default 'listener'
         */
        "mode": 'listener' | 'publisher' | 'bidirectional';
        /**
          * Event payload template for publishing
         */
        "payloadTemplate"?: string;
        /**
          * Publish an event
         */
        "publishEvent": (payload: any, options?: { eventName?: string; }) => Promise<void>;
        /**
          * Whether component is in readonly mode
          * @default false
         */
        "readonly": boolean;
        /**
          * Set event filter function
         */
        "setEventFilter": (filterFn: (event: any) => boolean) => Promise<void>;
        /**
          * Set component status
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Show last updated timestamp
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show status badge when true
          * @default true
         */
        "showStatus": boolean;
        /**
          * Show event timestamps
          * @default true
         */
        "showTimestamp": boolean;
        /**
          * Start listening for events
         */
        "startListening": () => Promise<void>;
        /**
          * Stop listening for events
         */
        "stopListening": () => Promise<void>;
        /**
          * Visual style variant
          * @default 'outlined'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Notification component for displaying temporary event data with auto-dismiss functionality.
     * Supports multiple notification types with smooth animations and customizable duration.
     * @example Basic Notification
     * ```html
     * <ui-notification message="Operation completed successfully" type="success"></ui-notification>
     * ```
     * @example Custom Duration
     * ```html
     * <ui-notification 
     * message="This will auto-dismiss in 5 seconds" 
     * type="info" 
     * duration="5000">
     * </ui-notification>
     * ```
     * @example Manual Dismiss
     * ```html
     * <ui-notification 
     * message="Click to dismiss" 
     * type="warning" 
     * duration="0"
     * id="manual-notification">
     * </ui-notification>
     * ```
     * @example JavaScript Integration
     * ```javascript
     * const notification = document.querySelector('#manual-notification');
     * // Listen for close events
     * notification.addEventListener('notificationClose', (e) => {
     * console.log('Notification closed:', e.detail);
     * });
     * // Dismiss programmatically
     * await notification.dismiss();
     * // Show notification programmatically
     * await notification.show();
     * ```
     */
    interface UiNotification {
        /**
          * Enable dark theme for the component.
          * @default false
         */
        "dark": boolean;
        /**
          * Dismiss the notification with animation.
          * @param method - How the notification was dismissed
         */
        "dismiss": (method?: "auto" | "manual" | "programmatic") => Promise<void>;
        /**
          * Duration in milliseconds before auto-dismiss. Set to 0 to disable auto-dismiss. Default: 3000 (3 seconds)
          * @default 3000
         */
        "duration": number;
        /**
          * The message text to display in the notification.
          * @default ''
         */
        "message": string;
        /**
          * Show the notification with animation.
         */
        "show": () => Promise<void>;
        /**
          * Whether to show a close button. Default: true
          * @default true
         */
        "showCloseButton": boolean;
        /**
          * Whether to show an icon based on the notification type. Default: true
          * @default true
         */
        "showIcon": boolean;
        /**
          * Toggle the notification visibility.
         */
        "toggle": () => Promise<void>;
        /**
          * Type of notification affecting styling and icons. - info: General information (blue) - success: Success messages (green)  - warning: Warning messages (orange) - error: Error messages (red)
          * @default 'info'
         */
        "type": 'info' | 'success' | 'warning' | 'error';
    }
    /**
     * A versatile number picker component designed for WoT device control and monitoring.
     * It has increment/decrement buttons, multiple visual styles, status and last updated timestamps.
     * Supports both interactive control and read-only monitoring modes with customizable ranges.
     * @example Basic Usage
     * ```html
     * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
     * <ui-number-picker variant="filled" value="50" min="0" max="100"></ui-number-picker>
     * <ui-number-picker readonly="true" label="Sensor" show-last-updated="true"></ui-number-picker>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const numberPicker = document.getElementById('device-volume');
     * const initialValue = Number(await (await thing.readProperty('volume')).value());
     * await numberPicker.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('volume', value);
     * }
     * });
     * ```
     */
    interface UiNumberPicker {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for read-only monitoring
          * @default true
         */
        "connected": boolean;
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark": boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled": boolean;
        /**
          * Gets the current number picker value with optional metadata.
          * @param includeMetadata - Whether to include status, timestamp and other information
          * @returns Current value or detailed metadata object
         */
        "getValue": (includeMetadata?: boolean) => Promise<number | { value: number; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Enable keyboard navigation so user can change value using 'Arrow Up' and 'Arrow Down' keys) when true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed above the number picker (optional)
         */
        "label"?: string;
        /**
          * Maximum allowed value (optional)
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum allowed value (optional)
          * @default 0
         */
        "min"?: number;
        /**
          * Read only mode, display value but prevent changes when true. Just to monitor changes
          * @default false
         */
        "readonly": boolean;
        /**
          * (Advance) to manually set the operation status indicator.  Useful when managing device communication externally and you want to show loading/success/error states.
          * @param status - The status to display
          * @param errorMessage - (Optional) error message for error status
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Sets the number picker value with optional device communication api and other options.  This is the primary method for connecting number pickers to real devices. It supports optimistic updates, error handling, and automatic retries.
          * @param value - The numeric value to set
          * @param options - Configuration for device communication and behavior
          * @returns Promise resolving to true if successful, false if failed
          * @example Basic Usage ```javascript await numberPicker.setValue(50); ```
          * @example JS integaration with node-wot browser bundle * ```javascript const numberPicker = document.getElementById('device-volume'); const initialValue = Number(await (await thing.readProperty('volume')).value()); await numberPicker.setValue(initialValue, { writeOperation: async value => { await thing.writeProperty('volume', value); }, autoRetry: { attempts: 3, delay: 1000 } }); ```
         */
        "setValue": (value: number, options?: { writeOperation?: (value: number) => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; autoRetry?: { attempts: number; delay: number; }; _isRevert?: boolean; }) => Promise<boolean>;
        /**
          * This method updates the value silently without triggering events.  Use this for external data synchronization to prevent event loops. Perfect for WebSocket updates or polling from remote devices.
          * @param value - The numeric value to set silently
         */
        "setValueSilent": (value: number) => Promise<void>;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus": boolean;
        /**
          * Step increment/decrement amount (optional)
          * @default 1
         */
        "step"?: number;
        /**
          * This triggers a visual pulse for read-only mode.  Useful to shows users when data has been refreshed from an external source. The pulse automatically fades after 1.5 seconds.
         */
        "triggerReadPulse": () => Promise<void>;
        /**
          * Current numeric value of the number picker
          * @default 0
         */
        "value": number;
        /**
          * Visual style variant of the number picker. - minimal: Clean buttons with subtle background (default) - outlined: Buttons with border outline - filled: Solid filled buttons
          * @default 'minimal'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Advanced slider component with reactive state management and multiple visual styles.
     * @example Basic Usage
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="50" label="Brightness"></ui-slider>
     * ```
     * @example Different Variants
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="30" label="Narrow Style"></ui-slider>
     * <ui-slider variant="wide" min="0" max="100" value="60" label="Wide Style"></ui-slider>
     * <ui-slider variant="rainbow" min="0" max="360" value="180" label="Rainbow Hue"></ui-slider>
     * <ui-slider variant="neon" min="0" max="100" value="80" label="Neon Glow"></ui-slider>
     * <ui-slider variant="stepped" step="10" min="0" max="100" value="50" label="Stepped Control"></ui-slider>
     * ```
     * @example Read-Only Mode
     * ```html
     * <ui-slider readonly="true" value="75" min="0" max="100" label="Sensor Reading"></ui-slider>
     * ```
     * @example JavaScript Integration with Multiple Sliders
     * ```javascript
     * // For single slider
     * const slider = document.querySelector('#my-slider');
     * // For multiple sliders
     * const sliders = document.querySelectorAll('ui-slider');
     * sliders.forEach(slider => {
     * slider.addEventListener('valueMsg', (e) => {
     * console.log('Slider ID:', e.detail.source);
     * console.log('New value:', e.detail.payload);
     * });
     * });
     * // Set value by ID
     * const brightnessSlider = document.getElementById('brightness-slider');
     * await brightnessSlider.setValue(75);
     * ```
     * @example HTML with IDs
     * ```html
     * <ui-slider id="brightness-slider" label="Brightness" variant="narrow" min="0" max="100"></ui-slider>
     * <ui-slider id="volume-slider" label="Volume" variant="wide" min="0" max="100"></ui-slider>
     * ```
     */
    interface UiSlider {
        /**
          * Color theme variant.
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for readonly mode
          * @default true
         */
        "connected": boolean;
        /**
          * Enable dark theme for the component. When true, uses light text on dark backgrounds.
          * @default false
         */
        "dark": boolean;
        /**
          * Whether the slider is disabled (cannot be interacted with).
          * @default false
         */
        "disabled": boolean;
        /**
          * Get the current slider value with optional metadata.
          * @param includeMetadata - Include last updated timestamp and status information
          * @returns Promise that resolves to the current value or value with metadata
          * @example Basic Usage (Easy) ```javascript // Get simple numeric value const slider = document.querySelector('ui-slider'); const currentValue = await slider.getValue(); console.log('Current position:', currentValue); ```
          * @example With Metadata (Advanced) ```javascript // Get value with status information const slider = document.querySelector('ui-slider'); const result = await slider.getValue(true);  console.log('Value:', result.value); console.log('Last updated:', new Date(result.lastUpdated)); console.log('Status:', result.status); if (result.error) { console.error('Error:', result.error); } ```
          * @example Multi-Slider Dashboard (Advanced) ```javascript // Monitor multiple sliders const sliders = document.querySelectorAll('ui-slider'); const dashboard = {};  for (const slider of sliders) { const data = await slider.getValue(true); dashboard[slider.id] = { value: data.value, percentage: ((data.value - slider.min) / (slider.max - slider.min)) * 100, status: data.status, lastUpdated: data.lastUpdated }; }  console.log('Slider Dashboard:', dashboard); ```
          * @example Range Validation (Advanced) ```javascript // Check if values are in acceptable ranges const temperatureSliders = document.querySelectorAll('.temperature-slider'); const alerts = [];  for (const slider of temperatureSliders) { const value = await slider.getValue(); const zone = slider.getAttribute('data-zone');  if (value < 65 || value > 78) { alerts.push({ zone, temperature: value, status: value < 65 ? 'too-cold' : 'too-hot' }); } }  if (alerts.length > 0) { console.warn('Temperature alerts:', alerts); } ```
         */
        "getValue": (includeMetadata?: boolean) => Promise<number | { value: number; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Enable keyboard navigation (Arrow keys, Home, End, PageUp, PageDown). Default: true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed above the slider.
         */
        "label"?: string;
        /**
          * Maximum value of the slider.
          * @default 100
         */
        "max": number;
        /**
          * Minimum value of the slider.
          * @default 0
         */
        "min": number;
        /**
          * Orientation of the slider.
          * @default 'horizontal'
         */
        "orientation": 'horizontal' | 'vertical';
        /**
          * Whether the slider is read-only (displays value but cannot be changed).
          * @default false
         */
        "readonly": boolean;
        /**
          * Set operation status for external status management.
          * @param status - The status to set ('idle', 'loading', 'success', 'error')
          * @param errorMessage - Optional error message for error status
          * @returns Promise<void>
          * @example Basic Usage (Easy) ```javascript const slider = document.querySelector('ui-slider');  // Show loading await slider.setStatus('loading');  // Show success await slider.setStatus('success');  // Show error await slider.setStatus('error', 'Connection timeout');  // Clear status await slider.setStatus('idle'); ```
          * @example Climate System Control (Advanced) ```javascript // HVAC system with complex status management const thermostatSlider = document.querySelector('#thermostat');  async function updateHVACSetpoint(temperature) { try { await thermostatSlider.setStatus('loading');  // Step 1: Validate temperature range if (temperature < 60 || temperature > 85) { throw new Error('Temperature out of acceptable range'); }  // Step 2: Check system status const systemResponse = await fetch('/api/hvac/status'); const systemStatus = await systemResponse.json();  if (systemStatus.maintenance_mode) { throw new Error('System in maintenance mode'); }  // Step 3: Set new temperature const setResponse = await fetch('/api/hvac/setpoint', { method: 'POST', body: JSON.stringify({ temperature }) });  if (!setResponse.ok) { throw new Error('Failed to update setpoint'); }  // Success await thermostatSlider.setStatus('success');  } catch (error) { await thermostatSlider.setStatus('error', error.message); } } ```
          * @example Progressive Status Updates (Advanced) ```javascript // Multi-step process with progressive status const calibrationSlider = document.querySelector('#sensor-calibration');  async function calibrateSensor(offset) { const steps = [ 'Preparing sensor...', 'Applying offset...', 'Stabilizing...', 'Verifying calibration...' ];  try { for (let i = 0; i < steps.length; i++) { await calibrationSlider.setStatus('loading'); console.log(`Step ${i + 1}: ${steps[i]}`);  // Simulate step processing await performCalibrationStep(i, offset); await new Promise(resolve => setTimeout(resolve, 1000)); }  await calibrationSlider.setStatus('success');  } catch (error) { await calibrationSlider.setStatus('error', `Calibration failed at step ${i + 1}`); } } ```
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Set the slider value with automatic device communication and status management. Values are automatically clamped to the min/max range.
          * @param value - The numeric value to set (will be clamped to min/max range)
          * @param options - Configuration options for the operation
          * @returns Promise<boolean> - true if successful, false if failed
          * @example Basic Usage (Easy) ```javascript // Simple value setting const slider = document.querySelector('ui-slider'); await slider.setValue(50);    // Set to 50 await slider.setValue(75.5);  // Set to 75.5 (decimals supported) ```
          * @example Temperature Control (Advanced) ```javascript // Smart thermostat control const thermostat = document.querySelector('#thermostat');  await thermostat.setValue(72, { writeOperation: async () => { const response = await fetch('/api/hvac/setpoint', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({  temperature: 72,  zone: 'living-room'  }) }); if (!response.ok) throw new Error('Failed to set temperature'); }, optimistic: true, autoRetry: { attempts: 2, delay: 3000 } }); ```
          * @example Volume Control (Advanced) ```javascript // Audio system volume control const volumeSlider = document.querySelector('#volume');  await volumeSlider.setValue(85, { writeOperation: async () => { await fetch(`/api/audio/volume/${85}`); }, readOperation: async () => { // Verify the actual volume was set const response = await fetch('/api/audio/volume'); const { volume } = await response.json(); if (Math.abs(volume - 85) > 1) { throw new Error('Volume mismatch'); } } }); ```
          * @example Sensor Calibration (Advanced) ```javascript // Sensor calibration with validation const calibrationSlider = document.querySelector('#sensor-offset');  await calibrationSlider.setValue(-2.5, { writeOperation: async () => { // Apply calibration offset await fetch('/api/sensors/calibrate', { method: 'POST', body: JSON.stringify({ offset: -2.5 }) });  // Wait for sensor to stabilize await new Promise(resolve => setTimeout(resolve, 2000));  // Validate calibration worked const testReading = await fetch('/api/sensors/test-reading'); const { reading } = await testReading.json(); if (Math.abs(reading) > 0.1) { throw new Error('Calibration verification failed'); } } }); ```
         */
        "setValue": (value: number, options?: { writeOperation?: (value: number) => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; autoRetry?: { attempts: number; delay: number; }; _isRevert?: boolean; }) => Promise<boolean>;
        /**
          * Set value programmatically without triggering events (for external updates). Values are automatically clamped to the min/max range.
          * @param value - The numeric value to set silently
          * @returns Promise<void>
          * @example Basic Usage (Easy) ```javascript // Update from external data without triggering events const slider = document.querySelector('ui-slider'); await slider.setValueSilent(45); ```
          * @example Sensor Data Updates (Advanced) ```javascript // Real-time sensor data updates const temperatureSlider = document.querySelector('#temperature-display');  // WebSocket connection for live sensor data const ws = new WebSocket('ws://sensors.example.com/temperature'); ws.addEventListener('message', async (event) => { const sensorData = JSON.parse(event.data);  if (sensorData.sensorId === 'temp-001') { // Silent update to prevent event loops await temperatureSlider.setValueSilent(sensorData.temperature);  // Visual pulse to show fresh data await temperatureSlider.triggerReadPulse(); } }); ```
          * @example Multi-Zone Climate Control (Advanced) ```javascript // Update multiple zone sliders from API async function updateAllZones() { const response = await fetch('/api/climate/zones'); const zones = await response.json();  for (const zone of zones) { const slider = document.querySelector(`#zone-${zone.id}`); if (slider) { // Silent update from API data await slider.setValueSilent(zone.currentTemperature);  // Update setpoint slider too const setpointSlider = document.querySelector(`#setpoint-${zone.id}`); if (setpointSlider) { await setpointSlider.setValueSilent(zone.targetTemperature); } } } }  // Update every 60 seconds setInterval(updateAllZones, 60000); ```
          * @example Data Synchronization (Advanced) ```javascript // Sync slider with external control system const volumeSlider = document.querySelector('#system-volume');  // Listen for external volume changes (from physical controls) const eventSource = new EventSource('/api/audio/events'); eventSource.addEventListener('volume-changed', async (event) => { const { newVolume, source } = JSON.parse(event.data);  // Only update if change came from external source if (source !== 'web-ui') { await volumeSlider.setValueSilent(newVolume); await volumeSlider.triggerReadPulse(); } }); ```
         */
        "setValueSilent": (value: number) => Promise<void>;
        /**
          * Show last updated timestamp when true
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show status badge when true
          * @default true
         */
        "showStatus": boolean;
        /**
          * Step increment for the slider.
          * @default 1
         */
        "step": number;
        /**
          * Shape of the slider thumb.
          * @default 'circle'
         */
        "thumbShape": 'circle' | 'square' | 'arrow' | 'triangle' | 'diamond';
        /**
          * Trigger a read pulse indicator for readonly mode when data is actually fetched. Provides visual feedback for data refresh operations.
          * @returns Promise<void>
          * @example Basic Usage (Easy) ```javascript // Show visual pulse when data is refreshed const slider = document.querySelector('ui-slider'); await slider.triggerReadPulse(); ```
          * @example Periodic Data Refresh (Advanced) ```javascript // Regular sensor data updates with visual feedback const sensorSlider = document.querySelector('#pressure-sensor');  setInterval(async () => { try { const response = await fetch('/api/sensors/pressure'); const data = await response.json();  // Update value silently await sensorSlider.setValueSilent(data.pressure);  // Show visual pulse to indicate fresh data await sensorSlider.triggerReadPulse();  } catch (error) { console.error('Failed to refresh pressure data:', error); } }, 10000); // Every 10 seconds ```
          * @example User-Triggered Refresh (Advanced) ```javascript // Manual refresh button with pulse feedback const refreshButton = document.querySelector('#refresh-sensors'); const sliders = document.querySelectorAll('ui-slider[readonly]');  refreshButton.addEventListener('click', async () => { refreshButton.disabled = true; refreshButton.textContent = 'Refreshing...';  try { // Fetch all sensor data const response = await fetch('/api/sensors/all'); const sensorData = await response.json();  // Update each slider with pulse for (const slider of sliders) { const sensorId = slider.getAttribute('data-sensor'); if (sensorData[sensorId]) { await slider.setValueSilent(sensorData[sensorId].value); await slider.triggerReadPulse(); } }  } catch (error) { console.error('Refresh failed:', error); } finally { refreshButton.disabled = false; refreshButton.textContent = 'Refresh Sensors'; } }); ```
          * @example Real-time Streaming Data (Advanced) ```javascript // Continuous data stream with selective pulse const temperatureSliders = document.querySelectorAll('.temperature-sensor');  const eventSource = new EventSource('/api/sensors/stream'); eventSource.addEventListener('temperature', async (event) => { const { sensorId, temperature, isSignificantChange } = JSON.parse(event.data);  const slider = document.querySelector(`[data-sensor="${sensorId}"]`); if (slider) { // Always update value await slider.setValueSilent(temperature);  // Only pulse for significant changes (> 1 degree) if (isSignificantChange) { await slider.triggerReadPulse(); } } }); ```
         */
        "triggerReadPulse": () => Promise<void>;
        /**
          * Current numeric value of the slider.
          * @default 0
         */
        "value": number;
        /**
          * Visual style variant of the slider.
          * @default 'narrow'
         */
        "variant": 'narrow' | 'wide' | 'rainbow' | 'neon' | 'stepped';
    }
    /**
     * TextDisplay component supports multiple variants for text-heavy data display and editing.
     * Provides field, area, structured, unstructured, and editable modes with consistent styling.
     * @example Basic Field Display
     * ```html
     * <ui-text mode="field" variant="outlined" value="Sample text" label="Name"></ui-text>
     * ```
     * @example Multi-line Area
     * ```html
     * <ui-text mode="area" variant="filled" value="Long text content..." label="Description"></ui-text>
     * ```
     * @example Structured Data Display
     * ```html
     * <ui-text mode="structured" variant="minimal" value='{"key": "value"}' label="JSON Data"></ui-text>
     * ```
     * @example Editable Mode
     * ```html
     * <ui-text mode="editable" variant="outlined" value="Edit me" label="Notes" id="notes-field"></ui-text>
     * ```
     * @example JavaScript Integration
     * ```javascript
     * const textDisplay = document.querySelector('#notes-field');
     * // Listen for value changes in editable mode
     * textDisplay.addEventListener('valueMsg', (e) => {
     * console.log('Text changed to:', e.detail.payload);
     * });
     * // Set value programmatically
     * await textDisplay.setValue('New content');
     * ```
     */
    interface UiText {
        /**
          * Color theme variant.
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for readonly mode
          * @default true
         */
        "connected": boolean;
        /**
          * Enable dark theme for the component. When true, uses light text on dark backgrounds.
          * @default false
         */
        "dark": boolean;
        /**
          * Whether the component is disabled (editable mode only).
          * @default false
         */
        "disabled": boolean;
        /**
          * Focus the input element (editable mode only).
         */
        "focusInput": () => Promise<void>;
        /**
          * Get the current text value with optional metadata.
          * @param includeMetadata - Whether to include additional metadata (default: false)
          * @returns Promise<string | MetadataResult> - Current value or object with metadata
          * @example ```javascript // Basic usage const text = await textDisplay.getValue(); console.log('Current text:', text);  // With metadata const result = await textDisplay.getValue(true); console.log('Value:', result.value); console.log('Last updated:', new Date(result.lastUpdated)); console.log('Status:', result.status); ```
         */
        "getValue": (includeMetadata?: boolean) => Promise<string | { value: string; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Enable keyboard navigation for editable mode. Default: true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed above the text display.
         */
        "label"?: string;
        /**
          * Maximum character limit (editable mode only).
         */
        "maxLength"?: number;
        /**
          * Maximum number of rows for area mode.
          * @default 10
         */
        "maxRows": number;
        /**
          * Minimum number of rows for area mode.
          * @default 3
         */
        "minRows": number;
        /**
          * Display mode for the text component. - field: One-line text display - area: Expandable text box (multi-line) - unstructured: Plain style, no highlighting - structured: Highlighted block (for JSON-like or formatted text) - editable: User can edit/write directly
          * @default 'field'
         */
        "mode": 'field' | 'area' | 'unstructured' | 'structured' | 'editable';
        /**
          * Placeholder text shown when value is empty (editable mode only).
         */
        "placeholder"?: string;
        /**
          * Whether the component is read-only.
          * @default false
         */
        "readonly": boolean;
        /**
          * Set operation status for external status management. Use this method to manually control the visual status indicators when managing operations externally.
          * @param status - The status to set ('idle', 'loading', 'success', 'error')
          * @param errorMessage - Optional error message for error status
          * @returns Promise<void>
          * @example ```javascript const textDisplay = document.querySelector('ui-text');  // Show loading indicator await textDisplay.setStatus('loading');  try {   await saveToServer();   await textDisplay.setStatus('success'); } catch (error) {   await textDisplay.setStatus('error', error.message); }  // Clear status indicator await textDisplay.setStatus('idle'); ```
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Set the text value and handle optional operations and status management.
          * @param value - The string value to set
          * @param options - Configuration options for the operation
          * @returns Promise<boolean> - true if successful, false if failed
          * @example ```javascript // Basic usage await textDisplay.setValue('New text content');  // With external operation await textDisplay.setValue('Updated text', {   writeOperation: async () => {     const response = await fetch('/api/text', {       method: 'POST',       body: JSON.stringify({ text: 'Updated text' })     });   },   optimistic: true }); ```
         */
        "setValue": (value: string, options?: { writeOperation?: (value: string) => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; autoRetry?: { attempts: number; delay: number; }; _isRevert?: boolean; }) => Promise<boolean>;
        /**
          * Set value without triggering events (for external updates). Use this method when updating from external data sources to prevent event loops.
          * @param value - The string value to set silently
          * @returns Promise<void>
          * @example ```javascript // Basic silent update await textDisplay.setValueSilent('Updated from server');  // In real-time context (WebSocket) websocket.onmessage = async (event) => {   const data = JSON.parse(event.data);   await textDisplay.setValueSilent(data.text); }; ```
         */
        "setValueSilent": (value: string) => Promise<void>;
        /**
          * Show character count (editable mode only).
          * @default false
         */
        "showCharCount": boolean;
        /**
          * Show last updated timestamp.
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show line numbers (area and structured modes).
          * @default false
         */
        "showLineNumbers": boolean;
        /**
          * Show status badge when true
          * @default true
         */
        "showStatus": boolean;
        /**
          * Current text value of the component.
          * @default ''
         */
        "value": string;
        /**
          * Visual style variant of the text display. - minimal: Text-only with subtle underline or accent - outlined: Border style applied (default) - filled: Background color applied
          * @default 'outlined'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * A versatile toggle switch component designed for WoT device control and monitoring.
     * It has various features, multiple visual styles, status and last updated timestamps.
     * Supports both interactive control and read-only monitoring modes.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" value="true" label="Light"></ui-toggle>
     * <ui-toggle variant="neon" value="false" label="Fan"></ui-toggle>
     * <ui-toggle readonly="true" label="Sensor" show-last-updated="true"></ui-toggle>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const toggle = document.getElementById('device-toggle');
     * const initialValue = Boolean(await (await thing.readProperty('power')).value());
     * await toggle.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('power', value);
     * }
     * });
     * ```
     */
    interface UiToggle {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for read-only monitoring
          * @default true
         */
        "connected": boolean;
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark": boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled": boolean;
        /**
          * Gets the current toggle value with optional metadata.
          * @param includeMetadata - Whether to include status, timestamp and other information
          * @returns Current value or detailed metadata object
         */
        "getValue": (includeMetadata?: boolean) => Promise<boolean | { value: boolean; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Enable keyboard navigation so user can toggle using 'Space' and 'Enter' keys) when true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed left to the toggle (optional)
         */
        "label"?: string;
        /**
          * Read only mode, display value but prevent changes when true. Just to monitor changes
          * @default false
         */
        "readonly": boolean;
        /**
          * (Advance) to manually set the operation status indicator.  Useful when managing device communication externally and you want to show loading/success/error states.
          * @param status - The status to display
          * @param errorMessage - (Optional) error message for error status
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Sets the toggle value with optional device communication api and other options.  This is the primary method for connecting toggles to real devices. It supports optimistic updates, error handling, and automatic retries.
          * @param value - The boolean value to set (true = on, false = off)
          * @param options - Configuration for device communication and behavior
          * @returns Promise resolving to true if successful, false if failed
          * @example Basic Usage ```javascript await toggle.setValue(true); ```
          * @example JS integaration with node-wot browser bundle * ```javascript const toggle = document.getElementById('device-toggle'); const initialValue = Boolean(await (await thing.readProperty('power')).value()); await toggle.setValue(initialValue, { writeOperation: async value => { await thing.writeProperty('power', value); }, autoRetry: { attempts: 3, delay: 1000 } }); ```
         */
        "setValue": (value: boolean, options?: { writeOperation?: (value: boolean) => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; autoRetry?: { attempts: number; delay: number; }; _isRevert?: boolean; }) => Promise<boolean>;
        /**
          * This method updates the value silently without triggering events.  Use this for external data synchronization to prevent event loops. Perfect for WebSocket updates or polling from remote devices.
          * @param value - The boolean value to set silently
         */
        "setValueSilent": (value: boolean) => Promise<void>;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus": boolean;
        /**
          * This triggers a visual pulse for read-only mode.  Useful to shows users when data has been refreshed from an external source. The pulse automatically fades after 1.5 seconds.
         */
        "triggerReadPulse": () => Promise<void>;
        /**
          * Current boolean value of the toggle
          * @default false
         */
        "value": boolean;
        /**
          * Visual style variant of the toggle. - circle: Common pill-shaped toggle (default) - square: Rectangular toggle with square thumb - apple: iOS-style switch (bigger size, rounded edges) - cross: Shows × when off, ✓ when on with red background when off and green when on - neon: Glowing effect when active
          * @default 'circle'
         */
        "variant": 'circle' | 'square' | 'apple' | 'cross' | 'neon';
    }
}
export interface UiButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiButtonElement;
}
export interface UiCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiCalendarElement;
}
export interface UiCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiCheckboxElement;
}
export interface UiEventCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiEventElement;
}
export interface UiNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiNotificationElement;
}
export interface UiNumberPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiNumberPickerElement;
}
export interface UiSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiSliderElement;
}
export interface UiTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiTextElement;
}
export interface UiToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiToggleElement;
}
declare global {
    interface HTMLUiButtonElementEventMap {
        "clickMsg": UiMsg<string>;
    }
    /**
     * A simple button component designed for WoT device actions.
     * Features multiple visual styles, status indicators, and Web of Things integration.
     * Buttons trigger actions rather than managing state values.
     * @example Basic Usage
     * ```html
     * <ui-button label="Click Me"></ui-button>
     * <ui-button variant="filled" label="Submit" show-status="true"></ui-button>
     * ```
     * @example WoT Action Integration
     * ```javascript
     * const button = document.getElementById('device-button');
     * await button.setAction(async () => {
     * await thing.invokeAction('execute');
     * });
     * ```
     */
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiButtonElementEventMap>(type: K, listener: (this: HTMLUiButtonElement, ev: UiButtonCustomEvent<HTMLUiButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiButtonElementEventMap>(type: K, listener: (this: HTMLUiButtonElement, ev: UiButtonCustomEvent<HTMLUiButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiCalendarElementEventMap {
        "dateChange": UiCalendarDateChange;
        "valueChange": UiCalendarValueChange;
        "valueMsg": UiMsg<string>;
    }
    /**
     * Advanced calendar component with comprehensive styling, variants, and features.
     * Matches the design family of ui-button, ui-slider, and other components.
     * @example Basic Usage
     * ```html
     * <ui-calendar variant="outlined" color="primary" label="Select Date"></ui-calendar>
     * ```
     * @example Different Variants & Colors
     * ```html
     * <ui-calendar variant="minimal" color="secondary" label="Minimal Calendar"></ui-calendar>
     * <ui-calendar variant="filled" color="primary" label="Filled Calendar"></ui-calendar>
     * <ui-calendar variant="outlined" color="neutral" label="Outlined Calendar"></ui-calendar>
     * ```
     * @example Sizes & Features
     * ```html
     * <ui-calendar size="large" include-time="true" label="Large with Time"></ui-calendar>
     * <ui-calendar size="small" inline="true" label="Small Inline"></ui-calendar>
     * ```
     * @example Dark Theme
     * ```html
     * <ui-calendar theme="dark" variant="filled" color="primary"></ui-calendar>
     * ```
     */
    interface HTMLUiCalendarElement extends Components.UiCalendar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiCalendarElementEventMap>(type: K, listener: (this: HTMLUiCalendarElement, ev: UiCalendarCustomEvent<HTMLUiCalendarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiCalendarElementEventMap>(type: K, listener: (this: HTMLUiCalendarElement, ev: UiCalendarCustomEvent<HTMLUiCalendarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiCalendarElement: {
        prototype: HTMLUiCalendarElement;
        new (): HTMLUiCalendarElement;
    };
    interface HTMLUiCheckboxElementEventMap {
        "valueMsg": UiMsg<boolean>;
    }
    /**
     * A versatile checkbox component designed for WoT device control.
     * It has various features, multiple visual styles, status and last updated timestamps.
     * @example Basic Usage
     * ```html
     * <ui-checkbox variant="outlined" value="true" label="Accept Terms"></ui-checkbox>
     * <ui-checkbox variant="minimal" value="false" label="Enable Notifications"></ui-checkbox>
     * <ui-checkbox variant="filled" label="Device Status" show-last-updated="true"></ui-checkbox>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const checkbox = document.getElementById('device-checkbox');
     * const initialValue = Boolean(await (await thing.readProperty('enabled')).value());
     * await checkbox.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('enabled', value);
     * }
     * });
     * ```
     */
    interface HTMLUiCheckboxElement extends Components.UiCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiCheckboxElementEventMap>(type: K, listener: (this: HTMLUiCheckboxElement, ev: UiCheckboxCustomEvent<HTMLUiCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiCheckboxElementEventMap>(type: K, listener: (this: HTMLUiCheckboxElement, ev: UiCheckboxCustomEvent<HTMLUiCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiCheckboxElement: {
        prototype: HTMLUiCheckboxElement;
        new (): HTMLUiCheckboxElement;
    };
    interface HTMLUiEventElementEventMap {
        "eventReceived": UiMsg<any>;
        "eventPublished": UiMsg<any>;
        "valueMsg": UiMsg<any>;
    }
    /**
     * Event listener component for subscribing to and publishing WoT events.
     * Provides real-time event handling with filtering, buffering, and visual feedback.
     * @example Basic Event Subscription
     * ```html
     * <ui-event
     * label="Temperature Events"
     * event-name="temperatureChanged"
     * max-events="10"
     * show-timestamp="true">
     * </ui-event>
     * ```
     * @example Event Publishing
     * ```html
     * <ui-event
     * label="Alert Publisher"
     * mode="publisher"
     * event-name="alertTriggered"
     * auto-publish="true">
     * </ui-event>
     * ```
     * @example Advanced Filtering
     * ```javascript
     * const listener = document.getElementById('event-listener');
     * // Set custom filter
     * await listener.setEventFilter((event) => {
     * return event.payload.temperature > 25;
     * });
     * // Subscribe to events
     * listener.addEventListener('eventReceived', (e) => {
     * console.log('Filtered event:', e.detail);
     * });
     * ```
     */
    interface HTMLUiEventElement extends Components.UiEvent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiEventElementEventMap>(type: K, listener: (this: HTMLUiEventElement, ev: UiEventCustomEvent<HTMLUiEventElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiEventElementEventMap>(type: K, listener: (this: HTMLUiEventElement, ev: UiEventCustomEvent<HTMLUiEventElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiEventElement: {
        prototype: HTMLUiEventElement;
        new (): HTMLUiEventElement;
    };
    interface HTMLUiNotificationElementEventMap {
        "notificationClose": {
    message: string;
    type: string;
    dismissMethod: 'auto' | 'manual' | 'programmatic';
    timestamp: number;
  };
        "valueMsg": UiMsg;
    }
    /**
     * Notification component for displaying temporary event data with auto-dismiss functionality.
     * Supports multiple notification types with smooth animations and customizable duration.
     * @example Basic Notification
     * ```html
     * <ui-notification message="Operation completed successfully" type="success"></ui-notification>
     * ```
     * @example Custom Duration
     * ```html
     * <ui-notification 
     * message="This will auto-dismiss in 5 seconds" 
     * type="info" 
     * duration="5000">
     * </ui-notification>
     * ```
     * @example Manual Dismiss
     * ```html
     * <ui-notification 
     * message="Click to dismiss" 
     * type="warning" 
     * duration="0"
     * id="manual-notification">
     * </ui-notification>
     * ```
     * @example JavaScript Integration
     * ```javascript
     * const notification = document.querySelector('#manual-notification');
     * // Listen for close events
     * notification.addEventListener('notificationClose', (e) => {
     * console.log('Notification closed:', e.detail);
     * });
     * // Dismiss programmatically
     * await notification.dismiss();
     * // Show notification programmatically
     * await notification.show();
     * ```
     */
    interface HTMLUiNotificationElement extends Components.UiNotification, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiNotificationElementEventMap>(type: K, listener: (this: HTMLUiNotificationElement, ev: UiNotificationCustomEvent<HTMLUiNotificationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiNotificationElementEventMap>(type: K, listener: (this: HTMLUiNotificationElement, ev: UiNotificationCustomEvent<HTMLUiNotificationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiNotificationElement: {
        prototype: HTMLUiNotificationElement;
        new (): HTMLUiNotificationElement;
    };
    interface HTMLUiNumberPickerElementEventMap {
        "valueMsg": UiMsg<number>;
    }
    /**
     * A versatile number picker component designed for WoT device control and monitoring.
     * It has increment/decrement buttons, multiple visual styles, status and last updated timestamps.
     * Supports both interactive control and read-only monitoring modes with customizable ranges.
     * @example Basic Usage
     * ```html
     * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
     * <ui-number-picker variant="filled" value="50" min="0" max="100"></ui-number-picker>
     * <ui-number-picker readonly="true" label="Sensor" show-last-updated="true"></ui-number-picker>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const numberPicker = document.getElementById('device-volume');
     * const initialValue = Number(await (await thing.readProperty('volume')).value());
     * await numberPicker.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('volume', value);
     * }
     * });
     * ```
     */
    interface HTMLUiNumberPickerElement extends Components.UiNumberPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiNumberPickerElementEventMap>(type: K, listener: (this: HTMLUiNumberPickerElement, ev: UiNumberPickerCustomEvent<HTMLUiNumberPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiNumberPickerElementEventMap>(type: K, listener: (this: HTMLUiNumberPickerElement, ev: UiNumberPickerCustomEvent<HTMLUiNumberPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiNumberPickerElement: {
        prototype: HTMLUiNumberPickerElement;
        new (): HTMLUiNumberPickerElement;
    };
    interface HTMLUiSliderElementEventMap {
        "valueMsg": UiMsg<number>;
    }
    /**
     * Advanced slider component with reactive state management and multiple visual styles.
     * @example Basic Usage
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="50" label="Brightness"></ui-slider>
     * ```
     * @example Different Variants
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="30" label="Narrow Style"></ui-slider>
     * <ui-slider variant="wide" min="0" max="100" value="60" label="Wide Style"></ui-slider>
     * <ui-slider variant="rainbow" min="0" max="360" value="180" label="Rainbow Hue"></ui-slider>
     * <ui-slider variant="neon" min="0" max="100" value="80" label="Neon Glow"></ui-slider>
     * <ui-slider variant="stepped" step="10" min="0" max="100" value="50" label="Stepped Control"></ui-slider>
     * ```
     * @example Read-Only Mode
     * ```html
     * <ui-slider readonly="true" value="75" min="0" max="100" label="Sensor Reading"></ui-slider>
     * ```
     * @example JavaScript Integration with Multiple Sliders
     * ```javascript
     * // For single slider
     * const slider = document.querySelector('#my-slider');
     * // For multiple sliders
     * const sliders = document.querySelectorAll('ui-slider');
     * sliders.forEach(slider => {
     * slider.addEventListener('valueMsg', (e) => {
     * console.log('Slider ID:', e.detail.source);
     * console.log('New value:', e.detail.payload);
     * });
     * });
     * // Set value by ID
     * const brightnessSlider = document.getElementById('brightness-slider');
     * await brightnessSlider.setValue(75);
     * ```
     * @example HTML with IDs
     * ```html
     * <ui-slider id="brightness-slider" label="Brightness" variant="narrow" min="0" max="100"></ui-slider>
     * <ui-slider id="volume-slider" label="Volume" variant="wide" min="0" max="100"></ui-slider>
     * ```
     */
    interface HTMLUiSliderElement extends Components.UiSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiSliderElementEventMap>(type: K, listener: (this: HTMLUiSliderElement, ev: UiSliderCustomEvent<HTMLUiSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiSliderElementEventMap>(type: K, listener: (this: HTMLUiSliderElement, ev: UiSliderCustomEvent<HTMLUiSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiSliderElement: {
        prototype: HTMLUiSliderElement;
        new (): HTMLUiSliderElement;
    };
    interface HTMLUiTextElementEventMap {
        "valueMsg": UiMsg<string>;
    }
    /**
     * TextDisplay component supports multiple variants for text-heavy data display and editing.
     * Provides field, area, structured, unstructured, and editable modes with consistent styling.
     * @example Basic Field Display
     * ```html
     * <ui-text mode="field" variant="outlined" value="Sample text" label="Name"></ui-text>
     * ```
     * @example Multi-line Area
     * ```html
     * <ui-text mode="area" variant="filled" value="Long text content..." label="Description"></ui-text>
     * ```
     * @example Structured Data Display
     * ```html
     * <ui-text mode="structured" variant="minimal" value='{"key": "value"}' label="JSON Data"></ui-text>
     * ```
     * @example Editable Mode
     * ```html
     * <ui-text mode="editable" variant="outlined" value="Edit me" label="Notes" id="notes-field"></ui-text>
     * ```
     * @example JavaScript Integration
     * ```javascript
     * const textDisplay = document.querySelector('#notes-field');
     * // Listen for value changes in editable mode
     * textDisplay.addEventListener('valueMsg', (e) => {
     * console.log('Text changed to:', e.detail.payload);
     * });
     * // Set value programmatically
     * await textDisplay.setValue('New content');
     * ```
     */
    interface HTMLUiTextElement extends Components.UiText, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiTextElementEventMap>(type: K, listener: (this: HTMLUiTextElement, ev: UiTextCustomEvent<HTMLUiTextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiTextElementEventMap>(type: K, listener: (this: HTMLUiTextElement, ev: UiTextCustomEvent<HTMLUiTextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiTextElement: {
        prototype: HTMLUiTextElement;
        new (): HTMLUiTextElement;
    };
    interface HTMLUiToggleElementEventMap {
        "valueMsg": UiMsg<boolean>;
    }
    /**
     * A versatile toggle switch component designed for WoT device control and monitoring.
     * It has various features, multiple visual styles, status and last updated timestamps.
     * Supports both interactive control and read-only monitoring modes.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" value="true" label="Light"></ui-toggle>
     * <ui-toggle variant="neon" value="false" label="Fan"></ui-toggle>
     * <ui-toggle readonly="true" label="Sensor" show-last-updated="true"></ui-toggle>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const toggle = document.getElementById('device-toggle');
     * const initialValue = Boolean(await (await thing.readProperty('power')).value());
     * await toggle.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('power', value);
     * }
     * });
     * ```
     */
    interface HTMLUiToggleElement extends Components.UiToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiToggleElementEventMap>(type: K, listener: (this: HTMLUiToggleElement, ev: UiToggleCustomEvent<HTMLUiToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiToggleElementEventMap>(type: K, listener: (this: HTMLUiToggleElement, ev: UiToggleCustomEvent<HTMLUiToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiToggleElement: {
        prototype: HTMLUiToggleElement;
        new (): HTMLUiToggleElement;
    };
    interface HTMLElementTagNameMap {
        "ui-button": HTMLUiButtonElement;
        "ui-calendar": HTMLUiCalendarElement;
        "ui-checkbox": HTMLUiCheckboxElement;
        "ui-event": HTMLUiEventElement;
        "ui-notification": HTMLUiNotificationElement;
        "ui-number-picker": HTMLUiNumberPickerElement;
        "ui-slider": HTMLUiSliderElement;
        "ui-text": HTMLUiTextElement;
        "ui-toggle": HTMLUiToggleElement;
    }
}
declare namespace LocalJSX {
    /**
     * A simple button component designed for WoT device actions.
     * Features multiple visual styles, status indicators, and Web of Things integration.
     * Buttons trigger actions rather than managing state values.
     * @example Basic Usage
     * ```html
     * <ui-button label="Click Me"></ui-button>
     * <ui-button variant="filled" label="Submit" show-status="true"></ui-button>
     * ```
     * @example WoT Action Integration
     * ```javascript
     * const button = document.getElementById('device-button');
     * await button.setAction(async () => {
     * await thing.invokeAction('execute');
     * });
     * ```
     */
    interface UiButton {
        /**
          * Color theme for the button matching to thingsweb theme
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark"?: boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable keyboard navigation so user can click using 'Space' and 'Enter' keys when true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed on the button
          * @default 'Button'
         */
        "label"?: string;
        /**
          * Emitted when button is clicked through user interaction. Contains the button label, timestamp, and source information.
         */
        "onClickMsg"?: (event: UiButtonCustomEvent<UiMsg<string>>) => void;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus"?: boolean;
        /**
          * Visual style variant of the button. - minimal: Clean design with transparent background - outlined: Border-focused design with outline style - filled: Solid background design
          * @default 'outlined'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Advanced calendar component with comprehensive styling, variants, and features.
     * Matches the design family of ui-button, ui-slider, and other components.
     * @example Basic Usage
     * ```html
     * <ui-calendar variant="outlined" color="primary" label="Select Date"></ui-calendar>
     * ```
     * @example Different Variants & Colors
     * ```html
     * <ui-calendar variant="minimal" color="secondary" label="Minimal Calendar"></ui-calendar>
     * <ui-calendar variant="filled" color="primary" label="Filled Calendar"></ui-calendar>
     * <ui-calendar variant="outlined" color="neutral" label="Outlined Calendar"></ui-calendar>
     * ```
     * @example Sizes & Features
     * ```html
     * <ui-calendar size="large" include-time="true" label="Large with Time"></ui-calendar>
     * <ui-calendar size="small" inline="true" label="Small Inline"></ui-calendar>
     * ```
     * @example Dark Theme
     * ```html
     * <ui-calendar theme="dark" variant="filled" color="primary"></ui-calendar>
     * ```
     */
    interface UiCalendar {
        /**
          * Animation style for transitions. - none: No animations - slide: Slide transitions between months - fade: Fade transitions   - bounce: Playful bounce effects
          * @default 'slide'
         */
        "animation"?: 'none' | 'slide' | 'fade' | 'bounce';
        /**
          * Color scheme matching the component family palette. - primary: Main brand color (blue tones) - secondary: Accent color (green/teal tones)   - neutral: Grayscale for subtle integration - success: Green for positive actions - warning: Orange for caution - danger: Red for destructive actions
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral' | 'success' | 'warning' | 'danger';
        /**
          * Connection state for readonly mode
          * @default true
         */
        "connected"?: boolean;
        /**
          * Dark theme variant.
          * @example ```html <ui-calendar dark="true" variant="filled"></ui-calendar> ```
          * @default false
         */
        "dark"?: boolean;
        /**
          * Whether the component is disabled (cannot be interacted with).
          * @example ```html <ui-calendar disabled="true" label="Cannot select"></ui-calendar> ```
          * @default false
         */
        "disabled"?: boolean;
        /**
          * First day of week (0 = Sunday, 1 = Monday).
          * @default 0
         */
        "firstDayOfWeek"?: 0 | 1;
        /**
          * Include time picker alongside date picker. Supports hour:minute selection with AM/PM or 24-hour format.
          * @default false
         */
        "includeTime"?: boolean;
        /**
          * Display calendar inline instead of as dropdown popup. Perfect for always-visible date selection.
          * @default false
         */
        "inline"?: boolean;
        /**
          * Enable keyboard navigation and shortcuts.
          * @example ```html <ui-calendar keyboard="false"></ui-calendar> ```
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Optional text label for the calendar with enhanced styling.
          * @example ```html <ui-calendar label="Select Date"></ui-calendar> ```
         */
        "label"?: string;
        /**
          * Maximum selectable date (ISO string).
         */
        "maxDate"?: string;
        /**
          * Minimum selectable date (ISO string).
         */
        "minDate"?: string;
        /**
          * Event emitted when date changes
         */
        "onDateChange"?: (event: UiCalendarCustomEvent<UiCalendarDateChange>) => void;
        /**
          * Standardized valueChange event for calendar
         */
        "onValueChange"?: (event: UiCalendarCustomEvent<UiCalendarValueChange>) => void;
        /**
          * Standardized value event emitter - emits UiMsg<string> with enhanced metadata. Provides consistent value change notifications with unified messaging format.
          * @example ```typescript calendar.addEventListener('valueMsg', (e) => {   console.log('Date changed:', e.detail.value);   console.log('Metadata:', e.detail.metadata); }); ```
         */
        "onValueMsg"?: (event: UiCalendarCustomEvent<UiMsg<string>>) => void;
        /**
          * Whether the component is read-only (displays value but cannot be changed).
          * @example ```html <ui-calendar readonly="true" value="2023-12-25"></ui-calendar> ```
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Show clear button to reset selection.
          * @default true
         */
        "showClearButton"?: boolean;
        /**
          * Show last updated timestamp below the component.
          * @example ```html <ui-calendar showLastUpdated="true"></ui-calendar> ```
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show status badge when true
          * @default true
         */
        "showStatus"?: boolean;
        /**
          * Show today button for quick navigation.
          * @default true
         */
        "showTodayButton"?: boolean;
        /**
          * Show week numbers in calendar grid.
          * @default false
         */
        "showWeekNumbers"?: boolean;
        /**
          * Component size for different use cases. - small: Compact calendar for tight spaces - medium: Standard size (default) - large: Prominent calendar with larger touch targets
          * @default 'medium'
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Time format when includeTime is enabled. - 12: 12-hour format with AM/PM - 24: 24-hour format
          * @default '12'
         */
        "timeFormat"?: '12' | '24';
        /**
          * Current selected date-time value (ISO string).
         */
        "value"?: string;
        /**
          * Visual style variant matching component family design. - minimal: Clean, borderless design with subtle hover effects - outlined: Border with transparent background, colored accents - filled: Solid background with contrasting text - elevated: Shadow and depth for prominent display
          * @default 'minimal'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled' | 'elevated';
    }
    /**
     * A versatile checkbox component designed for WoT device control.
     * It has various features, multiple visual styles, status and last updated timestamps.
     * @example Basic Usage
     * ```html
     * <ui-checkbox variant="outlined" value="true" label="Accept Terms"></ui-checkbox>
     * <ui-checkbox variant="minimal" value="false" label="Enable Notifications"></ui-checkbox>
     * <ui-checkbox variant="filled" label="Device Status" show-last-updated="true"></ui-checkbox>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const checkbox = document.getElementById('device-checkbox');
     * const initialValue = Boolean(await (await thing.readProperty('enabled')).value());
     * await checkbox.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('enabled', value);
     * }
     * });
     * ```
     */
    interface UiCheckbox {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark"?: boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable keyboard navigation so user can toggle using 'Space' and 'Enter' keys) when true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed right to the checkbox (optional)
         */
        "label"?: string;
        /**
          * Emitted when checkbox value changes through user interaction or setValue calls. Contains the new value, previous value, timestamp, and source information.
         */
        "onValueMsg"?: (event: UiCheckboxCustomEvent<UiMsg<boolean>>) => void;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus"?: boolean;
        /**
          * Current boolean value of the checkbox
          * @default false
         */
        "value"?: boolean;
        /**
          * Visual style variant of the checkbox. - minimal: Clean design with transparent background - outlined: Border-focused design with outline style - filled: Solid background when checked
          * @default 'outlined'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Event listener component for subscribing to and publishing WoT events.
     * Provides real-time event handling with filtering, buffering, and visual feedback.
     * @example Basic Event Subscription
     * ```html
     * <ui-event
     * label="Temperature Events"
     * event-name="temperatureChanged"
     * max-events="10"
     * show-timestamp="true">
     * </ui-event>
     * ```
     * @example Event Publishing
     * ```html
     * <ui-event
     * label="Alert Publisher"
     * mode="publisher"
     * event-name="alertTriggered"
     * auto-publish="true">
     * </ui-event>
     * ```
     * @example Advanced Filtering
     * ```javascript
     * const listener = document.getElementById('event-listener');
     * // Set custom filter
     * await listener.setEventFilter((event) => {
     * return event.payload.temperature > 25;
     * });
     * // Subscribe to events
     * listener.addEventListener('eventReceived', (e) => {
     * console.log('Filtered event:', e.detail);
     * });
     * ```
     */
    interface UiEvent {
        /**
          * Auto-publish mode for publishers
          * @default false
         */
        "autoPublish"?: boolean;
        /**
          * Color theme
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Connection status indicator
          * @default false
         */
        "connected"?: boolean;
        /**
          * Dark mode support
          * @default false
         */
        "dark"?: boolean;
        /**
          * Whether the component is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable event filtering
          * @default false
         */
        "enableFiltering"?: boolean;
        /**
          * Event name to subscribe to or publish
         */
        "eventName"?: string;
        /**
          * Filter expression (JSONPath or simple property)
         */
        "filterExpression"?: string;
        /**
          * Enable keyboard interactions
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Display label for the component
         */
        "label"?: string;
        /**
          * Maximum number of events to keep in history
          * @default 15
         */
        "maxEvents"?: number;
        /**
          * Component mode: listener or publisher
          * @default 'listener'
         */
        "mode"?: 'listener' | 'publisher' | 'bidirectional';
        /**
          * Emitted when an event is published (publisher mode)
         */
        "onEventPublished"?: (event: UiEventCustomEvent<UiMsg<any>>) => void;
        /**
          * Emitted when an event is received (listener mode)
         */
        "onEventReceived"?: (event: UiEventCustomEvent<UiMsg<any>>) => void;
        /**
          * Standard value message event
         */
        "onValueMsg"?: (event: UiEventCustomEvent<UiMsg<any>>) => void;
        /**
          * Event payload template for publishing
         */
        "payloadTemplate"?: string;
        /**
          * Whether component is in readonly mode
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Show last updated timestamp
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show status badge when true
          * @default true
         */
        "showStatus"?: boolean;
        /**
          * Show event timestamps
          * @default true
         */
        "showTimestamp"?: boolean;
        /**
          * Visual style variant
          * @default 'outlined'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Notification component for displaying temporary event data with auto-dismiss functionality.
     * Supports multiple notification types with smooth animations and customizable duration.
     * @example Basic Notification
     * ```html
     * <ui-notification message="Operation completed successfully" type="success"></ui-notification>
     * ```
     * @example Custom Duration
     * ```html
     * <ui-notification 
     * message="This will auto-dismiss in 5 seconds" 
     * type="info" 
     * duration="5000">
     * </ui-notification>
     * ```
     * @example Manual Dismiss
     * ```html
     * <ui-notification 
     * message="Click to dismiss" 
     * type="warning" 
     * duration="0"
     * id="manual-notification">
     * </ui-notification>
     * ```
     * @example JavaScript Integration
     * ```javascript
     * const notification = document.querySelector('#manual-notification');
     * // Listen for close events
     * notification.addEventListener('notificationClose', (e) => {
     * console.log('Notification closed:', e.detail);
     * });
     * // Dismiss programmatically
     * await notification.dismiss();
     * // Show notification programmatically
     * await notification.show();
     * ```
     */
    interface UiNotification {
        /**
          * Enable dark theme for the component.
          * @default false
         */
        "dark"?: boolean;
        /**
          * Duration in milliseconds before auto-dismiss. Set to 0 to disable auto-dismiss. Default: 3000 (3 seconds)
          * @default 3000
         */
        "duration"?: number;
        /**
          * The message text to display in the notification.
          * @default ''
         */
        "message"?: string;
        /**
          * Emitted when the notification is closed/dismissed. Contains information about how it was closed (auto, manual, programmatic).
         */
        "onNotificationClose"?: (event: UiNotificationCustomEvent<{
    message: string;
    type: string;
    dismissMethod: 'auto' | 'manual' | 'programmatic';
    timestamp: number;
  }>) => void;
        /**
          * Emitted when notification value/state changes. Compatible with other UI components for unified event handling.
         */
        "onValueMsg"?: (event: UiNotificationCustomEvent<UiMsg>) => void;
        /**
          * Whether to show a close button. Default: true
          * @default true
         */
        "showCloseButton"?: boolean;
        /**
          * Whether to show an icon based on the notification type. Default: true
          * @default true
         */
        "showIcon"?: boolean;
        /**
          * Type of notification affecting styling and icons. - info: General information (blue) - success: Success messages (green)  - warning: Warning messages (orange) - error: Error messages (red)
          * @default 'info'
         */
        "type"?: 'info' | 'success' | 'warning' | 'error';
    }
    /**
     * A versatile number picker component designed for WoT device control and monitoring.
     * It has increment/decrement buttons, multiple visual styles, status and last updated timestamps.
     * Supports both interactive control and read-only monitoring modes with customizable ranges.
     * @example Basic Usage
     * ```html
     * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
     * <ui-number-picker variant="filled" value="50" min="0" max="100"></ui-number-picker>
     * <ui-number-picker readonly="true" label="Sensor" show-last-updated="true"></ui-number-picker>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const numberPicker = document.getElementById('device-volume');
     * const initialValue = Number(await (await thing.readProperty('volume')).value());
     * await numberPicker.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('volume', value);
     * }
     * });
     * ```
     */
    interface UiNumberPicker {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for read-only monitoring
          * @default true
         */
        "connected"?: boolean;
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark"?: boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable keyboard navigation so user can change value using 'Arrow Up' and 'Arrow Down' keys) when true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed above the number picker (optional)
         */
        "label"?: string;
        /**
          * Maximum allowed value (optional)
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum allowed value (optional)
          * @default 0
         */
        "min"?: number;
        /**
          * Emitted when number picker value changes through user interaction or setValue calls. Contains the new value, previous value, timestamp, and source information.
         */
        "onValueMsg"?: (event: UiNumberPickerCustomEvent<UiMsg<number>>) => void;
        /**
          * Read only mode, display value but prevent changes when true. Just to monitor changes
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus"?: boolean;
        /**
          * Step increment/decrement amount (optional)
          * @default 1
         */
        "step"?: number;
        /**
          * Current numeric value of the number picker
          * @default 0
         */
        "value"?: number;
        /**
          * Visual style variant of the number picker. - minimal: Clean buttons with subtle background (default) - outlined: Buttons with border outline - filled: Solid filled buttons
          * @default 'minimal'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Advanced slider component with reactive state management and multiple visual styles.
     * @example Basic Usage
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="50" label="Brightness"></ui-slider>
     * ```
     * @example Different Variants
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="30" label="Narrow Style"></ui-slider>
     * <ui-slider variant="wide" min="0" max="100" value="60" label="Wide Style"></ui-slider>
     * <ui-slider variant="rainbow" min="0" max="360" value="180" label="Rainbow Hue"></ui-slider>
     * <ui-slider variant="neon" min="0" max="100" value="80" label="Neon Glow"></ui-slider>
     * <ui-slider variant="stepped" step="10" min="0" max="100" value="50" label="Stepped Control"></ui-slider>
     * ```
     * @example Read-Only Mode
     * ```html
     * <ui-slider readonly="true" value="75" min="0" max="100" label="Sensor Reading"></ui-slider>
     * ```
     * @example JavaScript Integration with Multiple Sliders
     * ```javascript
     * // For single slider
     * const slider = document.querySelector('#my-slider');
     * // For multiple sliders
     * const sliders = document.querySelectorAll('ui-slider');
     * sliders.forEach(slider => {
     * slider.addEventListener('valueMsg', (e) => {
     * console.log('Slider ID:', e.detail.source);
     * console.log('New value:', e.detail.payload);
     * });
     * });
     * // Set value by ID
     * const brightnessSlider = document.getElementById('brightness-slider');
     * await brightnessSlider.setValue(75);
     * ```
     * @example HTML with IDs
     * ```html
     * <ui-slider id="brightness-slider" label="Brightness" variant="narrow" min="0" max="100"></ui-slider>
     * <ui-slider id="volume-slider" label="Volume" variant="wide" min="0" max="100"></ui-slider>
     * ```
     */
    interface UiSlider {
        /**
          * Color theme variant.
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for readonly mode
          * @default true
         */
        "connected"?: boolean;
        /**
          * Enable dark theme for the component. When true, uses light text on dark backgrounds.
          * @default false
         */
        "dark"?: boolean;
        /**
          * Whether the slider is disabled (cannot be interacted with).
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable keyboard navigation (Arrow keys, Home, End, PageUp, PageDown). Default: true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed above the slider.
         */
        "label"?: string;
        /**
          * Maximum value of the slider.
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum value of the slider.
          * @default 0
         */
        "min"?: number;
        /**
          * Primary event emitted when the slider value changes.
         */
        "onValueMsg"?: (event: UiSliderCustomEvent<UiMsg<number>>) => void;
        /**
          * Orientation of the slider.
          * @default 'horizontal'
         */
        "orientation"?: 'horizontal' | 'vertical';
        /**
          * Whether the slider is read-only (displays value but cannot be changed).
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Show last updated timestamp when true
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show status badge when true
          * @default true
         */
        "showStatus"?: boolean;
        /**
          * Step increment for the slider.
          * @default 1
         */
        "step"?: number;
        /**
          * Shape of the slider thumb.
          * @default 'circle'
         */
        "thumbShape"?: 'circle' | 'square' | 'arrow' | 'triangle' | 'diamond';
        /**
          * Current numeric value of the slider.
          * @default 0
         */
        "value"?: number;
        /**
          * Visual style variant of the slider.
          * @default 'narrow'
         */
        "variant"?: 'narrow' | 'wide' | 'rainbow' | 'neon' | 'stepped';
    }
    /**
     * TextDisplay component supports multiple variants for text-heavy data display and editing.
     * Provides field, area, structured, unstructured, and editable modes with consistent styling.
     * @example Basic Field Display
     * ```html
     * <ui-text mode="field" variant="outlined" value="Sample text" label="Name"></ui-text>
     * ```
     * @example Multi-line Area
     * ```html
     * <ui-text mode="area" variant="filled" value="Long text content..." label="Description"></ui-text>
     * ```
     * @example Structured Data Display
     * ```html
     * <ui-text mode="structured" variant="minimal" value='{"key": "value"}' label="JSON Data"></ui-text>
     * ```
     * @example Editable Mode
     * ```html
     * <ui-text mode="editable" variant="outlined" value="Edit me" label="Notes" id="notes-field"></ui-text>
     * ```
     * @example JavaScript Integration
     * ```javascript
     * const textDisplay = document.querySelector('#notes-field');
     * // Listen for value changes in editable mode
     * textDisplay.addEventListener('valueMsg', (e) => {
     * console.log('Text changed to:', e.detail.payload);
     * });
     * // Set value programmatically
     * await textDisplay.setValue('New content');
     * ```
     */
    interface UiText {
        /**
          * Color theme variant.
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for readonly mode
          * @default true
         */
        "connected"?: boolean;
        /**
          * Enable dark theme for the component. When true, uses light text on dark backgrounds.
          * @default false
         */
        "dark"?: boolean;
        /**
          * Whether the component is disabled (editable mode only).
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable keyboard navigation for editable mode. Default: true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed above the text display.
         */
        "label"?: string;
        /**
          * Maximum character limit (editable mode only).
         */
        "maxLength"?: number;
        /**
          * Maximum number of rows for area mode.
          * @default 10
         */
        "maxRows"?: number;
        /**
          * Minimum number of rows for area mode.
          * @default 3
         */
        "minRows"?: number;
        /**
          * Display mode for the text component. - field: One-line text display - area: Expandable text box (multi-line) - unstructured: Plain style, no highlighting - structured: Highlighted block (for JSON-like or formatted text) - editable: User can edit/write directly
          * @default 'field'
         */
        "mode"?: 'field' | 'area' | 'unstructured' | 'structured' | 'editable';
        /**
          * Event emitted when the text value changes (editable mode only).
          * @example ```javascript textDisplay.addEventListener('valueMsg', (event) => {   // event.detail contains:   // - newVal: new value (string)   // - prevVal: previous value   // - source: component id   // - ts: timestamp    console.log('New value:', event.detail.newVal);    // Example: Send to server   fetch('/api/text', {     method: 'POST',     body: JSON.stringify({ text: event.detail.payload })   }); }); ```
         */
        "onValueMsg"?: (event: UiTextCustomEvent<UiMsg<string>>) => void;
        /**
          * Placeholder text shown when value is empty (editable mode only).
         */
        "placeholder"?: string;
        /**
          * Whether the component is read-only.
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Show character count (editable mode only).
          * @default false
         */
        "showCharCount"?: boolean;
        /**
          * Show last updated timestamp.
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show line numbers (area and structured modes).
          * @default false
         */
        "showLineNumbers"?: boolean;
        /**
          * Show status badge when true
          * @default true
         */
        "showStatus"?: boolean;
        /**
          * Current text value of the component.
          * @default ''
         */
        "value"?: string;
        /**
          * Visual style variant of the text display. - minimal: Text-only with subtle underline or accent - outlined: Border style applied (default) - filled: Background color applied
          * @default 'outlined'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * A versatile toggle switch component designed for WoT device control and monitoring.
     * It has various features, multiple visual styles, status and last updated timestamps.
     * Supports both interactive control and read-only monitoring modes.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" value="true" label="Light"></ui-toggle>
     * <ui-toggle variant="neon" value="false" label="Fan"></ui-toggle>
     * <ui-toggle readonly="true" label="Sensor" show-last-updated="true"></ui-toggle>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const toggle = document.getElementById('device-toggle');
     * const initialValue = Boolean(await (await thing.readProperty('power')).value());
     * await toggle.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('power', value);
     * }
     * });
     * ```
     */
    interface UiToggle {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for read-only monitoring
          * @default true
         */
        "connected"?: boolean;
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark"?: boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable keyboard navigation so user can toggle using 'Space' and 'Enter' keys) when true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed left to the toggle (optional)
         */
        "label"?: string;
        /**
          * Emitted when toggle value changes through user interaction or setValue calls. Contains the new value, previous value, timestamp, and source information.
         */
        "onValueMsg"?: (event: UiToggleCustomEvent<UiMsg<boolean>>) => void;
        /**
          * Read only mode, display value but prevent changes when true. Just to monitor changes
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus"?: boolean;
        /**
          * Current boolean value of the toggle
          * @default false
         */
        "value"?: boolean;
        /**
          * Visual style variant of the toggle. - circle: Common pill-shaped toggle (default) - square: Rectangular toggle with square thumb - apple: iOS-style switch (bigger size, rounded edges) - cross: Shows × when off, ✓ when on with red background when off and green when on - neon: Glowing effect when active
          * @default 'circle'
         */
        "variant"?: 'circle' | 'square' | 'apple' | 'cross' | 'neon';
    }
    interface IntrinsicElements {
        "ui-button": UiButton;
        "ui-calendar": UiCalendar;
        "ui-checkbox": UiCheckbox;
        "ui-event": UiEvent;
        "ui-notification": UiNotification;
        "ui-number-picker": UiNumberPicker;
        "ui-slider": UiSlider;
        "ui-text": UiText;
        "ui-toggle": UiToggle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * A simple button component designed for WoT device actions.
             * Features multiple visual styles, status indicators, and Web of Things integration.
             * Buttons trigger actions rather than managing state values.
             * @example Basic Usage
             * ```html
             * <ui-button label="Click Me"></ui-button>
             * <ui-button variant="filled" label="Submit" show-status="true"></ui-button>
             * ```
             * @example WoT Action Integration
             * ```javascript
             * const button = document.getElementById('device-button');
             * await button.setAction(async () => {
             * await thing.invokeAction('execute');
             * });
             * ```
             */
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            /**
             * Advanced calendar component with comprehensive styling, variants, and features.
             * Matches the design family of ui-button, ui-slider, and other components.
             * @example Basic Usage
             * ```html
             * <ui-calendar variant="outlined" color="primary" label="Select Date"></ui-calendar>
             * ```
             * @example Different Variants & Colors
             * ```html
             * <ui-calendar variant="minimal" color="secondary" label="Minimal Calendar"></ui-calendar>
             * <ui-calendar variant="filled" color="primary" label="Filled Calendar"></ui-calendar>
             * <ui-calendar variant="outlined" color="neutral" label="Outlined Calendar"></ui-calendar>
             * ```
             * @example Sizes & Features
             * ```html
             * <ui-calendar size="large" include-time="true" label="Large with Time"></ui-calendar>
             * <ui-calendar size="small" inline="true" label="Small Inline"></ui-calendar>
             * ```
             * @example Dark Theme
             * ```html
             * <ui-calendar theme="dark" variant="filled" color="primary"></ui-calendar>
             * ```
             */
            "ui-calendar": LocalJSX.UiCalendar & JSXBase.HTMLAttributes<HTMLUiCalendarElement>;
            /**
             * A versatile checkbox component designed for WoT device control.
             * It has various features, multiple visual styles, status and last updated timestamps.
             * @example Basic Usage
             * ```html
             * <ui-checkbox variant="outlined" value="true" label="Accept Terms"></ui-checkbox>
             * <ui-checkbox variant="minimal" value="false" label="Enable Notifications"></ui-checkbox>
             * <ui-checkbox variant="filled" label="Device Status" show-last-updated="true"></ui-checkbox>
             * ```
             * @example JS integaration with node-wot browser bundle
             * ```javascript
             * const checkbox = document.getElementById('device-checkbox');
             * const initialValue = Boolean(await (await thing.readProperty('enabled')).value());
             * await checkbox.setValue(initialValue, {
             * writeOperation: async value => {
             * await thing.writeProperty('enabled', value);
             * }
             * });
             * ```
             */
            "ui-checkbox": LocalJSX.UiCheckbox & JSXBase.HTMLAttributes<HTMLUiCheckboxElement>;
            /**
             * Event listener component for subscribing to and publishing WoT events.
             * Provides real-time event handling with filtering, buffering, and visual feedback.
             * @example Basic Event Subscription
             * ```html
             * <ui-event
             * label="Temperature Events"
             * event-name="temperatureChanged"
             * max-events="10"
             * show-timestamp="true">
             * </ui-event>
             * ```
             * @example Event Publishing
             * ```html
             * <ui-event
             * label="Alert Publisher"
             * mode="publisher"
             * event-name="alertTriggered"
             * auto-publish="true">
             * </ui-event>
             * ```
             * @example Advanced Filtering
             * ```javascript
             * const listener = document.getElementById('event-listener');
             * // Set custom filter
             * await listener.setEventFilter((event) => {
             * return event.payload.temperature > 25;
             * });
             * // Subscribe to events
             * listener.addEventListener('eventReceived', (e) => {
             * console.log('Filtered event:', e.detail);
             * });
             * ```
             */
            "ui-event": LocalJSX.UiEvent & JSXBase.HTMLAttributes<HTMLUiEventElement>;
            /**
             * Notification component for displaying temporary event data with auto-dismiss functionality.
             * Supports multiple notification types with smooth animations and customizable duration.
             * @example Basic Notification
             * ```html
             * <ui-notification message="Operation completed successfully" type="success"></ui-notification>
             * ```
             * @example Custom Duration
             * ```html
             * <ui-notification 
             * message="This will auto-dismiss in 5 seconds" 
             * type="info" 
             * duration="5000">
             * </ui-notification>
             * ```
             * @example Manual Dismiss
             * ```html
             * <ui-notification 
             * message="Click to dismiss" 
             * type="warning" 
             * duration="0"
             * id="manual-notification">
             * </ui-notification>
             * ```
             * @example JavaScript Integration
             * ```javascript
             * const notification = document.querySelector('#manual-notification');
             * // Listen for close events
             * notification.addEventListener('notificationClose', (e) => {
             * console.log('Notification closed:', e.detail);
             * });
             * // Dismiss programmatically
             * await notification.dismiss();
             * // Show notification programmatically
             * await notification.show();
             * ```
             */
            "ui-notification": LocalJSX.UiNotification & JSXBase.HTMLAttributes<HTMLUiNotificationElement>;
            /**
             * A versatile number picker component designed for WoT device control and monitoring.
             * It has increment/decrement buttons, multiple visual styles, status and last updated timestamps.
             * Supports both interactive control and read-only monitoring modes with customizable ranges.
             * @example Basic Usage
             * ```html
             * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
             * <ui-number-picker variant="filled" value="50" min="0" max="100"></ui-number-picker>
             * <ui-number-picker readonly="true" label="Sensor" show-last-updated="true"></ui-number-picker>
             * ```
             * @example JS integaration with node-wot browser bundle
             * ```javascript
             * const numberPicker = document.getElementById('device-volume');
             * const initialValue = Number(await (await thing.readProperty('volume')).value());
             * await numberPicker.setValue(initialValue, {
             * writeOperation: async value => {
             * await thing.writeProperty('volume', value);
             * }
             * });
             * ```
             */
            "ui-number-picker": LocalJSX.UiNumberPicker & JSXBase.HTMLAttributes<HTMLUiNumberPickerElement>;
            /**
             * Advanced slider component with reactive state management and multiple visual styles.
             * @example Basic Usage
             * ```html
             * <ui-slider variant="narrow" min="0" max="100" value="50" label="Brightness"></ui-slider>
             * ```
             * @example Different Variants
             * ```html
             * <ui-slider variant="narrow" min="0" max="100" value="30" label="Narrow Style"></ui-slider>
             * <ui-slider variant="wide" min="0" max="100" value="60" label="Wide Style"></ui-slider>
             * <ui-slider variant="rainbow" min="0" max="360" value="180" label="Rainbow Hue"></ui-slider>
             * <ui-slider variant="neon" min="0" max="100" value="80" label="Neon Glow"></ui-slider>
             * <ui-slider variant="stepped" step="10" min="0" max="100" value="50" label="Stepped Control"></ui-slider>
             * ```
             * @example Read-Only Mode
             * ```html
             * <ui-slider readonly="true" value="75" min="0" max="100" label="Sensor Reading"></ui-slider>
             * ```
             * @example JavaScript Integration with Multiple Sliders
             * ```javascript
             * // For single slider
             * const slider = document.querySelector('#my-slider');
             * // For multiple sliders
             * const sliders = document.querySelectorAll('ui-slider');
             * sliders.forEach(slider => {
             * slider.addEventListener('valueMsg', (e) => {
             * console.log('Slider ID:', e.detail.source);
             * console.log('New value:', e.detail.payload);
             * });
             * });
             * // Set value by ID
             * const brightnessSlider = document.getElementById('brightness-slider');
             * await brightnessSlider.setValue(75);
             * ```
             * @example HTML with IDs
             * ```html
             * <ui-slider id="brightness-slider" label="Brightness" variant="narrow" min="0" max="100"></ui-slider>
             * <ui-slider id="volume-slider" label="Volume" variant="wide" min="0" max="100"></ui-slider>
             * ```
             */
            "ui-slider": LocalJSX.UiSlider & JSXBase.HTMLAttributes<HTMLUiSliderElement>;
            /**
             * TextDisplay component supports multiple variants for text-heavy data display and editing.
             * Provides field, area, structured, unstructured, and editable modes with consistent styling.
             * @example Basic Field Display
             * ```html
             * <ui-text mode="field" variant="outlined" value="Sample text" label="Name"></ui-text>
             * ```
             * @example Multi-line Area
             * ```html
             * <ui-text mode="area" variant="filled" value="Long text content..." label="Description"></ui-text>
             * ```
             * @example Structured Data Display
             * ```html
             * <ui-text mode="structured" variant="minimal" value='{"key": "value"}' label="JSON Data"></ui-text>
             * ```
             * @example Editable Mode
             * ```html
             * <ui-text mode="editable" variant="outlined" value="Edit me" label="Notes" id="notes-field"></ui-text>
             * ```
             * @example JavaScript Integration
             * ```javascript
             * const textDisplay = document.querySelector('#notes-field');
             * // Listen for value changes in editable mode
             * textDisplay.addEventListener('valueMsg', (e) => {
             * console.log('Text changed to:', e.detail.payload);
             * });
             * // Set value programmatically
             * await textDisplay.setValue('New content');
             * ```
             */
            "ui-text": LocalJSX.UiText & JSXBase.HTMLAttributes<HTMLUiTextElement>;
            /**
             * A versatile toggle switch component designed for WoT device control and monitoring.
             * It has various features, multiple visual styles, status and last updated timestamps.
             * Supports both interactive control and read-only monitoring modes.
             * @example Basic Usage
             * ```html
             * <ui-toggle variant="circle" value="true" label="Light"></ui-toggle>
             * <ui-toggle variant="neon" value="false" label="Fan"></ui-toggle>
             * <ui-toggle readonly="true" label="Sensor" show-last-updated="true"></ui-toggle>
             * ```
             * @example JS integaration with node-wot browser bundle
             * ```javascript
             * const toggle = document.getElementById('device-toggle');
             * const initialValue = Boolean(await (await thing.readProperty('power')).value());
             * await toggle.setValue(initialValue, {
             * writeOperation: async value => {
             * await thing.writeProperty('power', value);
             * }
             * });
             * ```
             */
            "ui-toggle": LocalJSX.UiToggle & JSXBase.HTMLAttributes<HTMLUiToggleElement>;
        }
    }
}
