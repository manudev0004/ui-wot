/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    /**
     * Button component with various visual styles for user interactions.
     * Pure UI component focused on click events and visual feedback.
     * @example Basic Usage
     * ```html
     * <ui-button variant="minimal" label="Click Me"></ui-button>
     * ```
     * @example Different Variants
     * ```html
     * <ui-button variant="outlined" color="primary" label="Outlined Button"></ui-button>
     * <ui-button variant="filled" color="secondary" label="Filled Button"></ui-button>
     * ```
     * @example Event Handling
     * ```javascript
     * const button = document.querySelector('ui-button');
     * button.addEventListener('buttonClick', (e) => {
     * console.log('Button clicked:', e.detail.label);
     * });
     * ```
     * @example Framework Integration
     * ```javascript
     * // React
     * <ui-button label="Save" onButtonClick={(e) => handleSave(e.detail)} />
     * // Vue
     * <ui-button label="Save"
     * @buttonClick ="handleSave($event.detail)" />
     * ```
     */
    interface UiButton {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Whether the button is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * Button text label.
          * @default 'Button'
         */
        "label": string;
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * Visual style variant of the button. - minimal: Clean button with subtle background (default) - outlined: Button with border outline - filled: Solid filled button
          * @default 'minimal'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Calendar component for date-time selection with various visual styles and TD integration.
     * Link a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-calendar variant="outlined" color="primary" label="Select Date"></ui-calendar>
     * ```
     * @example TD Integration
     * ```html
     * <ui-calendar 
     * td-url="http://device.local/properties/schedule"
     * variant="filled"
     * label="Device Schedule"
     * include-time="true">
     * </ui-calendar>
     * ```
     */
    interface UiCalendar {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Include time picker alongside date picker.
          * @default false
         */
        "includeTime": boolean;
        /**
          * Optional text label for the calendar.
         */
        "label"?: string;
        /**
          * Maximum selectable date (ISO string).
         */
        "maxDate"?: string;
        /**
          * Minimum selectable date (ISO string).
         */
        "minDate"?: string;
        /**
          * Current state of the calendar. - disabled: Calendar cannot be interacted with - default: Calendar is interactive (default)
          * @default 'default'
         */
        "state": 'disabled' | 'default';
        /**
          * Thing Description URL for device control.
         */
        "tdUrl"?: string;
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * Current selected date-time value (ISO string).
         */
        "value"?: string;
        /**
          * Visual style variant of the calendar. - minimal: Clean minimal design (default) - outlined: Border with background - filled: Solid background
          * @default 'minimal'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Checkbox component with consistent styling to match the design system.
     */
    interface UiCheckbox {
        /**
          * Custom callback function name.
         */
        "changeHandler"?: string;
        /**
          * Whether the checkbox is checked.
          * @default false
         */
        "checked": boolean;
        /**
          * Color scheme to match design system.
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Optional text label for the checkbox.
         */
        "label"?: string;
        /**
          * Current state of the checkbox.
          * @default 'default'
         */
        "state": 'disabled' | 'active' | 'default';
        /**
          * Thing Description URL for property control. When provided, checkbox will read/write boolean values to the device.
          * @example "http://device.local/properties/enabled"
         */
        "tdUrl"?: string;
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * Visual style variant of the checkbox.
          * @default 'outlined'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    interface UiHeading {
        "text": string;
    }
    /**
     * Number picker component with increment/decrement buttons for numeric input.
     * Pure UI component focused on user interaction and value management.
     * @example Basic Usage
     * ```html
     * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
     * ```
     * @example Event Handling
     * ```javascript
     * const picker = document.querySelector('ui-number-picker');
     * picker.addEventListener('valueChange', (e) => {
     * console.log('Number changed:', e.detail.value);
     * console.log('Label:', e.detail.label);
     * });
     * ```
     * @example Framework Integration
     * ```javascript
     * // React
     * <ui-number-picker value={count} onValueChange={(e) => setCount(e.detail.value)} />
     * // Vue
     * <ui-number-picker :value="count"
     * @valueChange ="count = $event.detail.value" />
     * ```
     */
    interface UiNumberPicker {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Whether the number picker is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * Optional text label, to display above the number picker.
         */
        "label"?: string;
        /**
          * Maximum allowed value.
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum allowed value.
          * @default 0
         */
        "min"?: number;
        /**
          * Step increment/decrement amount.
          * @default 1
         */
        "step": number;
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * Current value of the number picker.
          * @default 0
         */
        "value": number;
        /**
          * Visual style variant of the number picker. - minimal: Clean buttons with subtle background (default) - outlined: Buttons with border outline - filled: Solid filled buttons
          * @default 'minimal'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Slider component with various visual styles for numeric input.
     * Pure UI component focused on user interaction and visual feedback.
     * @example Basic Usage
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="50" label="Brightness"></ui-slider>
     * ```
     * @example Event Handling
     * ```javascript
     * const slider = document.querySelector('ui-slider');
     * slider.addEventListener('valueChange', (e) => {
     * console.log('New value:', e.detail.value);
     * console.log('Label:', e.detail.label);
     * });
     * ```
     * @example Framework Integration
     * ```javascript
     * // React
     * <ui-slider value={brightness} onValueChange={(e) => setBrightness(e.detail.value)} />
     * // Vue
     * <ui-slider :value="brightness"
     * @valueChange ="brightness = $event.detail.value" />
     * ```
     */
    interface UiSlider {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Whether the slider is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * Enable manual control interface.
          * @default false
         */
        "enableManualControl": boolean;
        /**
          * Optional text label, to display text above the slider.
         */
        "label"?: string;
        /**
          * Maximum value of the slider.
          * @default 100
         */
        "max": number;
        /**
          * Minimum value of the slider.
          * @default 0
         */
        "min": number;
        /**
          * Orientation of the slider. - horizontal: Left to right slider (default) - vertical: Bottom to top slider
          * @default 'horizontal'
         */
        "orientation": 'horizontal' | 'vertical';
        /**
          * Step increment for the slider.
          * @default 1
         */
        "step": number;
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * Shape of the slider thumb. - circle: Round thumb (default) - square: Square thumb - arrow: Arrow-shaped thumb pointing right - triangle: Triangle-shaped thumb - diamond: Diamond-shaped thumb (<> style)
          * @default 'circle'
         */
        "thumbShape": 'circle' | 'square' | 'arrow' | 'triangle' | 'diamond';
        /**
          * Current value of the slider.
          * @default 0
         */
        "value": number;
        /**
          * Visual style variant of the slider. - narrow: Thin slider track (default) - wide: Thick slider track - rainbow: Gradient color track - neon: Glowing effect - stepped: Shows step marks
          * @default 'narrow'
         */
        "variant": 'narrow' | 'wide' | 'rainbow' | 'neon' | 'stepped';
    }
    /**
     * Comprehensive text component for displaying and editing text data.
     * Supports single-line input, multi-line textarea, structured text with syntax highlighting,
     * expandable content, and Thing Description integration.
     * @example Basic Text Display
     * ```html
     * <ui-text variant="display" value="Hello World"></ui-text>
     * ```
     * @example Single-line Text Input
     * ```html
     * <ui-text variant="edit" value="Enter text" label="Name"></ui-text>
     * ```
     * @example Multi-line Text Area
     * ```html
     * <ui-text 
     * variant="edit" 
     * text-type="multi" 
     * value="Line 1\nLine 2" 
     * label="Description">
     * </ui-text>
     * ```
     * @example Structured Text with Highlighting
     * ```html
     * <ui-text 
     * variant="display" 
     * text-type="multi" 
     * structure="json" 
     * value='{"key": "value"}'>
     * </ui-text>
     * ```
     * @example TD Integration
     * ```html
     * <ui-text 
     * td-url="http://device.local/properties/name"
     * variant="edit"
     * label="Device Name">
     * </ui-text>
     * ```
     */
    interface UiText {
        /**
          * Custom callback function name for value changes.
         */
        "changeHandler"?: string;
        /**
          * Color scheme to match design system.
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Enable expandable/collapsible display for long text.
          * @default false
         */
        "expandable": boolean;
        /**
          * Optional text label for the component.
         */
        "label"?: string;
        /**
          * Maximum height before showing expand/collapse controls (in pixels).
          * @default 200
         */
        "maxHeight": number;
        /**
          * Maximum length for text input (edit mode only).
         */
        "maxLength"?: number;
        /**
          * Placeholder text for edit mode.
         */
        "placeholder"?: string;
        /**
          * Whether the text area should be resizable (edit mode only).
          * @default false
         */
        "resizable": boolean;
        /**
          * Number of rows for multi-line text area.
          * @default 4
         */
        "rows": number;
        /**
          * Current state of the text component.
          * @default 'default'
         */
        "state": 'disabled' | 'active' | 'default';
        /**
          * Structure type for syntax highlighting in display mode. - unstructured: Plain text (default) - json: JSON syntax highlighting - yaml: YAML syntax highlighting - xml: XML syntax highlighting - markdown: Markdown syntax highlighting
          * @default 'unstructured'
         */
        "structure": 'unstructured' | 'json' | 'yaml' | 'xml' | 'markdown';
        /**
          * Thing Description URL for property control.
         */
        "tdUrl"?: string;
        /**
          * Type of text field. - single: Single-line text field - multi: Multi-line text area
          * @default 'single'
         */
        "textType": 'single' | 'multi';
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * Text value content.
          * @default ''
         */
        "value": string;
        /**
          * Visual style variant of the text component. - display: Read-only text display - edit: Editable text input/textarea
          * @default 'display'
         */
        "variant": 'display' | 'edit';
    }
    /**
     * Toogle switch component with various fetueres, multiple visual styles and TD integration.
     * Link a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" state="active" label="Light"></ui-toggle>
     * ```
     * @example TD Integration (Auto-detects protocol)
     * ```html
     * <ui-toggle 
     * td-url="http://device.local/properties/power"
     * label="Smart Light"
     * mode="readwrite">
     * </ui-toggle>
     * ```
     * @example Multi-protocol Support
     * ```html
     * <!-- HTTP -->
     * <ui-toggle td-url="http://device.local/properties/power" label="HTTP Device"></ui-toggle>
     * <!-- CoAP -->
     * <ui-toggle td-url="coap://device.local/properties/power" label="CoAP Device"></ui-toggle>
     * <!-- MQTT (via TD) -->
     * <ui-toggle td-url="mqtt://broker.local/device/properties/power" label="MQTT Device"></ui-toggle>
     * ```
     * @example TD Device Read-Only (shows colored circle)
     * ```html
     * <ui-toggle 
     * td-url="http://sensor.local/properties/status"
     * label="Door Sensor"
     * mode="read">
     * </ui-toggle>
     * ```
     * @example Local Control with Custom Handler
     * ```html
     * <ui-toggle 
     * value="true"
     * change-handler="myToggleHandler"
     * label="Custom Toggle">
     * </ui-toggle>
     * ```
     */
    interface UiToggle {
        /**
          * Function name to call when toggle state changes (for local control). User defines this function in their code, component will invoke it.
          * @example "handleMyToggle"
         */
        "changeHandler"?: string;
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Optional text label, to display text left to the toggle. When given, clicking the label will also toggle the switch.
         */
        "label"?: string;
        /**
          * Device interaction mode. - read: Only read from device (display current state as colored circle) - write: Only write to device (control device but don't sync state) - readwrite: Read and write (full synchronization) - default
          * @default 'readwrite'
         */
        "mode": 'read' | 'write' | 'readwrite';
        /**
          * Current state of the toggle. - active: Toggle is on/active - disabled: Toggle cannot be clicked or interacted with - default: Toggle is off/inactive (default)
          * @default 'default'
         */
        "state": 'active' | 'disabled' | 'default';
        /**
          * Direct URL of TD boolean properties to auto connect and interact with the device.
          * @example ``` td-url="http://plugfest.thingweb.io:80/http-data-schema-thing/properties/bool" ```
         */
        "tdUrl"?: string;
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * Current value for local control mode (true/false, on/off, 1/0). When no td-url is provided and value is set, this controls the toggle state.
          * @example "true", "false", "on", "off", "1", "0"
         */
        "value"?: string;
        /**
          * Visual style variant of the toggle. - circle: Common pill-shaped toggle (default) - square: Rectangular toggle with square thumb - apple: iOS-style switch (bigger size, rounded edges) - cross: Shows × when off, ✓ when on with red background when off and green when on - neon: Glowing effect when active
          * @default 'circle'
         */
        "variant": 'circle' | 'square' | 'apple' | 'cross' | 'neon';
    }
}
export interface UiButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiButtonElement;
}
export interface UiCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiCalendarElement;
}
export interface UiCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiCheckboxElement;
}
export interface UiNumberPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiNumberPickerElement;
}
export interface UiSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiSliderElement;
}
export interface UiTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiTextElement;
}
export interface UiToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiToggleElement;
}
declare global {
    interface HTMLUiButtonElementEventMap {
        "buttonClick": { label: string; timestamp: Date };
    }
    /**
     * Button component with various visual styles for user interactions.
     * Pure UI component focused on click events and visual feedback.
     * @example Basic Usage
     * ```html
     * <ui-button variant="minimal" label="Click Me"></ui-button>
     * ```
     * @example Different Variants
     * ```html
     * <ui-button variant="outlined" color="primary" label="Outlined Button"></ui-button>
     * <ui-button variant="filled" color="secondary" label="Filled Button"></ui-button>
     * ```
     * @example Event Handling
     * ```javascript
     * const button = document.querySelector('ui-button');
     * button.addEventListener('buttonClick', (e) => {
     * console.log('Button clicked:', e.detail.label);
     * });
     * ```
     * @example Framework Integration
     * ```javascript
     * // React
     * <ui-button label="Save" onButtonClick={(e) => handleSave(e.detail)} />
     * // Vue
     * <ui-button label="Save"
     * @buttonClick ="handleSave($event.detail)" />
     * ```
     */
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiButtonElementEventMap>(type: K, listener: (this: HTMLUiButtonElement, ev: UiButtonCustomEvent<HTMLUiButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiButtonElementEventMap>(type: K, listener: (this: HTMLUiButtonElement, ev: UiButtonCustomEvent<HTMLUiButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiCalendarElementEventMap {
        "dateChange": { value: string };
    }
    /**
     * Calendar component for date-time selection with various visual styles and TD integration.
     * Link a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-calendar variant="outlined" color="primary" label="Select Date"></ui-calendar>
     * ```
     * @example TD Integration
     * ```html
     * <ui-calendar 
     * td-url="http://device.local/properties/schedule"
     * variant="filled"
     * label="Device Schedule"
     * include-time="true">
     * </ui-calendar>
     * ```
     */
    interface HTMLUiCalendarElement extends Components.UiCalendar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiCalendarElementEventMap>(type: K, listener: (this: HTMLUiCalendarElement, ev: UiCalendarCustomEvent<HTMLUiCalendarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiCalendarElementEventMap>(type: K, listener: (this: HTMLUiCalendarElement, ev: UiCalendarCustomEvent<HTMLUiCalendarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiCalendarElement: {
        prototype: HTMLUiCalendarElement;
        new (): HTMLUiCalendarElement;
    };
    interface HTMLUiCheckboxElementEventMap {
        "checkboxChange": { checked: boolean };
    }
    /**
     * Checkbox component with consistent styling to match the design system.
     */
    interface HTMLUiCheckboxElement extends Components.UiCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiCheckboxElementEventMap>(type: K, listener: (this: HTMLUiCheckboxElement, ev: UiCheckboxCustomEvent<HTMLUiCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiCheckboxElementEventMap>(type: K, listener: (this: HTMLUiCheckboxElement, ev: UiCheckboxCustomEvent<HTMLUiCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiCheckboxElement: {
        prototype: HTMLUiCheckboxElement;
        new (): HTMLUiCheckboxElement;
    };
    interface HTMLUiHeadingElement extends Components.UiHeading, HTMLStencilElement {
    }
    var HTMLUiHeadingElement: {
        prototype: HTMLUiHeadingElement;
        new (): HTMLUiHeadingElement;
    };
    interface HTMLUiNumberPickerElementEventMap {
        "valueChange": { value: number; label?: string };
    }
    /**
     * Number picker component with increment/decrement buttons for numeric input.
     * Pure UI component focused on user interaction and value management.
     * @example Basic Usage
     * ```html
     * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
     * ```
     * @example Event Handling
     * ```javascript
     * const picker = document.querySelector('ui-number-picker');
     * picker.addEventListener('valueChange', (e) => {
     * console.log('Number changed:', e.detail.value);
     * console.log('Label:', e.detail.label);
     * });
     * ```
     * @example Framework Integration
     * ```javascript
     * // React
     * <ui-number-picker value={count} onValueChange={(e) => setCount(e.detail.value)} />
     * // Vue
     * <ui-number-picker :value="count"
     * @valueChange ="count = $event.detail.value" />
     * ```
     */
    interface HTMLUiNumberPickerElement extends Components.UiNumberPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiNumberPickerElementEventMap>(type: K, listener: (this: HTMLUiNumberPickerElement, ev: UiNumberPickerCustomEvent<HTMLUiNumberPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiNumberPickerElementEventMap>(type: K, listener: (this: HTMLUiNumberPickerElement, ev: UiNumberPickerCustomEvent<HTMLUiNumberPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiNumberPickerElement: {
        prototype: HTMLUiNumberPickerElement;
        new (): HTMLUiNumberPickerElement;
    };
    interface HTMLUiSliderElementEventMap {
        "valueChange": { value: number; label?: string };
        "slideStart": { value: number; label?: string };
        "slideEnd": { value: number; label?: string };
    }
    /**
     * Slider component with various visual styles for numeric input.
     * Pure UI component focused on user interaction and visual feedback.
     * @example Basic Usage
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="50" label="Brightness"></ui-slider>
     * ```
     * @example Event Handling
     * ```javascript
     * const slider = document.querySelector('ui-slider');
     * slider.addEventListener('valueChange', (e) => {
     * console.log('New value:', e.detail.value);
     * console.log('Label:', e.detail.label);
     * });
     * ```
     * @example Framework Integration
     * ```javascript
     * // React
     * <ui-slider value={brightness} onValueChange={(e) => setBrightness(e.detail.value)} />
     * // Vue
     * <ui-slider :value="brightness"
     * @valueChange ="brightness = $event.detail.value" />
     * ```
     */
    interface HTMLUiSliderElement extends Components.UiSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiSliderElementEventMap>(type: K, listener: (this: HTMLUiSliderElement, ev: UiSliderCustomEvent<HTMLUiSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiSliderElementEventMap>(type: K, listener: (this: HTMLUiSliderElement, ev: UiSliderCustomEvent<HTMLUiSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiSliderElement: {
        prototype: HTMLUiSliderElement;
        new (): HTMLUiSliderElement;
    };
    interface HTMLUiTextElementEventMap {
        "textChange": { value: string };
    }
    /**
     * Comprehensive text component for displaying and editing text data.
     * Supports single-line input, multi-line textarea, structured text with syntax highlighting,
     * expandable content, and Thing Description integration.
     * @example Basic Text Display
     * ```html
     * <ui-text variant="display" value="Hello World"></ui-text>
     * ```
     * @example Single-line Text Input
     * ```html
     * <ui-text variant="edit" value="Enter text" label="Name"></ui-text>
     * ```
     * @example Multi-line Text Area
     * ```html
     * <ui-text 
     * variant="edit" 
     * text-type="multi" 
     * value="Line 1\nLine 2" 
     * label="Description">
     * </ui-text>
     * ```
     * @example Structured Text with Highlighting
     * ```html
     * <ui-text 
     * variant="display" 
     * text-type="multi" 
     * structure="json" 
     * value='{"key": "value"}'>
     * </ui-text>
     * ```
     * @example TD Integration
     * ```html
     * <ui-text 
     * td-url="http://device.local/properties/name"
     * variant="edit"
     * label="Device Name">
     * </ui-text>
     * ```
     */
    interface HTMLUiTextElement extends Components.UiText, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiTextElementEventMap>(type: K, listener: (this: HTMLUiTextElement, ev: UiTextCustomEvent<HTMLUiTextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiTextElementEventMap>(type: K, listener: (this: HTMLUiTextElement, ev: UiTextCustomEvent<HTMLUiTextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiTextElement: {
        prototype: HTMLUiTextElement;
        new (): HTMLUiTextElement;
    };
    interface HTMLUiToggleElementEventMap {
        "toggle": { active: boolean };
    }
    /**
     * Toogle switch component with various fetueres, multiple visual styles and TD integration.
     * Link a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" state="active" label="Light"></ui-toggle>
     * ```
     * @example TD Integration (Auto-detects protocol)
     * ```html
     * <ui-toggle 
     * td-url="http://device.local/properties/power"
     * label="Smart Light"
     * mode="readwrite">
     * </ui-toggle>
     * ```
     * @example Multi-protocol Support
     * ```html
     * <!-- HTTP -->
     * <ui-toggle td-url="http://device.local/properties/power" label="HTTP Device"></ui-toggle>
     * <!-- CoAP -->
     * <ui-toggle td-url="coap://device.local/properties/power" label="CoAP Device"></ui-toggle>
     * <!-- MQTT (via TD) -->
     * <ui-toggle td-url="mqtt://broker.local/device/properties/power" label="MQTT Device"></ui-toggle>
     * ```
     * @example TD Device Read-Only (shows colored circle)
     * ```html
     * <ui-toggle 
     * td-url="http://sensor.local/properties/status"
     * label="Door Sensor"
     * mode="read">
     * </ui-toggle>
     * ```
     * @example Local Control with Custom Handler
     * ```html
     * <ui-toggle 
     * value="true"
     * change-handler="myToggleHandler"
     * label="Custom Toggle">
     * </ui-toggle>
     * ```
     */
    interface HTMLUiToggleElement extends Components.UiToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiToggleElementEventMap>(type: K, listener: (this: HTMLUiToggleElement, ev: UiToggleCustomEvent<HTMLUiToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiToggleElementEventMap>(type: K, listener: (this: HTMLUiToggleElement, ev: UiToggleCustomEvent<HTMLUiToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiToggleElement: {
        prototype: HTMLUiToggleElement;
        new (): HTMLUiToggleElement;
    };
    interface HTMLElementTagNameMap {
        "ui-button": HTMLUiButtonElement;
        "ui-calendar": HTMLUiCalendarElement;
        "ui-checkbox": HTMLUiCheckboxElement;
        "ui-heading": HTMLUiHeadingElement;
        "ui-number-picker": HTMLUiNumberPickerElement;
        "ui-slider": HTMLUiSliderElement;
        "ui-text": HTMLUiTextElement;
        "ui-toggle": HTMLUiToggleElement;
    }
}
declare namespace LocalJSX {
    /**
     * Button component with various visual styles for user interactions.
     * Pure UI component focused on click events and visual feedback.
     * @example Basic Usage
     * ```html
     * <ui-button variant="minimal" label="Click Me"></ui-button>
     * ```
     * @example Different Variants
     * ```html
     * <ui-button variant="outlined" color="primary" label="Outlined Button"></ui-button>
     * <ui-button variant="filled" color="secondary" label="Filled Button"></ui-button>
     * ```
     * @example Event Handling
     * ```javascript
     * const button = document.querySelector('ui-button');
     * button.addEventListener('buttonClick', (e) => {
     * console.log('Button clicked:', e.detail.label);
     * });
     * ```
     * @example Framework Integration
     * ```javascript
     * // React
     * <ui-button label="Save" onButtonClick={(e) => handleSave(e.detail)} />
     * // Vue
     * <ui-button label="Save"
     * @buttonClick ="handleSave($event.detail)" />
     * ```
     */
    interface UiButton {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Whether the button is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Button text label.
          * @default 'Button'
         */
        "label"?: string;
        /**
          * Event emitted when button is clicked
         */
        "onButtonClick"?: (event: UiButtonCustomEvent<{ label: string; timestamp: Date }>) => void;
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * Visual style variant of the button. - minimal: Clean button with subtle background (default) - outlined: Button with border outline - filled: Solid filled button
          * @default 'minimal'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Calendar component for date-time selection with various visual styles and TD integration.
     * Link a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-calendar variant="outlined" color="primary" label="Select Date"></ui-calendar>
     * ```
     * @example TD Integration
     * ```html
     * <ui-calendar 
     * td-url="http://device.local/properties/schedule"
     * variant="filled"
     * label="Device Schedule"
     * include-time="true">
     * </ui-calendar>
     * ```
     */
    interface UiCalendar {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Include time picker alongside date picker.
          * @default false
         */
        "includeTime"?: boolean;
        /**
          * Optional text label for the calendar.
         */
        "label"?: string;
        /**
          * Maximum selectable date (ISO string).
         */
        "maxDate"?: string;
        /**
          * Minimum selectable date (ISO string).
         */
        "minDate"?: string;
        /**
          * Event emitted when date changes
         */
        "onDateChange"?: (event: UiCalendarCustomEvent<{ value: string }>) => void;
        /**
          * Current state of the calendar. - disabled: Calendar cannot be interacted with - default: Calendar is interactive (default)
          * @default 'default'
         */
        "state"?: 'disabled' | 'default';
        /**
          * Thing Description URL for device control.
         */
        "tdUrl"?: string;
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * Current selected date-time value (ISO string).
         */
        "value"?: string;
        /**
          * Visual style variant of the calendar. - minimal: Clean minimal design (default) - outlined: Border with background - filled: Solid background
          * @default 'minimal'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Checkbox component with consistent styling to match the design system.
     */
    interface UiCheckbox {
        /**
          * Custom callback function name.
         */
        "changeHandler"?: string;
        /**
          * Whether the checkbox is checked.
          * @default false
         */
        "checked"?: boolean;
        /**
          * Color scheme to match design system.
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Optional text label for the checkbox.
         */
        "label"?: string;
        /**
          * Event emitted when checkbox state changes.
         */
        "onCheckboxChange"?: (event: UiCheckboxCustomEvent<{ checked: boolean }>) => void;
        /**
          * Current state of the checkbox.
          * @default 'default'
         */
        "state"?: 'disabled' | 'active' | 'default';
        /**
          * Thing Description URL for property control. When provided, checkbox will read/write boolean values to the device.
          * @example "http://device.local/properties/enabled"
         */
        "tdUrl"?: string;
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * Visual style variant of the checkbox.
          * @default 'outlined'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    interface UiHeading {
        "text"?: string;
    }
    /**
     * Number picker component with increment/decrement buttons for numeric input.
     * Pure UI component focused on user interaction and value management.
     * @example Basic Usage
     * ```html
     * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
     * ```
     * @example Event Handling
     * ```javascript
     * const picker = document.querySelector('ui-number-picker');
     * picker.addEventListener('valueChange', (e) => {
     * console.log('Number changed:', e.detail.value);
     * console.log('Label:', e.detail.label);
     * });
     * ```
     * @example Framework Integration
     * ```javascript
     * // React
     * <ui-number-picker value={count} onValueChange={(e) => setCount(e.detail.value)} />
     * // Vue
     * <ui-number-picker :value="count"
     * @valueChange ="count = $event.detail.value" />
     * ```
     */
    interface UiNumberPicker {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Whether the number picker is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Optional text label, to display above the number picker.
         */
        "label"?: string;
        /**
          * Maximum allowed value.
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum allowed value.
          * @default 0
         */
        "min"?: number;
        /**
          * Event emitted when value changes
         */
        "onValueChange"?: (event: UiNumberPickerCustomEvent<{ value: number; label?: string }>) => void;
        /**
          * Step increment/decrement amount.
          * @default 1
         */
        "step"?: number;
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * Current value of the number picker.
          * @default 0
         */
        "value"?: number;
        /**
          * Visual style variant of the number picker. - minimal: Clean buttons with subtle background (default) - outlined: Buttons with border outline - filled: Solid filled buttons
          * @default 'minimal'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Slider component with various visual styles for numeric input.
     * Pure UI component focused on user interaction and visual feedback.
     * @example Basic Usage
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="50" label="Brightness"></ui-slider>
     * ```
     * @example Event Handling
     * ```javascript
     * const slider = document.querySelector('ui-slider');
     * slider.addEventListener('valueChange', (e) => {
     * console.log('New value:', e.detail.value);
     * console.log('Label:', e.detail.label);
     * });
     * ```
     * @example Framework Integration
     * ```javascript
     * // React
     * <ui-slider value={brightness} onValueChange={(e) => setBrightness(e.detail.value)} />
     * // Vue
     * <ui-slider :value="brightness"
     * @valueChange ="brightness = $event.detail.value" />
     * ```
     */
    interface UiSlider {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Whether the slider is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable manual control interface.
          * @default false
         */
        "enableManualControl"?: boolean;
        /**
          * Optional text label, to display text above the slider.
         */
        "label"?: string;
        /**
          * Maximum value of the slider.
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum value of the slider.
          * @default 0
         */
        "min"?: number;
        /**
          * Event emitted when user stops dragging
         */
        "onSlideEnd"?: (event: UiSliderCustomEvent<{ value: number; label?: string }>) => void;
        /**
          * Event emitted when user starts dragging
         */
        "onSlideStart"?: (event: UiSliderCustomEvent<{ value: number; label?: string }>) => void;
        /**
          * Event emitted when value changes
         */
        "onValueChange"?: (event: UiSliderCustomEvent<{ value: number; label?: string }>) => void;
        /**
          * Orientation of the slider. - horizontal: Left to right slider (default) - vertical: Bottom to top slider
          * @default 'horizontal'
         */
        "orientation"?: 'horizontal' | 'vertical';
        /**
          * Step increment for the slider.
          * @default 1
         */
        "step"?: number;
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * Shape of the slider thumb. - circle: Round thumb (default) - square: Square thumb - arrow: Arrow-shaped thumb pointing right - triangle: Triangle-shaped thumb - diamond: Diamond-shaped thumb (<> style)
          * @default 'circle'
         */
        "thumbShape"?: 'circle' | 'square' | 'arrow' | 'triangle' | 'diamond';
        /**
          * Current value of the slider.
          * @default 0
         */
        "value"?: number;
        /**
          * Visual style variant of the slider. - narrow: Thin slider track (default) - wide: Thick slider track - rainbow: Gradient color track - neon: Glowing effect - stepped: Shows step marks
          * @default 'narrow'
         */
        "variant"?: 'narrow' | 'wide' | 'rainbow' | 'neon' | 'stepped';
    }
    /**
     * Comprehensive text component for displaying and editing text data.
     * Supports single-line input, multi-line textarea, structured text with syntax highlighting,
     * expandable content, and Thing Description integration.
     * @example Basic Text Display
     * ```html
     * <ui-text variant="display" value="Hello World"></ui-text>
     * ```
     * @example Single-line Text Input
     * ```html
     * <ui-text variant="edit" value="Enter text" label="Name"></ui-text>
     * ```
     * @example Multi-line Text Area
     * ```html
     * <ui-text 
     * variant="edit" 
     * text-type="multi" 
     * value="Line 1\nLine 2" 
     * label="Description">
     * </ui-text>
     * ```
     * @example Structured Text with Highlighting
     * ```html
     * <ui-text 
     * variant="display" 
     * text-type="multi" 
     * structure="json" 
     * value='{"key": "value"}'>
     * </ui-text>
     * ```
     * @example TD Integration
     * ```html
     * <ui-text 
     * td-url="http://device.local/properties/name"
     * variant="edit"
     * label="Device Name">
     * </ui-text>
     * ```
     */
    interface UiText {
        /**
          * Custom callback function name for value changes.
         */
        "changeHandler"?: string;
        /**
          * Color scheme to match design system.
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Enable expandable/collapsible display for long text.
          * @default false
         */
        "expandable"?: boolean;
        /**
          * Optional text label for the component.
         */
        "label"?: string;
        /**
          * Maximum height before showing expand/collapse controls (in pixels).
          * @default 200
         */
        "maxHeight"?: number;
        /**
          * Maximum length for text input (edit mode only).
         */
        "maxLength"?: number;
        /**
          * Event emitted when text value changes.
         */
        "onTextChange"?: (event: UiTextCustomEvent<{ value: string }>) => void;
        /**
          * Placeholder text for edit mode.
         */
        "placeholder"?: string;
        /**
          * Whether the text area should be resizable (edit mode only).
          * @default false
         */
        "resizable"?: boolean;
        /**
          * Number of rows for multi-line text area.
          * @default 4
         */
        "rows"?: number;
        /**
          * Current state of the text component.
          * @default 'default'
         */
        "state"?: 'disabled' | 'active' | 'default';
        /**
          * Structure type for syntax highlighting in display mode. - unstructured: Plain text (default) - json: JSON syntax highlighting - yaml: YAML syntax highlighting - xml: XML syntax highlighting - markdown: Markdown syntax highlighting
          * @default 'unstructured'
         */
        "structure"?: 'unstructured' | 'json' | 'yaml' | 'xml' | 'markdown';
        /**
          * Thing Description URL for property control.
         */
        "tdUrl"?: string;
        /**
          * Type of text field. - single: Single-line text field - multi: Multi-line text area
          * @default 'single'
         */
        "textType"?: 'single' | 'multi';
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * Text value content.
          * @default ''
         */
        "value"?: string;
        /**
          * Visual style variant of the text component. - display: Read-only text display - edit: Editable text input/textarea
          * @default 'display'
         */
        "variant"?: 'display' | 'edit';
    }
    /**
     * Toogle switch component with various fetueres, multiple visual styles and TD integration.
     * Link a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" state="active" label="Light"></ui-toggle>
     * ```
     * @example TD Integration (Auto-detects protocol)
     * ```html
     * <ui-toggle 
     * td-url="http://device.local/properties/power"
     * label="Smart Light"
     * mode="readwrite">
     * </ui-toggle>
     * ```
     * @example Multi-protocol Support
     * ```html
     * <!-- HTTP -->
     * <ui-toggle td-url="http://device.local/properties/power" label="HTTP Device"></ui-toggle>
     * <!-- CoAP -->
     * <ui-toggle td-url="coap://device.local/properties/power" label="CoAP Device"></ui-toggle>
     * <!-- MQTT (via TD) -->
     * <ui-toggle td-url="mqtt://broker.local/device/properties/power" label="MQTT Device"></ui-toggle>
     * ```
     * @example TD Device Read-Only (shows colored circle)
     * ```html
     * <ui-toggle 
     * td-url="http://sensor.local/properties/status"
     * label="Door Sensor"
     * mode="read">
     * </ui-toggle>
     * ```
     * @example Local Control with Custom Handler
     * ```html
     * <ui-toggle 
     * value="true"
     * change-handler="myToggleHandler"
     * label="Custom Toggle">
     * </ui-toggle>
     * ```
     */
    interface UiToggle {
        /**
          * Function name to call when toggle state changes (for local control). User defines this function in their code, component will invoke it.
          * @example "handleMyToggle"
         */
        "changeHandler"?: string;
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Optional text label, to display text left to the toggle. When given, clicking the label will also toggle the switch.
         */
        "label"?: string;
        /**
          * Device interaction mode. - read: Only read from device (display current state as colored circle) - write: Only write to device (control device but don't sync state) - readwrite: Read and write (full synchronization) - default
          * @default 'readwrite'
         */
        "mode"?: 'read' | 'write' | 'readwrite';
        /**
          * Event emitted when toggle state changes
         */
        "onToggle"?: (event: UiToggleCustomEvent<{ active: boolean }>) => void;
        /**
          * Current state of the toggle. - active: Toggle is on/active - disabled: Toggle cannot be clicked or interacted with - default: Toggle is off/inactive (default)
          * @default 'default'
         */
        "state"?: 'active' | 'disabled' | 'default';
        /**
          * Direct URL of TD boolean properties to auto connect and interact with the device.
          * @example ``` td-url="http://plugfest.thingweb.io:80/http-data-schema-thing/properties/bool" ```
         */
        "tdUrl"?: string;
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * Current value for local control mode (true/false, on/off, 1/0). When no td-url is provided and value is set, this controls the toggle state.
          * @example "true", "false", "on", "off", "1", "0"
         */
        "value"?: string;
        /**
          * Visual style variant of the toggle. - circle: Common pill-shaped toggle (default) - square: Rectangular toggle with square thumb - apple: iOS-style switch (bigger size, rounded edges) - cross: Shows × when off, ✓ when on with red background when off and green when on - neon: Glowing effect when active
          * @default 'circle'
         */
        "variant"?: 'circle' | 'square' | 'apple' | 'cross' | 'neon';
    }
    interface IntrinsicElements {
        "ui-button": UiButton;
        "ui-calendar": UiCalendar;
        "ui-checkbox": UiCheckbox;
        "ui-heading": UiHeading;
        "ui-number-picker": UiNumberPicker;
        "ui-slider": UiSlider;
        "ui-text": UiText;
        "ui-toggle": UiToggle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * Button component with various visual styles for user interactions.
             * Pure UI component focused on click events and visual feedback.
             * @example Basic Usage
             * ```html
             * <ui-button variant="minimal" label="Click Me"></ui-button>
             * ```
             * @example Different Variants
             * ```html
             * <ui-button variant="outlined" color="primary" label="Outlined Button"></ui-button>
             * <ui-button variant="filled" color="secondary" label="Filled Button"></ui-button>
             * ```
             * @example Event Handling
             * ```javascript
             * const button = document.querySelector('ui-button');
             * button.addEventListener('buttonClick', (e) => {
             * console.log('Button clicked:', e.detail.label);
             * });
             * ```
             * @example Framework Integration
             * ```javascript
             * // React
             * <ui-button label="Save" onButtonClick={(e) => handleSave(e.detail)} />
             * // Vue
             * <ui-button label="Save"
             * @buttonClick ="handleSave($event.detail)" />
             * ```
             */
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            /**
             * Calendar component for date-time selection with various visual styles and TD integration.
             * Link a direct property URL for plug-and-play device control.
             * @example Basic Usage
             * ```html
             * <ui-calendar variant="outlined" color="primary" label="Select Date"></ui-calendar>
             * ```
             * @example TD Integration
             * ```html
             * <ui-calendar 
             * td-url="http://device.local/properties/schedule"
             * variant="filled"
             * label="Device Schedule"
             * include-time="true">
             * </ui-calendar>
             * ```
             */
            "ui-calendar": LocalJSX.UiCalendar & JSXBase.HTMLAttributes<HTMLUiCalendarElement>;
            /**
             * Checkbox component with consistent styling to match the design system.
             */
            "ui-checkbox": LocalJSX.UiCheckbox & JSXBase.HTMLAttributes<HTMLUiCheckboxElement>;
            "ui-heading": LocalJSX.UiHeading & JSXBase.HTMLAttributes<HTMLUiHeadingElement>;
            /**
             * Number picker component with increment/decrement buttons for numeric input.
             * Pure UI component focused on user interaction and value management.
             * @example Basic Usage
             * ```html
             * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
             * ```
             * @example Event Handling
             * ```javascript
             * const picker = document.querySelector('ui-number-picker');
             * picker.addEventListener('valueChange', (e) => {
             * console.log('Number changed:', e.detail.value);
             * console.log('Label:', e.detail.label);
             * });
             * ```
             * @example Framework Integration
             * ```javascript
             * // React
             * <ui-number-picker value={count} onValueChange={(e) => setCount(e.detail.value)} />
             * // Vue
             * <ui-number-picker :value="count"
             * @valueChange ="count = $event.detail.value" />
             * ```
             */
            "ui-number-picker": LocalJSX.UiNumberPicker & JSXBase.HTMLAttributes<HTMLUiNumberPickerElement>;
            /**
             * Slider component with various visual styles for numeric input.
             * Pure UI component focused on user interaction and visual feedback.
             * @example Basic Usage
             * ```html
             * <ui-slider variant="narrow" min="0" max="100" value="50" label="Brightness"></ui-slider>
             * ```
             * @example Event Handling
             * ```javascript
             * const slider = document.querySelector('ui-slider');
             * slider.addEventListener('valueChange', (e) => {
             * console.log('New value:', e.detail.value);
             * console.log('Label:', e.detail.label);
             * });
             * ```
             * @example Framework Integration
             * ```javascript
             * // React
             * <ui-slider value={brightness} onValueChange={(e) => setBrightness(e.detail.value)} />
             * // Vue
             * <ui-slider :value="brightness"
             * @valueChange ="brightness = $event.detail.value" />
             * ```
             */
            "ui-slider": LocalJSX.UiSlider & JSXBase.HTMLAttributes<HTMLUiSliderElement>;
            /**
             * Comprehensive text component for displaying and editing text data.
             * Supports single-line input, multi-line textarea, structured text with syntax highlighting,
             * expandable content, and Thing Description integration.
             * @example Basic Text Display
             * ```html
             * <ui-text variant="display" value="Hello World"></ui-text>
             * ```
             * @example Single-line Text Input
             * ```html
             * <ui-text variant="edit" value="Enter text" label="Name"></ui-text>
             * ```
             * @example Multi-line Text Area
             * ```html
             * <ui-text 
             * variant="edit" 
             * text-type="multi" 
             * value="Line 1\nLine 2" 
             * label="Description">
             * </ui-text>
             * ```
             * @example Structured Text with Highlighting
             * ```html
             * <ui-text 
             * variant="display" 
             * text-type="multi" 
             * structure="json" 
             * value='{"key": "value"}'>
             * </ui-text>
             * ```
             * @example TD Integration
             * ```html
             * <ui-text 
             * td-url="http://device.local/properties/name"
             * variant="edit"
             * label="Device Name">
             * </ui-text>
             * ```
             */
            "ui-text": LocalJSX.UiText & JSXBase.HTMLAttributes<HTMLUiTextElement>;
            /**
             * Toogle switch component with various fetueres, multiple visual styles and TD integration.
             * Link a direct property URL for plug-and-play device control.
             * @example Basic Usage
             * ```html
             * <ui-toggle variant="circle" state="active" label="Light"></ui-toggle>
             * ```
             * @example TD Integration (Auto-detects protocol)
             * ```html
             * <ui-toggle 
             * td-url="http://device.local/properties/power"
             * label="Smart Light"
             * mode="readwrite">
             * </ui-toggle>
             * ```
             * @example Multi-protocol Support
             * ```html
             * <!-- HTTP -->
             * <ui-toggle td-url="http://device.local/properties/power" label="HTTP Device"></ui-toggle>
             * <!-- CoAP -->
             * <ui-toggle td-url="coap://device.local/properties/power" label="CoAP Device"></ui-toggle>
             * <!-- MQTT (via TD) -->
             * <ui-toggle td-url="mqtt://broker.local/device/properties/power" label="MQTT Device"></ui-toggle>
             * ```
             * @example TD Device Read-Only (shows colored circle)
             * ```html
             * <ui-toggle 
             * td-url="http://sensor.local/properties/status"
             * label="Door Sensor"
             * mode="read">
             * </ui-toggle>
             * ```
             * @example Local Control with Custom Handler
             * ```html
             * <ui-toggle 
             * value="true"
             * change-handler="myToggleHandler"
             * label="Custom Toggle">
             * </ui-toggle>
             * ```
             */
            "ui-toggle": LocalJSX.UiToggle & JSXBase.HTMLAttributes<HTMLUiToggleElement>;
        }
    }
}
