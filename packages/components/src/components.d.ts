/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface UiHeading {
        "text": string;
    }
    /**
     * Modern, accessible toggle switch with multiple visual styles and IoT integration.
     * Simply provide a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" state="active" label="Enable notifications"></ui-toggle>
     * ```
     * @example IoT Integration
     * ```html
     * <ui-toggle td-url="http://device.com/properties/switch" label="Smart Device"></ui-toggle>
     * ```
     */
    interface UiToggle {
        /**
          * Color scheme for the toggle appearance. - primary: Teal/green professional color - secondary: Pink/purple accent color - neutral: Grayscale minimal appearance
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Optional text label displayed next to the toggle. When provided, clicking the label will also toggle the switch.
         */
        "label"?: string;
        /**
          * Current state of the toggle. - active: Toggle is on/active (default) - disabled: Toggle cannot be interacted with
          * @default 'active'
         */
        "state": 'active' | 'disabled';
        /**
          * Direct URL to the device property for IoT integration. Provide the complete property URL for automatic device control.
          * @example ``` td-url="http://plugfest.thingweb.io:80/http-data-schema-thing/properties/bool" ```
         */
        "tdUrl"?: string;
        /**
          * Visual theme for the component. - light: Bright colors suitable for light backgrounds - dark: Muted colors suitable for dark backgrounds
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * Visual style variant of the toggle switch. - circle: Standard pill-shaped toggle (default) - square: Rectangular toggle with square thumb - apple: iOS-style switch with inner shadow - cross: Shows × when off, ✓ when on - neon: Glowing effect when active
          * @default 'circle'
         */
        "variant": 'circle' | 'square' | 'apple' | 'cross' | 'neon';
    }
}
declare global {
    interface HTMLUiHeadingElement extends Components.UiHeading, HTMLStencilElement {
    }
    var HTMLUiHeadingElement: {
        prototype: HTMLUiHeadingElement;
        new (): HTMLUiHeadingElement;
    };
    /**
     * Modern, accessible toggle switch with multiple visual styles and IoT integration.
     * Simply provide a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" state="active" label="Enable notifications"></ui-toggle>
     * ```
     * @example IoT Integration
     * ```html
     * <ui-toggle td-url="http://device.com/properties/switch" label="Smart Device"></ui-toggle>
     * ```
     */
    interface HTMLUiToggleElement extends Components.UiToggle, HTMLStencilElement {
    }
    var HTMLUiToggleElement: {
        prototype: HTMLUiToggleElement;
        new (): HTMLUiToggleElement;
    };
    interface HTMLElementTagNameMap {
        "ui-heading": HTMLUiHeadingElement;
        "ui-toggle": HTMLUiToggleElement;
    }
}
declare namespace LocalJSX {
    interface UiHeading {
        "text"?: string;
    }
    /**
     * Modern, accessible toggle switch with multiple visual styles and IoT integration.
     * Simply provide a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" state="active" label="Enable notifications"></ui-toggle>
     * ```
     * @example IoT Integration
     * ```html
     * <ui-toggle td-url="http://device.com/properties/switch" label="Smart Device"></ui-toggle>
     * ```
     */
    interface UiToggle {
        /**
          * Color scheme for the toggle appearance. - primary: Teal/green professional color - secondary: Pink/purple accent color - neutral: Grayscale minimal appearance
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Optional text label displayed next to the toggle. When provided, clicking the label will also toggle the switch.
         */
        "label"?: string;
        /**
          * Current state of the toggle. - active: Toggle is on/active (default) - disabled: Toggle cannot be interacted with
          * @default 'active'
         */
        "state"?: 'active' | 'disabled';
        /**
          * Direct URL to the device property for IoT integration. Provide the complete property URL for automatic device control.
          * @example ``` td-url="http://plugfest.thingweb.io:80/http-data-schema-thing/properties/bool" ```
         */
        "tdUrl"?: string;
        /**
          * Visual theme for the component. - light: Bright colors suitable for light backgrounds - dark: Muted colors suitable for dark backgrounds
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * Visual style variant of the toggle switch. - circle: Standard pill-shaped toggle (default) - square: Rectangular toggle with square thumb - apple: iOS-style switch with inner shadow - cross: Shows × when off, ✓ when on - neon: Glowing effect when active
          * @default 'circle'
         */
        "variant"?: 'circle' | 'square' | 'apple' | 'cross' | 'neon';
    }
    interface IntrinsicElements {
        "ui-heading": UiHeading;
        "ui-toggle": UiToggle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ui-heading": LocalJSX.UiHeading & JSXBase.HTMLAttributes<HTMLUiHeadingElement>;
            /**
             * Modern, accessible toggle switch with multiple visual styles and IoT integration.
             * Simply provide a direct property URL for plug-and-play device control.
             * @example Basic Usage
             * ```html
             * <ui-toggle variant="circle" state="active" label="Enable notifications"></ui-toggle>
             * ```
             * @example IoT Integration
             * ```html
             * <ui-toggle td-url="http://device.com/properties/switch" label="Smart Device"></ui-toggle>
             * ```
             */
            "ui-toggle": LocalJSX.UiToggle & JSXBase.HTMLAttributes<HTMLUiToggleElement>;
        }
    }
}
