/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { UiButtonClick } from "./components/ui-button/ui-button";
import { UiMsg } from "./utils/types";
import { UiCalendarDateChange, UiCalendarValueChange } from "./components/ui-calendar/ui-calendar";
import { UiNumberPickerValueChange } from "./components/ui-number-picker/ui-number-picker";
export { UiButtonClick } from "./components/ui-button/ui-button";
export { UiMsg } from "./utils/types";
export { UiCalendarDateChange, UiCalendarValueChange } from "./components/ui-calendar/ui-calendar";
export { UiNumberPickerValueChange } from "./components/ui-number-picker/ui-number-picker";
export namespace Components {
    /**
     * Button component with various visual styles, matching the ui-number-picker design family.
     * Supports the same variants, colors, and themes as the number picker.
     * @example Basic Usage
     * ```html
     * <ui-button variant="minimal" label="Click Me"></ui-button>
     * ```
     * @example Different Variants
     * ```html
     * <ui-button variant="outlined" color="primary" label="Outlined Button"></ui-button>
     * <ui-button variant="filled" color="secondary" label="Filled Button"></ui-button>
     * ```
     * @example Custom Click Handler
     * ```html
     * <ui-button on-click="handleButtonClick" label="Custom Handler"></ui-button>
     * ```
     * @example Event Handling
     * ```javascript
     * window.handleButtonClick = function(data) {
     * console.log('Button clicked:', data.label);
     * // Your custom logic here
     * };
     * ```
     */
    interface UiButton {
        /**
          * Color scheme to match thingsweb webpage
          * @example ```html <ui-button color="secondary" label="Colored Button"></ui-button> ```
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Dark theme variant.
          * @example ```html <ui-button dark="true" label="Dark Button"></ui-button> ```
          * @default false
         */
        "dark": boolean;
        /**
          * Whether the component is disabled (cannot be interacted with).
          * @example ```html <ui-button disabled="true" label="Cannot Click"></ui-button> ```
          * @default false
         */
        "disabled": boolean;
        /**
          * Get current button value (its label)
         */
        "getValue": () => Promise<string>;
        /**
          * Enable keyboard navigation.
          * @example ```html <ui-button keyboard="false" label="No Keyboard"></ui-button> ```
          * @default true
         */
        "keyboard": boolean;
        /**
          * Button text label.
          * @example ```html <ui-button label="Click Me"></ui-button> ```
          * @default 'Button'
         */
        "label": string;
        /**
          * Whether the component is read-only (displays value but cannot be changed).
          * @example ```html <ui-button readonly="true" label="Display Only"></ui-button> ```
          * @default false
         */
        "readonly": boolean;
        /**
          * Manually set operation status
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", message?: string) => Promise<void>;
        /**
          * Consolidated setValue method with automatic Promise-based status management
         */
        "setValue": (value: string, options?: { writeOperation?: () => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; autoRetry?: { attempts: number; delay: number; }; customStatus?: "loading" | "success" | "error"; errorMessage?: string; _isRevert?: boolean; }) => Promise<boolean>;
        /**
          * Set value silently without triggering events or status changes
         */
        "setValueSilent": (value: string) => Promise<boolean>;
        /**
          * Show last updated timestamp below the component.
          * @example ```html <ui-button showLastUpdated="true" label="With Timestamp"></ui-button> ```
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Trigger visual read pulse (brief animation)
         */
        "triggerReadPulse": () => Promise<void>;
        /**
          * Visual style variant of the button. - minimal: Clean button with subtle background (default) - outlined: Button with border outline - filled: Solid filled button
          * @default 'minimal'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Calendar component for date-time selection with various visual styles and TD integration.
     * Link a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-calendar variant="outlined" color="primary" label="Select Date"></ui-calendar>
     * ```
     * @example TD Integration
     * ```html
     * <ui-calendar
     * td-url="http://device.local/properties/schedule"
     * variant="filled"
     * label="Device Schedule"
     * include-time="true">
     * </ui-calendar>
     * ```
     */
    interface UiCalendar {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Include time picker alongside date picker.
          * @default false
         */
        "includeTime": boolean;
        /**
          * Optional text label for the calendar.
         */
        "label"?: string;
        /**
          * Maximum selectable date (ISO string).
         */
        "maxDate"?: string;
        /**
          * Minimum selectable date (ISO string).
         */
        "minDate"?: string;
        /**
          * Current state of the calendar. - disabled: Calendar cannot be interacted with - default: Calendar is interactive (default)
          * @default 'default'
         */
        "state": 'disabled' | 'default';
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * Current selected date-time value (ISO string).
         */
        "value"?: string;
        /**
          * Visual style variant of the calendar. - minimal: Clean minimal design (default) - outlined: Border with background - filled: Solid background
          * @default 'minimal'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Advanced checkbox component with reactive state management and multiple visual styles.
     * @example Basic Usage
     * ```html
     * <ui-checkbox variant="outlined" value="true" label="Accept Terms"></ui-checkbox>
     * ```
     * @example Different Variants
     * ```html
     * <ui-checkbox variant="minimal" value="false" label="Minimal Style"></ui-checkbox>
     * <ui-checkbox variant="outlined" value="true" label="Outlined Style"></ui-checkbox>
     * <ui-checkbox variant="filled" value="false" label="Filled Style"></ui-checkbox>
     * ```
     * @example Read-Only Mode
     * ```html
     * <ui-checkbox readonly="true" value="false" label="Sensor Status"></ui-checkbox>
     * ```
     * @example JavaScript Integration with Multiple Checkboxes
     * ```javascript
     * // For single checkbox
     * const checkbox = document.querySelector('#my-checkbox');
     * // For multiple checkboxes
     * const checkboxes = document.querySelectorAll('ui-checkbox');
     * checkboxes.forEach(checkbox => {
     * checkbox.addEventListener('valueMsg', (e) => {
     * console.log('Checkbox ID:', e.detail.source);
     * console.log('New value:', e.detail.payload);
     * });
     * });
     * // Set value by ID
     * const termsCheckbox = document.getElementById('terms-checkbox');
     * await termsCheckbox.setValue(true);
     * ```
     * @example HTML with IDs
     * ```html
     * <ui-checkbox id="terms-checkbox" label="Accept Terms" variant="outlined"></ui-checkbox>
     * <ui-checkbox id="newsletter-checkbox" label="Subscribe to Newsletter" variant="filled"></ui-checkbox>
     * ```
     */
    interface UiCheckbox {
        /**
          * Color theme variant.
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for readonly mode
          * @default true
         */
        "connected": boolean;
        /**
          * Enable dark theme for the component. When true, uses light text on dark backgrounds.
          * @default false
         */
        "dark": boolean;
        /**
          * Whether the checkbox is disabled (cannot be interacted with).
          * @default false
         */
        "disabled": boolean;
        /**
          * Get the current checkbox value with optional metadata
          * @param includeMetadata - Include last updated timestamp and status
          * @returns Promise that resolves to the current value or value with metadata
         */
        "getValue": (includeMetadata?: boolean) => Promise<boolean | { value: boolean; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Enable keyboard navigation (Space and Enter keys). Default: true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed next to the checkbox.
         */
        "label"?: string;
        /**
          * Whether the checkbox is read-only (displays value but cannot be changed).
          * @default false
         */
        "readonly": boolean;
        /**
          * Set operation status for external status management
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Consolidated setValue method with automatic Promise-based status management
         */
        "setValue": (value: boolean, options?: { writeOperation?: () => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; autoRetry?: { attempts: number; delay: number; }; customStatus?: "loading" | "success" | "error"; errorMessage?: string; _isRevert?: boolean; }) => Promise<boolean>;
        /**
          * Set value programmatically without triggering events (for external updates)
         */
        "setValueSilent": (value: boolean) => Promise<void>;
        /**
          * Show last updated timestamp when true
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Trigger a read pulse indicator for readonly mode when data is actually fetched
         */
        "triggerReadPulse": () => Promise<void>;
        /**
          * Current boolean value of the checkbox.
          * @default false
         */
        "value": boolean;
        /**
          * Visual style variant of the checkbox.
          * @default 'outlined'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Number picker component with various visual styles, TD integration and customizable range.
     * Supports increment/decrement buttons with Thing Description integration for IoT devices.
     * @example Basic Usage
     * ```html
     * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
     * ```
     * @example TD Integration with HTTP
     * ```html
     * <ui-number-picker
     * td-url="http://device.local/properties/volume"
     * label="Device Volume"
     * protocol="http"
     * mode="readwrite"
     * min="0"
     * max="100">
     * </ui-number-picker>
     * ```
     * @example TD Integration with MQTT
     * ```html
     * <ui-number-picker
     * td-url="mqtt://device"
     * mqtt-host="localhost:1883"
     * mqtt-topic="device/volume"
     * label="MQTT Volume"
     * protocol="mqtt"
     * mode="readwrite">
     * </ui-number-picker>
     * ```
     * @example TD Device Read-Only (shows value only)
     * ```html
     * <ui-number-picker
     * td-url="http://sensor.local/temperature"
     * label="Temperature Sensor"
     * mode="read">
     * </ui-number-picker>
     * ```
     * @example Local Control with Custom Handler
     * ```html
     * <ui-number-picker
     * value="3"
     * on-change="handleNumberChange"
     * variant="filled"
     * label="Custom Counter">
     * </ui-number-picker>
     * ```
     * @example Event Handling
     * ```javascript
     * window.handleNumberChange = function(data) {
     * console.log('Number changed:', data.value);
     * console.log('Label:', data.label);
     * // Your custom logic here
     * };
     * ```
     */
    interface UiNumberPicker {
        /**
          * Color theme variant.
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for readonly mode
          * @default true
         */
        "connected": boolean;
        /**
          * Enable dark theme for the component. When true, uses light text on dark backgrounds.
          * @default false
         */
        "dark": boolean;
        /**
          * Whether the number picker is disabled (cannot be interacted with).
          * @default false
         */
        "disabled": boolean;
        /**
          * Get the current number picker value with optional metadata
          * @param includeMetadata - Include last updated timestamp and status
          * @returns Promise that resolves to the current value or value with metadata
         */
        "getValue": (includeMetadata?: boolean) => Promise<number | { value: number; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Enable keyboard navigation (Arrow keys). Default: true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed above the number picker.
         */
        "label"?: string;
        /**
          * Maximum allowed value.
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum allowed value.
          * @default 0
         */
        "min"?: number;
        /**
          * Device interaction mode. - read: Only read from device (display current value, no interaction) - write: Only write to device (control device but don't sync state) - readwrite: Read and write (full synchronization) - default
          * @default 'readwrite'
         */
        "mode": 'read' | 'write' | 'readwrite';
        /**
          * Whether the number picker is read-only (displays value but cannot be changed).
          * @default false
         */
        "readonly": boolean;
        /**
          * Set operation status for external status management
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Consolidated setValue method with automatic Promise-based status management
         */
        "setValue": (value: number, options?: { writeOperation?: () => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; autoRetry?: { attempts: number; delay: number; }; customStatus?: "loading" | "success" | "error"; errorMessage?: string; _isRevert?: boolean; }) => Promise<boolean>;
        /**
          * Set value programmatically without triggering events (for external updates)
         */
        "setValueSilent": (value: number) => Promise<void>;
        /**
          * Show last updated timestamp when true
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Step increment/decrement amount.
          * @default 1
         */
        "step": number;
        /**
          * Trigger a read pulse indicator for readonly mode when data is actually fetched
         */
        "triggerReadPulse": () => Promise<void>;
        /**
          * Current numeric value of the number picker.
          * @default 0
         */
        "value": number;
        /**
          * Visual style variant of the number picker. - minimal: Clean buttons with subtle background (default) - outlined: Buttons with border outline - filled: Solid filled buttons
          * @default 'minimal'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Smart wrapper for TD properties that provides visual feedback, status indicators,
     * and handles the connection between UI controls and Thing Description properties.
     * @example Basic usage with toggle:
     * ```html
     * <ui-property-card property="on" thing-id="light-1" label="Living Room Light">
     *   <ui-toggle slot="control" value="false"></ui-toggle>
     * </ui-property-card>
     * ```
     */
    interface UiPropertyCard {
        /**
          * Acknowledge a successful operation
         */
        "ackSuccess": (message?: string) => Promise<void>;
        /**
          * Description text for the property
         */
        "description"?: string;
        /**
          * Display label for the property
         */
        "label"?: string;
        /**
          * Property name from the Thing Description
         */
        "property"?: string;
        /**
          * Report an error
         */
        "reportError": (message: string) => Promise<void>;
        /**
          * Property schema from Thing Description (for capability detection)
         */
        "schema"?: any;
        /**
          * Set the current status with optional auto-clear
         */
        "setStatus": (status: "idle" | "pending" | "success" | "error", message?: string, autoClearMs?: number) => Promise<void>;
        /**
          * Show capability badge (read-only, write-only, etc.)
          * @default true
         */
        "showCapabilityBadge": boolean;
        /**
          * Show status indicator (success, error, pending)
          * @default true
         */
        "showStatus": boolean;
        /**
          * Show last updated timestamp
          * @default true
         */
        "showTimestamp": boolean;
        /**
          * Thing ID this property belongs to
         */
        "thingId"?: string;
        /**
          * Visual style variant
          * @default 'default'
         */
        "variant": 'default' | 'compact' | 'minimal';
    }
    /**
     * Advanced slider component with reactive state management and multiple visual styles.
     * @example Basic Usage
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="50" label="Brightness"></ui-slider>
     * ```
     * @example Different Variants
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="30" label="Narrow Style"></ui-slider>
     * <ui-slider variant="wide" min="0" max="100" value="60" label="Wide Style"></ui-slider>
     * <ui-slider variant="rainbow" min="0" max="360" value="180" label="Rainbow Hue"></ui-slider>
     * <ui-slider variant="neon" min="0" max="100" value="80" label="Neon Glow"></ui-slider>
     * <ui-slider variant="stepped" step="10" min="0" max="100" value="50" label="Stepped Control"></ui-slider>
     * ```
     * @example Read-Only Mode
     * ```html
     * <ui-slider readonly="true" value="75" min="0" max="100" label="Sensor Reading"></ui-slider>
     * ```
     * @example JavaScript Integration with Multiple Sliders
     * ```javascript
     * // For single slider
     * const slider = document.querySelector('#my-slider');
     * // For multiple sliders
     * const sliders = document.querySelectorAll('ui-slider');
     * sliders.forEach(slider => {
     * slider.addEventListener('valueMsg', (e) => {
     * console.log('Slider ID:', e.detail.source);
     * console.log('New value:', e.detail.payload);
     * });
     * });
     * // Set value by ID
     * const brightnessSlider = document.getElementById('brightness-slider');
     * await brightnessSlider.setValue(75);
     * ```
     * @example HTML with IDs
     * ```html
     * <ui-slider id="brightness-slider" label="Brightness" variant="narrow" min="0" max="100"></ui-slider>
     * <ui-slider id="volume-slider" label="Volume" variant="wide" min="0" max="100"></ui-slider>
     * ```
     */
    interface UiSlider {
        /**
          * Color theme variant.
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for readonly mode
          * @default true
         */
        "connected": boolean;
        /**
          * Enable dark theme for the component. When true, uses light text on dark backgrounds.
          * @default false
         */
        "dark": boolean;
        /**
          * Whether the slider is disabled (cannot be interacted with).
          * @default false
         */
        "disabled": boolean;
        /**
          * Enable manual control interface.
          * @default false
         */
        "enableManualControl": boolean;
        /**
          * Get the current slider value with optional metadata
          * @param includeMetadata - Include last updated timestamp and status
          * @returns Promise that resolves to the current value or value with metadata
         */
        "getValue": (includeMetadata?: boolean) => Promise<number | { value: number; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Enable keyboard navigation (Arrow keys, Home, End, PageUp, PageDown). Default: true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed above the slider.
         */
        "label"?: string;
        /**
          * Maximum value of the slider.
          * @default 100
         */
        "max": number;
        /**
          * Minimum value of the slider.
          * @default 0
         */
        "min": number;
        /**
          * Orientation of the slider.
          * @default 'horizontal'
         */
        "orientation": 'horizontal' | 'vertical';
        /**
          * Whether the slider is read-only (displays value but cannot be changed).
          * @default false
         */
        "readonly": boolean;
        /**
          * Set operation status for external status management
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Consolidated setValue method with automatic Promise-based status management
         */
        "setValue": (value: number, options?: { writeOperation?: () => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; autoRetry?: { attempts: number; delay: number; }; customStatus?: "loading" | "success" | "error"; errorMessage?: string; _isRevert?: boolean; }) => Promise<boolean>;
        /**
          * Set value programmatically without triggering events (for external updates)
         */
        "setValueSilent": (value: number) => Promise<void>;
        /**
          * Show last updated timestamp when true
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Step increment for the slider.
          * @default 1
         */
        "step": number;
        /**
          * Shape of the slider thumb.
          * @default 'circle'
         */
        "thumbShape": 'circle' | 'square' | 'arrow' | 'triangle' | 'diamond';
        /**
          * Trigger a read pulse indicator for readonly mode when data is actually fetched
         */
        "triggerReadPulse": () => Promise<void>;
        /**
          * Current numeric value of the slider.
          * @default 0
         */
        "value": number;
        /**
          * Visual style variant of the slider.
          * @default 'narrow'
         */
        "variant": 'narrow' | 'wide' | 'rainbow' | 'neon' | 'stepped';
    }
    /**
     * Versatile text component supporting display, editing, and various structured formats.
     * @example Basic Usage
     * ```html
     * <ui-text value="Hello World"></ui-text>
     * ```
     * @example Editable Text
     * ```html
     * <ui-text variant="edit" value="Edit me" placeholder="Type here..."></ui-text>
     * ```
     * @example Structured Content
     * ```html
     * <ui-text structure="json" value='{"key": "value"}'></ui-text>
     * ```
     * @example Multi-line Text
     * ```html
     * <ui-text textType="multi" rows="5" expandable="true"></ui-text>
     * ```
     */
    interface UiText {
        /**
          * Color scheme for styling
          * @example ```html <ui-text color="secondary" value="Colored text"></ui-text> ```
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Dark theme variant.
          * @example ```html <ui-text dark="true" value="Dark themed text"></ui-text> ```
          * @default false
         */
        "dark": boolean;
        /**
          * Whether the component is disabled (cannot be interacted with).
          * @example ```html <ui-text disabled="true" value="Cannot edit"></ui-text> ```
          * @default false
         */
        "disabled": boolean;
        /**
          * Allow expanding/collapsing of text area
          * @default false
         */
        "expandable": boolean;
        /**
          * Enable keyboard navigation.
          * @example ```html <ui-text keyboard="false" value="No keyboard support"></ui-text> ```
          * @default true
         */
        "keyboard": boolean;
        /**
          * Label for the text component
          * @example ```html <ui-text label="Description" value="Text content"></ui-text> ```
         */
        "label"?: string;
        /**
          * Maximum height when expanded (pixels)
          * @default 200
         */
        "maxHeight": number;
        /**
          * Maximum character length
         */
        "maxLength"?: number;
        /**
          * Placeholder text for empty fields
         */
        "placeholder"?: string;
        /**
          * Whether the component is read-only (displays value but cannot be changed).
          * @example ```html <ui-text readonly="true" value="Read-only text"></ui-text> ```
          * @default false
         */
        "readonly": boolean;
        /**
          * Allow manual resizing of text area
          * @default false
         */
        "resizable": boolean;
        /**
          * Number of rows for multi-line text
          * @default 4
         */
        "rows": number;
        /**
          * Show last updated timestamp below the component.
          * @example ```html <ui-text showLastUpdated="true" value="With timestamp"></ui-text> ```
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Content structure for syntax highlighting
          * @example ```html <ui-text structure="json" value='{"formatted": true}'></ui-text> ```
          * @default 'unstructured'
         */
        "structure": 'unstructured' | 'json' | 'yaml' | 'xml' | 'markdown';
        /**
          * Text input type - 'single' for single-line, 'multi' for multi-line
          * @example ```html <ui-text textType="multi" rows="5"></ui-text> ```
          * @default 'single'
         */
        "textType": 'single' | 'multi';
        /**
          * Current text value
          * @example ```html <ui-text value="Initial text content"></ui-text> ```
          * @default ''
         */
        "value": string;
        /**
          * Display variant - 'display' for read-only, 'edit' for editable
          * @example ```html <ui-text variant="edit" value="Editable text"></ui-text> ```
          * @default 'display'
         */
        "variant": 'display' | 'edit';
    }
    /**
     * Advanced toggle switch component with reactive state management and multiple visual styles.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" value="true" label="Light"></ui-toggle>
     * ```
     * @example Different Variants
     * ```html
     * <ui-toggle variant="apple" value="false" label="iOS Style"></ui-toggle>
     * <ui-toggle variant="square" value="true" label="Square Style"></ui-toggle>
     * <ui-toggle variant="cross" value="false" label="Cross/Tick Style"></ui-toggle>
     * <ui-toggle variant="neon" value="true" label="Neon Glow"></ui-toggle>
     * ```
     * @example Read-Only Mode
     * ```html
     * <ui-toggle readonly="true" value="false" label="Sensor Status"></ui-toggle>
     * ```
     * @example JavaScript Integration with Multiple Toggles
     * ```javascript
     * // For single toggle
     * const toggle = document.querySelector('#my-toggle');
     * // For multiple toggles
     * const toggles = document.querySelectorAll('ui-toggle');
     * toggles.forEach(toggle => {
     * toggle.addEventListener('valueMsg', (e) => {
     * console.log('Toggle ID:', e.detail.source);
     * console.log('New value:', e.detail.payload);
     * });
     * });
     * // Set value by ID
     * const lightToggle = document.getElementById('light-toggle');
     * await lightToggle.setValue(true);
     * ```
     * @example HTML with IDs
     * ```html
     * <ui-toggle id="light-toggle" label="Light" variant="circle"></ui-toggle>
     * <ui-toggle id="fan-toggle" label="Fan" variant="apple"></ui-toggle>
     * ```
     */
    interface UiToggle {
        /**
          * Color theme variant.
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for readonly mode
          * @default true
         */
        "connected": boolean;
        /**
          * Enable dark theme for the component. When true, uses light text on dark backgrounds.
          * @default false
         */
        "dark": boolean;
        /**
          * Whether the toggle is disabled (cannot be interacted with).
          * @default false
         */
        "disabled": boolean;
        /**
          * Get the current toggle value with optional metadata
          * @param includeMetadata - Include last updated timestamp and status
          * @returns Promise that resolves to the current value or value with metadata
         */
        "getValue": (includeMetadata?: boolean) => Promise<boolean | { value: boolean; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Enable keyboard navigation (Space and Enter keys). Default: true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed next to the toggle.
         */
        "label"?: string;
        /**
          * Whether the toggle is read-only (displays value but cannot be changed).
          * @default false
         */
        "readonly": boolean;
        /**
          * Set operation status for external status management
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Consolidated setValue method with automatic Promise-based status management
         */
        "setValue": (value: boolean, options?: { writeOperation?: () => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; autoRetry?: { attempts: number; delay: number; }; customStatus?: "loading" | "success" | "error"; errorMessage?: string; _isRevert?: boolean; }) => Promise<boolean>;
        /**
          * Set value programmatically without triggering events (for external updates)
         */
        "setValueSilent": (value: boolean) => Promise<void>;
        /**
          * Show last updated timestamp when true
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Trigger a read pulse indicator for readonly mode when data is actually fetched
         */
        "triggerReadPulse": () => Promise<void>;
        /**
          * Current boolean value of the toggle.
          * @default false
         */
        "value": boolean;
        /**
          * Visual style variant of the toggle.
          * @default 'circle'
         */
        "variant": 'circle' | 'square' | 'apple' | 'cross' | 'neon';
    }
}
export interface UiButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiButtonElement;
}
export interface UiCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiCalendarElement;
}
export interface UiCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiCheckboxElement;
}
export interface UiNumberPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiNumberPickerElement;
}
export interface UiPropertyCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiPropertyCardElement;
}
export interface UiSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiSliderElement;
}
export interface UiTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiTextElement;
}
export interface UiToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiToggleElement;
}
declare global {
    interface HTMLUiButtonElementEventMap {
        "buttonClick": UiButtonClick;
        "valueMsg": UiMsg<string>;
    }
    /**
     * Button component with various visual styles, matching the ui-number-picker design family.
     * Supports the same variants, colors, and themes as the number picker.
     * @example Basic Usage
     * ```html
     * <ui-button variant="minimal" label="Click Me"></ui-button>
     * ```
     * @example Different Variants
     * ```html
     * <ui-button variant="outlined" color="primary" label="Outlined Button"></ui-button>
     * <ui-button variant="filled" color="secondary" label="Filled Button"></ui-button>
     * ```
     * @example Custom Click Handler
     * ```html
     * <ui-button on-click="handleButtonClick" label="Custom Handler"></ui-button>
     * ```
     * @example Event Handling
     * ```javascript
     * window.handleButtonClick = function(data) {
     * console.log('Button clicked:', data.label);
     * // Your custom logic here
     * };
     * ```
     */
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiButtonElementEventMap>(type: K, listener: (this: HTMLUiButtonElement, ev: UiButtonCustomEvent<HTMLUiButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiButtonElementEventMap>(type: K, listener: (this: HTMLUiButtonElement, ev: UiButtonCustomEvent<HTMLUiButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiCalendarElementEventMap {
        "dateChange": UiCalendarDateChange;
        "valueChange": UiCalendarValueChange;
    }
    /**
     * Calendar component for date-time selection with various visual styles and TD integration.
     * Link a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-calendar variant="outlined" color="primary" label="Select Date"></ui-calendar>
     * ```
     * @example TD Integration
     * ```html
     * <ui-calendar
     * td-url="http://device.local/properties/schedule"
     * variant="filled"
     * label="Device Schedule"
     * include-time="true">
     * </ui-calendar>
     * ```
     */
    interface HTMLUiCalendarElement extends Components.UiCalendar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiCalendarElementEventMap>(type: K, listener: (this: HTMLUiCalendarElement, ev: UiCalendarCustomEvent<HTMLUiCalendarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiCalendarElementEventMap>(type: K, listener: (this: HTMLUiCalendarElement, ev: UiCalendarCustomEvent<HTMLUiCalendarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiCalendarElement: {
        prototype: HTMLUiCalendarElement;
        new (): HTMLUiCalendarElement;
    };
    interface HTMLUiCheckboxElementEventMap {
        "valueMsg": UiMsg<boolean>;
    }
    /**
     * Advanced checkbox component with reactive state management and multiple visual styles.
     * @example Basic Usage
     * ```html
     * <ui-checkbox variant="outlined" value="true" label="Accept Terms"></ui-checkbox>
     * ```
     * @example Different Variants
     * ```html
     * <ui-checkbox variant="minimal" value="false" label="Minimal Style"></ui-checkbox>
     * <ui-checkbox variant="outlined" value="true" label="Outlined Style"></ui-checkbox>
     * <ui-checkbox variant="filled" value="false" label="Filled Style"></ui-checkbox>
     * ```
     * @example Read-Only Mode
     * ```html
     * <ui-checkbox readonly="true" value="false" label="Sensor Status"></ui-checkbox>
     * ```
     * @example JavaScript Integration with Multiple Checkboxes
     * ```javascript
     * // For single checkbox
     * const checkbox = document.querySelector('#my-checkbox');
     * // For multiple checkboxes
     * const checkboxes = document.querySelectorAll('ui-checkbox');
     * checkboxes.forEach(checkbox => {
     * checkbox.addEventListener('valueMsg', (e) => {
     * console.log('Checkbox ID:', e.detail.source);
     * console.log('New value:', e.detail.payload);
     * });
     * });
     * // Set value by ID
     * const termsCheckbox = document.getElementById('terms-checkbox');
     * await termsCheckbox.setValue(true);
     * ```
     * @example HTML with IDs
     * ```html
     * <ui-checkbox id="terms-checkbox" label="Accept Terms" variant="outlined"></ui-checkbox>
     * <ui-checkbox id="newsletter-checkbox" label="Subscribe to Newsletter" variant="filled"></ui-checkbox>
     * ```
     */
    interface HTMLUiCheckboxElement extends Components.UiCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiCheckboxElementEventMap>(type: K, listener: (this: HTMLUiCheckboxElement, ev: UiCheckboxCustomEvent<HTMLUiCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiCheckboxElementEventMap>(type: K, listener: (this: HTMLUiCheckboxElement, ev: UiCheckboxCustomEvent<HTMLUiCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiCheckboxElement: {
        prototype: HTMLUiCheckboxElement;
        new (): HTMLUiCheckboxElement;
    };
    interface HTMLUiNumberPickerElementEventMap {
        "valueMsg": UiMsg<number>;
        "valueChange": UiNumberPickerValueChange;
    }
    /**
     * Number picker component with various visual styles, TD integration and customizable range.
     * Supports increment/decrement buttons with Thing Description integration for IoT devices.
     * @example Basic Usage
     * ```html
     * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
     * ```
     * @example TD Integration with HTTP
     * ```html
     * <ui-number-picker
     * td-url="http://device.local/properties/volume"
     * label="Device Volume"
     * protocol="http"
     * mode="readwrite"
     * min="0"
     * max="100">
     * </ui-number-picker>
     * ```
     * @example TD Integration with MQTT
     * ```html
     * <ui-number-picker
     * td-url="mqtt://device"
     * mqtt-host="localhost:1883"
     * mqtt-topic="device/volume"
     * label="MQTT Volume"
     * protocol="mqtt"
     * mode="readwrite">
     * </ui-number-picker>
     * ```
     * @example TD Device Read-Only (shows value only)
     * ```html
     * <ui-number-picker
     * td-url="http://sensor.local/temperature"
     * label="Temperature Sensor"
     * mode="read">
     * </ui-number-picker>
     * ```
     * @example Local Control with Custom Handler
     * ```html
     * <ui-number-picker
     * value="3"
     * on-change="handleNumberChange"
     * variant="filled"
     * label="Custom Counter">
     * </ui-number-picker>
     * ```
     * @example Event Handling
     * ```javascript
     * window.handleNumberChange = function(data) {
     * console.log('Number changed:', data.value);
     * console.log('Label:', data.label);
     * // Your custom logic here
     * };
     * ```
     */
    interface HTMLUiNumberPickerElement extends Components.UiNumberPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiNumberPickerElementEventMap>(type: K, listener: (this: HTMLUiNumberPickerElement, ev: UiNumberPickerCustomEvent<HTMLUiNumberPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiNumberPickerElementEventMap>(type: K, listener: (this: HTMLUiNumberPickerElement, ev: UiNumberPickerCustomEvent<HTMLUiNumberPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiNumberPickerElement: {
        prototype: HTMLUiNumberPickerElement;
        new (): HTMLUiNumberPickerElement;
    };
    interface HTMLUiPropertyCardElementEventMap {
        "propertyAction": {
    action: 'read' | 'write' | 'observe' | 'unobserve';
    thingId?: string;
    property?: string;
    value?: any;
  };
    }
    /**
     * Smart wrapper for TD properties that provides visual feedback, status indicators,
     * and handles the connection between UI controls and Thing Description properties.
     * @example Basic usage with toggle:
     * ```html
     * <ui-property-card property="on" thing-id="light-1" label="Living Room Light">
     *   <ui-toggle slot="control" value="false"></ui-toggle>
     * </ui-property-card>
     * ```
     */
    interface HTMLUiPropertyCardElement extends Components.UiPropertyCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiPropertyCardElementEventMap>(type: K, listener: (this: HTMLUiPropertyCardElement, ev: UiPropertyCardCustomEvent<HTMLUiPropertyCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiPropertyCardElementEventMap>(type: K, listener: (this: HTMLUiPropertyCardElement, ev: UiPropertyCardCustomEvent<HTMLUiPropertyCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiPropertyCardElement: {
        prototype: HTMLUiPropertyCardElement;
        new (): HTMLUiPropertyCardElement;
    };
    interface HTMLUiSliderElementEventMap {
        "valueMsg": UiMsg<number>;
    }
    /**
     * Advanced slider component with reactive state management and multiple visual styles.
     * @example Basic Usage
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="50" label="Brightness"></ui-slider>
     * ```
     * @example Different Variants
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="30" label="Narrow Style"></ui-slider>
     * <ui-slider variant="wide" min="0" max="100" value="60" label="Wide Style"></ui-slider>
     * <ui-slider variant="rainbow" min="0" max="360" value="180" label="Rainbow Hue"></ui-slider>
     * <ui-slider variant="neon" min="0" max="100" value="80" label="Neon Glow"></ui-slider>
     * <ui-slider variant="stepped" step="10" min="0" max="100" value="50" label="Stepped Control"></ui-slider>
     * ```
     * @example Read-Only Mode
     * ```html
     * <ui-slider readonly="true" value="75" min="0" max="100" label="Sensor Reading"></ui-slider>
     * ```
     * @example JavaScript Integration with Multiple Sliders
     * ```javascript
     * // For single slider
     * const slider = document.querySelector('#my-slider');
     * // For multiple sliders
     * const sliders = document.querySelectorAll('ui-slider');
     * sliders.forEach(slider => {
     * slider.addEventListener('valueMsg', (e) => {
     * console.log('Slider ID:', e.detail.source);
     * console.log('New value:', e.detail.payload);
     * });
     * });
     * // Set value by ID
     * const brightnessSlider = document.getElementById('brightness-slider');
     * await brightnessSlider.setValue(75);
     * ```
     * @example HTML with IDs
     * ```html
     * <ui-slider id="brightness-slider" label="Brightness" variant="narrow" min="0" max="100"></ui-slider>
     * <ui-slider id="volume-slider" label="Volume" variant="wide" min="0" max="100"></ui-slider>
     * ```
     */
    interface HTMLUiSliderElement extends Components.UiSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiSliderElementEventMap>(type: K, listener: (this: HTMLUiSliderElement, ev: UiSliderCustomEvent<HTMLUiSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiSliderElementEventMap>(type: K, listener: (this: HTMLUiSliderElement, ev: UiSliderCustomEvent<HTMLUiSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiSliderElement: {
        prototype: HTMLUiSliderElement;
        new (): HTMLUiSliderElement;
    };
    interface HTMLUiTextElementEventMap {
        "textChange": UiTextValueChange;
        "valueChange": UiTextValueChange;
    }
    /**
     * Versatile text component supporting display, editing, and various structured formats.
     * @example Basic Usage
     * ```html
     * <ui-text value="Hello World"></ui-text>
     * ```
     * @example Editable Text
     * ```html
     * <ui-text variant="edit" value="Edit me" placeholder="Type here..."></ui-text>
     * ```
     * @example Structured Content
     * ```html
     * <ui-text structure="json" value='{"key": "value"}'></ui-text>
     * ```
     * @example Multi-line Text
     * ```html
     * <ui-text textType="multi" rows="5" expandable="true"></ui-text>
     * ```
     */
    interface HTMLUiTextElement extends Components.UiText, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiTextElementEventMap>(type: K, listener: (this: HTMLUiTextElement, ev: UiTextCustomEvent<HTMLUiTextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiTextElementEventMap>(type: K, listener: (this: HTMLUiTextElement, ev: UiTextCustomEvent<HTMLUiTextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiTextElement: {
        prototype: HTMLUiTextElement;
        new (): HTMLUiTextElement;
    };
    interface HTMLUiToggleElementEventMap {
        "valueMsg": UiMsg<boolean>;
    }
    /**
     * Advanced toggle switch component with reactive state management and multiple visual styles.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" value="true" label="Light"></ui-toggle>
     * ```
     * @example Different Variants
     * ```html
     * <ui-toggle variant="apple" value="false" label="iOS Style"></ui-toggle>
     * <ui-toggle variant="square" value="true" label="Square Style"></ui-toggle>
     * <ui-toggle variant="cross" value="false" label="Cross/Tick Style"></ui-toggle>
     * <ui-toggle variant="neon" value="true" label="Neon Glow"></ui-toggle>
     * ```
     * @example Read-Only Mode
     * ```html
     * <ui-toggle readonly="true" value="false" label="Sensor Status"></ui-toggle>
     * ```
     * @example JavaScript Integration with Multiple Toggles
     * ```javascript
     * // For single toggle
     * const toggle = document.querySelector('#my-toggle');
     * // For multiple toggles
     * const toggles = document.querySelectorAll('ui-toggle');
     * toggles.forEach(toggle => {
     * toggle.addEventListener('valueMsg', (e) => {
     * console.log('Toggle ID:', e.detail.source);
     * console.log('New value:', e.detail.payload);
     * });
     * });
     * // Set value by ID
     * const lightToggle = document.getElementById('light-toggle');
     * await lightToggle.setValue(true);
     * ```
     * @example HTML with IDs
     * ```html
     * <ui-toggle id="light-toggle" label="Light" variant="circle"></ui-toggle>
     * <ui-toggle id="fan-toggle" label="Fan" variant="apple"></ui-toggle>
     * ```
     */
    interface HTMLUiToggleElement extends Components.UiToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiToggleElementEventMap>(type: K, listener: (this: HTMLUiToggleElement, ev: UiToggleCustomEvent<HTMLUiToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiToggleElementEventMap>(type: K, listener: (this: HTMLUiToggleElement, ev: UiToggleCustomEvent<HTMLUiToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiToggleElement: {
        prototype: HTMLUiToggleElement;
        new (): HTMLUiToggleElement;
    };
    interface HTMLElementTagNameMap {
        "ui-button": HTMLUiButtonElement;
        "ui-calendar": HTMLUiCalendarElement;
        "ui-checkbox": HTMLUiCheckboxElement;
        "ui-number-picker": HTMLUiNumberPickerElement;
        "ui-property-card": HTMLUiPropertyCardElement;
        "ui-slider": HTMLUiSliderElement;
        "ui-text": HTMLUiTextElement;
        "ui-toggle": HTMLUiToggleElement;
    }
}
declare namespace LocalJSX {
    /**
     * Button component with various visual styles, matching the ui-number-picker design family.
     * Supports the same variants, colors, and themes as the number picker.
     * @example Basic Usage
     * ```html
     * <ui-button variant="minimal" label="Click Me"></ui-button>
     * ```
     * @example Different Variants
     * ```html
     * <ui-button variant="outlined" color="primary" label="Outlined Button"></ui-button>
     * <ui-button variant="filled" color="secondary" label="Filled Button"></ui-button>
     * ```
     * @example Custom Click Handler
     * ```html
     * <ui-button on-click="handleButtonClick" label="Custom Handler"></ui-button>
     * ```
     * @example Event Handling
     * ```javascript
     * window.handleButtonClick = function(data) {
     * console.log('Button clicked:', data.label);
     * // Your custom logic here
     * };
     * ```
     */
    interface UiButton {
        /**
          * Color scheme to match thingsweb webpage
          * @example ```html <ui-button color="secondary" label="Colored Button"></ui-button> ```
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Dark theme variant.
          * @example ```html <ui-button dark="true" label="Dark Button"></ui-button> ```
          * @default false
         */
        "dark"?: boolean;
        /**
          * Whether the component is disabled (cannot be interacted with).
          * @example ```html <ui-button disabled="true" label="Cannot Click"></ui-button> ```
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable keyboard navigation.
          * @example ```html <ui-button keyboard="false" label="No Keyboard"></ui-button> ```
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Button text label.
          * @example ```html <ui-button label="Click Me"></ui-button> ```
          * @default 'Button'
         */
        "label"?: string;
        /**
          * Event emitted when button is clicked
         */
        "onButtonClick"?: (event: UiButtonCustomEvent<UiButtonClick>) => void;
        /**
          * Primary event emitted when the component value changes. Use this event for all value change handling.
          * @example ```javascript document.querySelector('ui-button').addEventListener('valueMsg', (event) => {   console.log('Button clicked:', event.detail); }); ```
         */
        "onValueMsg"?: (event: UiButtonCustomEvent<UiMsg<string>>) => void;
        /**
          * Whether the component is read-only (displays value but cannot be changed).
          * @example ```html <ui-button readonly="true" label="Display Only"></ui-button> ```
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Show last updated timestamp below the component.
          * @example ```html <ui-button showLastUpdated="true" label="With Timestamp"></ui-button> ```
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Visual style variant of the button. - minimal: Clean button with subtle background (default) - outlined: Button with border outline - filled: Solid filled button
          * @default 'minimal'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Calendar component for date-time selection with various visual styles and TD integration.
     * Link a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-calendar variant="outlined" color="primary" label="Select Date"></ui-calendar>
     * ```
     * @example TD Integration
     * ```html
     * <ui-calendar
     * td-url="http://device.local/properties/schedule"
     * variant="filled"
     * label="Device Schedule"
     * include-time="true">
     * </ui-calendar>
     * ```
     */
    interface UiCalendar {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Include time picker alongside date picker.
          * @default false
         */
        "includeTime"?: boolean;
        /**
          * Optional text label for the calendar.
         */
        "label"?: string;
        /**
          * Maximum selectable date (ISO string).
         */
        "maxDate"?: string;
        /**
          * Minimum selectable date (ISO string).
         */
        "minDate"?: string;
        /**
          * Event emitted when date changes
         */
        "onDateChange"?: (event: UiCalendarCustomEvent<UiCalendarDateChange>) => void;
        /**
          * Standardized valueChange event for calendar
         */
        "onValueChange"?: (event: UiCalendarCustomEvent<UiCalendarValueChange>) => void;
        /**
          * Current state of the calendar. - disabled: Calendar cannot be interacted with - default: Calendar is interactive (default)
          * @default 'default'
         */
        "state"?: 'disabled' | 'default';
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * Current selected date-time value (ISO string).
         */
        "value"?: string;
        /**
          * Visual style variant of the calendar. - minimal: Clean minimal design (default) - outlined: Border with background - filled: Solid background
          * @default 'minimal'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Advanced checkbox component with reactive state management and multiple visual styles.
     * @example Basic Usage
     * ```html
     * <ui-checkbox variant="outlined" value="true" label="Accept Terms"></ui-checkbox>
     * ```
     * @example Different Variants
     * ```html
     * <ui-checkbox variant="minimal" value="false" label="Minimal Style"></ui-checkbox>
     * <ui-checkbox variant="outlined" value="true" label="Outlined Style"></ui-checkbox>
     * <ui-checkbox variant="filled" value="false" label="Filled Style"></ui-checkbox>
     * ```
     * @example Read-Only Mode
     * ```html
     * <ui-checkbox readonly="true" value="false" label="Sensor Status"></ui-checkbox>
     * ```
     * @example JavaScript Integration with Multiple Checkboxes
     * ```javascript
     * // For single checkbox
     * const checkbox = document.querySelector('#my-checkbox');
     * // For multiple checkboxes
     * const checkboxes = document.querySelectorAll('ui-checkbox');
     * checkboxes.forEach(checkbox => {
     * checkbox.addEventListener('valueMsg', (e) => {
     * console.log('Checkbox ID:', e.detail.source);
     * console.log('New value:', e.detail.payload);
     * });
     * });
     * // Set value by ID
     * const termsCheckbox = document.getElementById('terms-checkbox');
     * await termsCheckbox.setValue(true);
     * ```
     * @example HTML with IDs
     * ```html
     * <ui-checkbox id="terms-checkbox" label="Accept Terms" variant="outlined"></ui-checkbox>
     * <ui-checkbox id="newsletter-checkbox" label="Subscribe to Newsletter" variant="filled"></ui-checkbox>
     * ```
     */
    interface UiCheckbox {
        /**
          * Color theme variant.
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for readonly mode
          * @default true
         */
        "connected"?: boolean;
        /**
          * Enable dark theme for the component. When true, uses light text on dark backgrounds.
          * @default false
         */
        "dark"?: boolean;
        /**
          * Whether the checkbox is disabled (cannot be interacted with).
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable keyboard navigation (Space and Enter keys). Default: true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed next to the checkbox.
         */
        "label"?: string;
        /**
          * Primary event emitted when the checkbox value changes.
         */
        "onValueMsg"?: (event: UiCheckboxCustomEvent<UiMsg<boolean>>) => void;
        /**
          * Whether the checkbox is read-only (displays value but cannot be changed).
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Show last updated timestamp when true
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Current boolean value of the checkbox.
          * @default false
         */
        "value"?: boolean;
        /**
          * Visual style variant of the checkbox.
          * @default 'outlined'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Number picker component with various visual styles, TD integration and customizable range.
     * Supports increment/decrement buttons with Thing Description integration for IoT devices.
     * @example Basic Usage
     * ```html
     * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
     * ```
     * @example TD Integration with HTTP
     * ```html
     * <ui-number-picker
     * td-url="http://device.local/properties/volume"
     * label="Device Volume"
     * protocol="http"
     * mode="readwrite"
     * min="0"
     * max="100">
     * </ui-number-picker>
     * ```
     * @example TD Integration with MQTT
     * ```html
     * <ui-number-picker
     * td-url="mqtt://device"
     * mqtt-host="localhost:1883"
     * mqtt-topic="device/volume"
     * label="MQTT Volume"
     * protocol="mqtt"
     * mode="readwrite">
     * </ui-number-picker>
     * ```
     * @example TD Device Read-Only (shows value only)
     * ```html
     * <ui-number-picker
     * td-url="http://sensor.local/temperature"
     * label="Temperature Sensor"
     * mode="read">
     * </ui-number-picker>
     * ```
     * @example Local Control with Custom Handler
     * ```html
     * <ui-number-picker
     * value="3"
     * on-change="handleNumberChange"
     * variant="filled"
     * label="Custom Counter">
     * </ui-number-picker>
     * ```
     * @example Event Handling
     * ```javascript
     * window.handleNumberChange = function(data) {
     * console.log('Number changed:', data.value);
     * console.log('Label:', data.label);
     * // Your custom logic here
     * };
     * ```
     */
    interface UiNumberPicker {
        /**
          * Color theme variant.
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for readonly mode
          * @default true
         */
        "connected"?: boolean;
        /**
          * Enable dark theme for the component. When true, uses light text on dark backgrounds.
          * @default false
         */
        "dark"?: boolean;
        /**
          * Whether the number picker is disabled (cannot be interacted with).
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable keyboard navigation (Arrow keys). Default: true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed above the number picker.
         */
        "label"?: string;
        /**
          * Maximum allowed value.
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum allowed value.
          * @default 0
         */
        "min"?: number;
        /**
          * Device interaction mode. - read: Only read from device (display current value, no interaction) - write: Only write to device (control device but don't sync state) - readwrite: Read and write (full synchronization) - default
          * @default 'readwrite'
         */
        "mode"?: 'read' | 'write' | 'readwrite';
        /**
          * Event emitted when value changes
         */
        "onValueChange"?: (event: UiNumberPickerCustomEvent<UiNumberPickerValueChange>) => void;
        /**
          * Primary event emitted when the number picker value changes.
         */
        "onValueMsg"?: (event: UiNumberPickerCustomEvent<UiMsg<number>>) => void;
        /**
          * Whether the number picker is read-only (displays value but cannot be changed).
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Show last updated timestamp when true
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Step increment/decrement amount.
          * @default 1
         */
        "step"?: number;
        /**
          * Current numeric value of the number picker.
          * @default 0
         */
        "value"?: number;
        /**
          * Visual style variant of the number picker. - minimal: Clean buttons with subtle background (default) - outlined: Buttons with border outline - filled: Solid filled buttons
          * @default 'minimal'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Smart wrapper for TD properties that provides visual feedback, status indicators,
     * and handles the connection between UI controls and Thing Description properties.
     * @example Basic usage with toggle:
     * ```html
     * <ui-property-card property="on" thing-id="light-1" label="Living Room Light">
     *   <ui-toggle slot="control" value="false"></ui-toggle>
     * </ui-property-card>
     * ```
     */
    interface UiPropertyCard {
        /**
          * Description text for the property
         */
        "description"?: string;
        /**
          * Display label for the property
         */
        "label"?: string;
        /**
          * Emitted when a control action should be performed (read, write, observe)
         */
        "onPropertyAction"?: (event: UiPropertyCardCustomEvent<{
    action: 'read' | 'write' | 'observe' | 'unobserve';
    thingId?: string;
    property?: string;
    value?: any;
  }>) => void;
        /**
          * Property name from the Thing Description
         */
        "property"?: string;
        /**
          * Property schema from Thing Description (for capability detection)
         */
        "schema"?: any;
        /**
          * Show capability badge (read-only, write-only, etc.)
          * @default true
         */
        "showCapabilityBadge"?: boolean;
        /**
          * Show status indicator (success, error, pending)
          * @default true
         */
        "showStatus"?: boolean;
        /**
          * Show last updated timestamp
          * @default true
         */
        "showTimestamp"?: boolean;
        /**
          * Thing ID this property belongs to
         */
        "thingId"?: string;
        /**
          * Visual style variant
          * @default 'default'
         */
        "variant"?: 'default' | 'compact' | 'minimal';
    }
    /**
     * Advanced slider component with reactive state management and multiple visual styles.
     * @example Basic Usage
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="50" label="Brightness"></ui-slider>
     * ```
     * @example Different Variants
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="30" label="Narrow Style"></ui-slider>
     * <ui-slider variant="wide" min="0" max="100" value="60" label="Wide Style"></ui-slider>
     * <ui-slider variant="rainbow" min="0" max="360" value="180" label="Rainbow Hue"></ui-slider>
     * <ui-slider variant="neon" min="0" max="100" value="80" label="Neon Glow"></ui-slider>
     * <ui-slider variant="stepped" step="10" min="0" max="100" value="50" label="Stepped Control"></ui-slider>
     * ```
     * @example Read-Only Mode
     * ```html
     * <ui-slider readonly="true" value="75" min="0" max="100" label="Sensor Reading"></ui-slider>
     * ```
     * @example JavaScript Integration with Multiple Sliders
     * ```javascript
     * // For single slider
     * const slider = document.querySelector('#my-slider');
     * // For multiple sliders
     * const sliders = document.querySelectorAll('ui-slider');
     * sliders.forEach(slider => {
     * slider.addEventListener('valueMsg', (e) => {
     * console.log('Slider ID:', e.detail.source);
     * console.log('New value:', e.detail.payload);
     * });
     * });
     * // Set value by ID
     * const brightnessSlider = document.getElementById('brightness-slider');
     * await brightnessSlider.setValue(75);
     * ```
     * @example HTML with IDs
     * ```html
     * <ui-slider id="brightness-slider" label="Brightness" variant="narrow" min="0" max="100"></ui-slider>
     * <ui-slider id="volume-slider" label="Volume" variant="wide" min="0" max="100"></ui-slider>
     * ```
     */
    interface UiSlider {
        /**
          * Color theme variant.
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for readonly mode
          * @default true
         */
        "connected"?: boolean;
        /**
          * Enable dark theme for the component. When true, uses light text on dark backgrounds.
          * @default false
         */
        "dark"?: boolean;
        /**
          * Whether the slider is disabled (cannot be interacted with).
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable manual control interface.
          * @default false
         */
        "enableManualControl"?: boolean;
        /**
          * Enable keyboard navigation (Arrow keys, Home, End, PageUp, PageDown). Default: true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed above the slider.
         */
        "label"?: string;
        /**
          * Maximum value of the slider.
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum value of the slider.
          * @default 0
         */
        "min"?: number;
        /**
          * Primary event emitted when the slider value changes.
         */
        "onValueMsg"?: (event: UiSliderCustomEvent<UiMsg<number>>) => void;
        /**
          * Orientation of the slider.
          * @default 'horizontal'
         */
        "orientation"?: 'horizontal' | 'vertical';
        /**
          * Whether the slider is read-only (displays value but cannot be changed).
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Show last updated timestamp when true
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Step increment for the slider.
          * @default 1
         */
        "step"?: number;
        /**
          * Shape of the slider thumb.
          * @default 'circle'
         */
        "thumbShape"?: 'circle' | 'square' | 'arrow' | 'triangle' | 'diamond';
        /**
          * Current numeric value of the slider.
          * @default 0
         */
        "value"?: number;
        /**
          * Visual style variant of the slider.
          * @default 'narrow'
         */
        "variant"?: 'narrow' | 'wide' | 'rainbow' | 'neon' | 'stepped';
    }
    /**
     * Versatile text component supporting display, editing, and various structured formats.
     * @example Basic Usage
     * ```html
     * <ui-text value="Hello World"></ui-text>
     * ```
     * @example Editable Text
     * ```html
     * <ui-text variant="edit" value="Edit me" placeholder="Type here..."></ui-text>
     * ```
     * @example Structured Content
     * ```html
     * <ui-text structure="json" value='{"key": "value"}'></ui-text>
     * ```
     * @example Multi-line Text
     * ```html
     * <ui-text textType="multi" rows="5" expandable="true"></ui-text>
     * ```
     */
    interface UiText {
        /**
          * Color scheme for styling
          * @example ```html <ui-text color="secondary" value="Colored text"></ui-text> ```
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Dark theme variant.
          * @example ```html <ui-text dark="true" value="Dark themed text"></ui-text> ```
          * @default false
         */
        "dark"?: boolean;
        /**
          * Whether the component is disabled (cannot be interacted with).
          * @example ```html <ui-text disabled="true" value="Cannot edit"></ui-text> ```
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Allow expanding/collapsing of text area
          * @default false
         */
        "expandable"?: boolean;
        /**
          * Enable keyboard navigation.
          * @example ```html <ui-text keyboard="false" value="No keyboard support"></ui-text> ```
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Label for the text component
          * @example ```html <ui-text label="Description" value="Text content"></ui-text> ```
         */
        "label"?: string;
        /**
          * Maximum height when expanded (pixels)
          * @default 200
         */
        "maxHeight"?: number;
        /**
          * Maximum character length
         */
        "maxLength"?: number;
        "onTextChange"?: (event: UiTextCustomEvent<UiTextValueChange>) => void;
        "onValueChange"?: (event: UiTextCustomEvent<UiTextValueChange>) => void;
        /**
          * Placeholder text for empty fields
         */
        "placeholder"?: string;
        /**
          * Whether the component is read-only (displays value but cannot be changed).
          * @example ```html <ui-text readonly="true" value="Read-only text"></ui-text> ```
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Allow manual resizing of text area
          * @default false
         */
        "resizable"?: boolean;
        /**
          * Number of rows for multi-line text
          * @default 4
         */
        "rows"?: number;
        /**
          * Show last updated timestamp below the component.
          * @example ```html <ui-text showLastUpdated="true" value="With timestamp"></ui-text> ```
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Content structure for syntax highlighting
          * @example ```html <ui-text structure="json" value='{"formatted": true}'></ui-text> ```
          * @default 'unstructured'
         */
        "structure"?: 'unstructured' | 'json' | 'yaml' | 'xml' | 'markdown';
        /**
          * Text input type - 'single' for single-line, 'multi' for multi-line
          * @example ```html <ui-text textType="multi" rows="5"></ui-text> ```
          * @default 'single'
         */
        "textType"?: 'single' | 'multi';
        /**
          * Current text value
          * @example ```html <ui-text value="Initial text content"></ui-text> ```
          * @default ''
         */
        "value"?: string;
        /**
          * Display variant - 'display' for read-only, 'edit' for editable
          * @example ```html <ui-text variant="edit" value="Editable text"></ui-text> ```
          * @default 'display'
         */
        "variant"?: 'display' | 'edit';
    }
    /**
     * Advanced toggle switch component with reactive state management and multiple visual styles.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" value="true" label="Light"></ui-toggle>
     * ```
     * @example Different Variants
     * ```html
     * <ui-toggle variant="apple" value="false" label="iOS Style"></ui-toggle>
     * <ui-toggle variant="square" value="true" label="Square Style"></ui-toggle>
     * <ui-toggle variant="cross" value="false" label="Cross/Tick Style"></ui-toggle>
     * <ui-toggle variant="neon" value="true" label="Neon Glow"></ui-toggle>
     * ```
     * @example Read-Only Mode
     * ```html
     * <ui-toggle readonly="true" value="false" label="Sensor Status"></ui-toggle>
     * ```
     * @example JavaScript Integration with Multiple Toggles
     * ```javascript
     * // For single toggle
     * const toggle = document.querySelector('#my-toggle');
     * // For multiple toggles
     * const toggles = document.querySelectorAll('ui-toggle');
     * toggles.forEach(toggle => {
     * toggle.addEventListener('valueMsg', (e) => {
     * console.log('Toggle ID:', e.detail.source);
     * console.log('New value:', e.detail.payload);
     * });
     * });
     * // Set value by ID
     * const lightToggle = document.getElementById('light-toggle');
     * await lightToggle.setValue(true);
     * ```
     * @example HTML with IDs
     * ```html
     * <ui-toggle id="light-toggle" label="Light" variant="circle"></ui-toggle>
     * <ui-toggle id="fan-toggle" label="Fan" variant="apple"></ui-toggle>
     * ```
     */
    interface UiToggle {
        /**
          * Color theme variant.
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for readonly mode
          * @default true
         */
        "connected"?: boolean;
        /**
          * Enable dark theme for the component. When true, uses light text on dark backgrounds.
          * @default false
         */
        "dark"?: boolean;
        /**
          * Whether the toggle is disabled (cannot be interacted with).
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable keyboard navigation (Space and Enter keys). Default: true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed next to the toggle.
         */
        "label"?: string;
        /**
          * Primary event emitted when the toggle value changes.
         */
        "onValueMsg"?: (event: UiToggleCustomEvent<UiMsg<boolean>>) => void;
        /**
          * Whether the toggle is read-only (displays value but cannot be changed).
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Show last updated timestamp when true
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Current boolean value of the toggle.
          * @default false
         */
        "value"?: boolean;
        /**
          * Visual style variant of the toggle.
          * @default 'circle'
         */
        "variant"?: 'circle' | 'square' | 'apple' | 'cross' | 'neon';
    }
    interface IntrinsicElements {
        "ui-button": UiButton;
        "ui-calendar": UiCalendar;
        "ui-checkbox": UiCheckbox;
        "ui-number-picker": UiNumberPicker;
        "ui-property-card": UiPropertyCard;
        "ui-slider": UiSlider;
        "ui-text": UiText;
        "ui-toggle": UiToggle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * Button component with various visual styles, matching the ui-number-picker design family.
             * Supports the same variants, colors, and themes as the number picker.
             * @example Basic Usage
             * ```html
             * <ui-button variant="minimal" label="Click Me"></ui-button>
             * ```
             * @example Different Variants
             * ```html
             * <ui-button variant="outlined" color="primary" label="Outlined Button"></ui-button>
             * <ui-button variant="filled" color="secondary" label="Filled Button"></ui-button>
             * ```
             * @example Custom Click Handler
             * ```html
             * <ui-button on-click="handleButtonClick" label="Custom Handler"></ui-button>
             * ```
             * @example Event Handling
             * ```javascript
             * window.handleButtonClick = function(data) {
             * console.log('Button clicked:', data.label);
             * // Your custom logic here
             * };
             * ```
             */
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            /**
             * Calendar component for date-time selection with various visual styles and TD integration.
             * Link a direct property URL for plug-and-play device control.
             * @example Basic Usage
             * ```html
             * <ui-calendar variant="outlined" color="primary" label="Select Date"></ui-calendar>
             * ```
             * @example TD Integration
             * ```html
             * <ui-calendar
             * td-url="http://device.local/properties/schedule"
             * variant="filled"
             * label="Device Schedule"
             * include-time="true">
             * </ui-calendar>
             * ```
             */
            "ui-calendar": LocalJSX.UiCalendar & JSXBase.HTMLAttributes<HTMLUiCalendarElement>;
            /**
             * Advanced checkbox component with reactive state management and multiple visual styles.
             * @example Basic Usage
             * ```html
             * <ui-checkbox variant="outlined" value="true" label="Accept Terms"></ui-checkbox>
             * ```
             * @example Different Variants
             * ```html
             * <ui-checkbox variant="minimal" value="false" label="Minimal Style"></ui-checkbox>
             * <ui-checkbox variant="outlined" value="true" label="Outlined Style"></ui-checkbox>
             * <ui-checkbox variant="filled" value="false" label="Filled Style"></ui-checkbox>
             * ```
             * @example Read-Only Mode
             * ```html
             * <ui-checkbox readonly="true" value="false" label="Sensor Status"></ui-checkbox>
             * ```
             * @example JavaScript Integration with Multiple Checkboxes
             * ```javascript
             * // For single checkbox
             * const checkbox = document.querySelector('#my-checkbox');
             * // For multiple checkboxes
             * const checkboxes = document.querySelectorAll('ui-checkbox');
             * checkboxes.forEach(checkbox => {
             * checkbox.addEventListener('valueMsg', (e) => {
             * console.log('Checkbox ID:', e.detail.source);
             * console.log('New value:', e.detail.payload);
             * });
             * });
             * // Set value by ID
             * const termsCheckbox = document.getElementById('terms-checkbox');
             * await termsCheckbox.setValue(true);
             * ```
             * @example HTML with IDs
             * ```html
             * <ui-checkbox id="terms-checkbox" label="Accept Terms" variant="outlined"></ui-checkbox>
             * <ui-checkbox id="newsletter-checkbox" label="Subscribe to Newsletter" variant="filled"></ui-checkbox>
             * ```
             */
            "ui-checkbox": LocalJSX.UiCheckbox & JSXBase.HTMLAttributes<HTMLUiCheckboxElement>;
            /**
             * Number picker component with various visual styles, TD integration and customizable range.
             * Supports increment/decrement buttons with Thing Description integration for IoT devices.
             * @example Basic Usage
             * ```html
             * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
             * ```
             * @example TD Integration with HTTP
             * ```html
             * <ui-number-picker
             * td-url="http://device.local/properties/volume"
             * label="Device Volume"
             * protocol="http"
             * mode="readwrite"
             * min="0"
             * max="100">
             * </ui-number-picker>
             * ```
             * @example TD Integration with MQTT
             * ```html
             * <ui-number-picker
             * td-url="mqtt://device"
             * mqtt-host="localhost:1883"
             * mqtt-topic="device/volume"
             * label="MQTT Volume"
             * protocol="mqtt"
             * mode="readwrite">
             * </ui-number-picker>
             * ```
             * @example TD Device Read-Only (shows value only)
             * ```html
             * <ui-number-picker
             * td-url="http://sensor.local/temperature"
             * label="Temperature Sensor"
             * mode="read">
             * </ui-number-picker>
             * ```
             * @example Local Control with Custom Handler
             * ```html
             * <ui-number-picker
             * value="3"
             * on-change="handleNumberChange"
             * variant="filled"
             * label="Custom Counter">
             * </ui-number-picker>
             * ```
             * @example Event Handling
             * ```javascript
             * window.handleNumberChange = function(data) {
             * console.log('Number changed:', data.value);
             * console.log('Label:', data.label);
             * // Your custom logic here
             * };
             * ```
             */
            "ui-number-picker": LocalJSX.UiNumberPicker & JSXBase.HTMLAttributes<HTMLUiNumberPickerElement>;
            /**
             * Smart wrapper for TD properties that provides visual feedback, status indicators,
             * and handles the connection between UI controls and Thing Description properties.
             * @example Basic usage with toggle:
             * ```html
             * <ui-property-card property="on" thing-id="light-1" label="Living Room Light">
             *   <ui-toggle slot="control" value="false"></ui-toggle>
             * </ui-property-card>
             * ```
             */
            "ui-property-card": LocalJSX.UiPropertyCard & JSXBase.HTMLAttributes<HTMLUiPropertyCardElement>;
            /**
             * Advanced slider component with reactive state management and multiple visual styles.
             * @example Basic Usage
             * ```html
             * <ui-slider variant="narrow" min="0" max="100" value="50" label="Brightness"></ui-slider>
             * ```
             * @example Different Variants
             * ```html
             * <ui-slider variant="narrow" min="0" max="100" value="30" label="Narrow Style"></ui-slider>
             * <ui-slider variant="wide" min="0" max="100" value="60" label="Wide Style"></ui-slider>
             * <ui-slider variant="rainbow" min="0" max="360" value="180" label="Rainbow Hue"></ui-slider>
             * <ui-slider variant="neon" min="0" max="100" value="80" label="Neon Glow"></ui-slider>
             * <ui-slider variant="stepped" step="10" min="0" max="100" value="50" label="Stepped Control"></ui-slider>
             * ```
             * @example Read-Only Mode
             * ```html
             * <ui-slider readonly="true" value="75" min="0" max="100" label="Sensor Reading"></ui-slider>
             * ```
             * @example JavaScript Integration with Multiple Sliders
             * ```javascript
             * // For single slider
             * const slider = document.querySelector('#my-slider');
             * // For multiple sliders
             * const sliders = document.querySelectorAll('ui-slider');
             * sliders.forEach(slider => {
             * slider.addEventListener('valueMsg', (e) => {
             * console.log('Slider ID:', e.detail.source);
             * console.log('New value:', e.detail.payload);
             * });
             * });
             * // Set value by ID
             * const brightnessSlider = document.getElementById('brightness-slider');
             * await brightnessSlider.setValue(75);
             * ```
             * @example HTML with IDs
             * ```html
             * <ui-slider id="brightness-slider" label="Brightness" variant="narrow" min="0" max="100"></ui-slider>
             * <ui-slider id="volume-slider" label="Volume" variant="wide" min="0" max="100"></ui-slider>
             * ```
             */
            "ui-slider": LocalJSX.UiSlider & JSXBase.HTMLAttributes<HTMLUiSliderElement>;
            /**
             * Versatile text component supporting display, editing, and various structured formats.
             * @example Basic Usage
             * ```html
             * <ui-text value="Hello World"></ui-text>
             * ```
             * @example Editable Text
             * ```html
             * <ui-text variant="edit" value="Edit me" placeholder="Type here..."></ui-text>
             * ```
             * @example Structured Content
             * ```html
             * <ui-text structure="json" value='{"key": "value"}'></ui-text>
             * ```
             * @example Multi-line Text
             * ```html
             * <ui-text textType="multi" rows="5" expandable="true"></ui-text>
             * ```
             */
            "ui-text": LocalJSX.UiText & JSXBase.HTMLAttributes<HTMLUiTextElement>;
            /**
             * Advanced toggle switch component with reactive state management and multiple visual styles.
             * @example Basic Usage
             * ```html
             * <ui-toggle variant="circle" value="true" label="Light"></ui-toggle>
             * ```
             * @example Different Variants
             * ```html
             * <ui-toggle variant="apple" value="false" label="iOS Style"></ui-toggle>
             * <ui-toggle variant="square" value="true" label="Square Style"></ui-toggle>
             * <ui-toggle variant="cross" value="false" label="Cross/Tick Style"></ui-toggle>
             * <ui-toggle variant="neon" value="true" label="Neon Glow"></ui-toggle>
             * ```
             * @example Read-Only Mode
             * ```html
             * <ui-toggle readonly="true" value="false" label="Sensor Status"></ui-toggle>
             * ```
             * @example JavaScript Integration with Multiple Toggles
             * ```javascript
             * // For single toggle
             * const toggle = document.querySelector('#my-toggle');
             * // For multiple toggles
             * const toggles = document.querySelectorAll('ui-toggle');
             * toggles.forEach(toggle => {
             * toggle.addEventListener('valueMsg', (e) => {
             * console.log('Toggle ID:', e.detail.source);
             * console.log('New value:', e.detail.payload);
             * });
             * });
             * // Set value by ID
             * const lightToggle = document.getElementById('light-toggle');
             * await lightToggle.setValue(true);
             * ```
             * @example HTML with IDs
             * ```html
             * <ui-toggle id="light-toggle" label="Light" variant="circle"></ui-toggle>
             * <ui-toggle id="fan-toggle" label="Fan" variant="apple"></ui-toggle>
             * ```
             */
            "ui-toggle": LocalJSX.UiToggle & JSXBase.HTMLAttributes<HTMLUiToggleElement>;
        }
    }
}
