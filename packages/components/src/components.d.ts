/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { UiMsg } from "./utils/types";
export { UiMsg } from "./utils/types";
export namespace Components {
    /**
     * A simple button component designed for WoT device actions.
     * Features multiple visual styles, status indicators, and Web of Things integration.
     * Buttons trigger actions rather than managing state values.
     * @example Basic Usage
     * ```html
     * <ui-button label="Click Me"></ui-button>
     * <ui-button variant="filled" label="Submit" show-status="true"></ui-button>
     * ```
     * @example WoT Action Integration
     * ```javascript
     * const button = document.getElementById('device-button');
     * await button.setAction(async () => {
     * await thing.invokeAction('execute');
     * });
     * ```
     */
    interface UiButton {
        /**
          * Color theme for the button matching to thingsweb theme
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark": boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled": boolean;
        /**
          * Enable keyboard navigation so user can click using 'Space' and 'Enter' keys when true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed on the button
          * @default 'Button'
         */
        "label": string;
        /**
          * Sets the action to execute when button is clicked. This is the primary method for connecting button to real devices .
          * @param actionFn - The async function to execute on button click
          * @returns Promise resolving to true if successful, false if failed
          * @example Basic Usage ```javascript await button.setAction(async () => { await thing.invokeAction('execute'); }); ```
         */
        "setAction": (actionFn?: () => Promise<any>) => Promise<boolean>;
        /**
          * (Advance) to manually set the operation status indicator. Useful when managing device communication externally and you want to show loading/success/error states.
          * @param status - The status to display
          * @param errorMessage - (Optional) error message for error status
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus": boolean;
        /**
          * Visual style variant of the button. - minimal: Clean design with transparent background - outlined: Border-focused design with outline style - filled: Solid background design
          * @default 'outlined'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * A versatile calendar component designed for WoT device control.
     * It has various features, visual styles, status and last updated timestamps and other options.
     * @example Basic Usage
     * ```html
     * <ui-calendar variant="outlined" value="2023-12-25T00:00:00.000Z" label="Select Date"></ui-calendar>
     * <ui-calendar variant="filled" include-time="true" label="Pick Date & Time"></ui-calendar>
     * <ui-calendar variant="outlined" label="Device Calendar" show-last-updated="true"></ui-calendar>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const calendar = document.getElementById('device-calendar');
     * const initialValue = await (await thing.readProperty('targetDate')).value();
     * await calendar.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('targetDate', value);
     * }
     * });
     * ```
     */
    interface UiCalendar {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for readonly mode
          * @default true
         */
        "connected": boolean;
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark": boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled": boolean;
        /**
          * First day of week (0 = Sunday, 1 = Monday)
          * @default 0
         */
        "firstDayOfWeek": 0 | 1;
        /**
          * Gets the current calendar value with optional metadata.
          * @param includeMetadata - Whether to include status, timestamp and other information
          * @returns Current value or detailed metadata object
         */
        "getValue": (includeMetadata?: boolean) => Promise<string | undefined | { value: string | undefined; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Include time picker alongside date picker
          * @default false
         */
        "includeTime": boolean;
        /**
          * Display calendar inline instead of as a popup
          * @default false
         */
        "inline": boolean;
        /**
          * Enable keyboard navigation so user can interact using keyboard when true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed above the calendar (optional)
         */
        "label"?: string;
        /**
          * Maximum selectable date (ISO string)  (Optional)
         */
        "maxDate"?: string;
        /**
          * Minimum selectable date (ISO string)  (Optional)
         */
        "minDate"?: string;
        /**
          * (Advance) to manually set the operation status indicator.  Useful when managing device communication externally and you want to show loading/success/error states.
          * @param status - The status to display
          * @param errorMessage - (Optional) error message for error status
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Sets the calendar value with optional device communication api and other options.  This is the primary method for connecting calendars to real devices. It supports optimistic updates, error handling, and automatic retries.
          * @param value - The date string value to set (ISO format)
          * @param options - Optional configuration for device communication and behavior
          * @returns Promise resolving to any result from the operation
          * @example Basic Usage ```javascript await calendar.setValue('2023-12-25T00:00:00.000Z'); ```
          * @example JS integration with node-wot browser bundle ```javascript const calendar = document.getElementById('device-calendar'); const initialValue = await (await thing.readProperty('targetDate')).value(); await calendar.setValue(initialValue, { writeOperation: async value => { await thing.writeProperty('targetDate', value); } }); ```
         */
        "setValue": (value: string, options?: { writeOperation?: (value: string) => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; autoRetry?: { attempts: number; delay: number; }; _isRevert?: boolean; }) => Promise<any>;
        /**
          * This method updates the value silently without triggering events.  Use this for external data synchronization to prevent event loops. Perfect for WebSocket updates or polling from remote devices.
          * @param value - The date string value to set silently (ISO format)
         */
        "setValueSilent": (value: string) => Promise<void>;
        /**
          * Show clear button to reset selection
          * @default true
         */
        "showClearButton": boolean;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default true
         */
        "showStatus": boolean;
        /**
          * Show today button
          * @default true
         */
        "showTodayButton": boolean;
        /**
          * Show week numbers in calendar grid
          * @default false
         */
        "showWeekNumbers": boolean;
        /**
          * Time format when includeTime is enabled (12-hour or 24-hour)
          * @default '12'
         */
        "timeFormat": '12' | '24';
        /**
          * Current date-time value of the calendar (ISO string)
         */
        "value"?: string;
        /**
          * Visual style variant of the calendar. - outlined: Border-focused design with outline style - filled: Solid background design
          * @default 'outlined'
         */
        "variant": 'outlined' | 'filled';
    }
    /**
     * A versatile checkbox component designed for WoT device control.
     * It has various features, multiple visual styles, status and last updated timestamps.
     * @example Basic Usage
     * ```html
     * <ui-checkbox variant="outlined" value="true" label="Accept Terms"></ui-checkbox>
     * <ui-checkbox variant="minimal" value="false" label="Enable Notifications"></ui-checkbox>
     * <ui-checkbox variant="filled" label="Device Status" show-last-updated="true"></ui-checkbox>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const checkbox = document.getElementById('device-checkbox');
     * const initialValue = Boolean(await (await thing.readProperty('enabled')).value());
     * await checkbox.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('enabled', value);
     * }
     * });
     * ```
     */
    interface UiCheckbox {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark": boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled": boolean;
        /**
          * Gets the current checkbox value with optional metadata.
          * @param includeMetadata - Whether to include status, timestamp and other information
          * @returns Current value or detailed metadata object
         */
        "getValue": (includeMetadata?: boolean) => Promise<boolean | { value: boolean; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Enable keyboard navigation so user can toggle using 'Space' and 'Enter' keys) when true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed right to the checkbox (optional)
         */
        "label"?: string;
        /**
          * (Advance) to manually set the operation status indicator.  Useful when managing device communication externally and you want to show loading/success/error states.
          * @param status - The status to display
          * @param errorMessage - (Optional) error message for error status
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Sets the checkbox value with optional device communication api and other options.  This is the primary method for connecting checkboxes to real devices. It supports optimistic updates, error handling, and automatic retries.
          * @param value - The boolean value to set (true = checked, false = unchecked)
          * @param options - Optional configuration for device communication and behavior
          * @returns Promise resolving to true if successful, false if failed
          * @example Basic Usage ```javascript await checkbox.setValue(true); ```
          * @example JS integration with node-wot browser bundle ```javascript const checkbox = document.getElementById('device-checkbox'); const initialValue = Boolean(await (await thing.readProperty('enabled')).value()); await checkbox.setValue(initialValue, { writeOperation: async value => { await thing.writeProperty('enabled', value); }, autoRetry: { attempts: 3, delay: 1000 } }); ```
         */
        "setValue": (value: boolean, options?: { writeOperation?: (value: boolean) => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; autoRetry?: { attempts: number; delay: number; }; _isRevert?: boolean; }) => Promise<boolean>;
        /**
          * This method updates the value silently without triggering events.  Use this for external data synchronization to prevent event loops. Perfect for WebSocket updates or polling from remote devices.
          * @param value - The boolean value to set silently
         */
        "setValueSilent": (value: boolean) => Promise<void>;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus": boolean;
        /**
          * Current boolean value of the checkbox
          * @default false
         */
        "value": boolean;
        /**
          * Visual style variant of the checkbox. - minimal: Clean design with transparent background - outlined: Border-focused design with outline style - filled: Solid background when checked
          * @default 'outlined'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * A versatile color picker component designed for WoT device control.
     * @example Basic Usage
     * ```html
     * <ui-color-picker value="#ff0000" label="Theme Color"></ui-color-picker>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const colorPicker = document.getElementById('device-color');
     * const initialValue = String(await (await thing.readProperty('deviceColor')).value());
     * await colorPicker.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('deviceColor', value);
     * }
     * });
     * ```
     */
    interface UiColorPicker {
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark": boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled": boolean;
        /**
          * Gets the current color picker value with optional metadata.
          * @param includeMetadata - Whether to include status, timestamp and other information
          * @returns Current value or detailed metadata object
         */
        "getValue": (includeMetadata?: boolean) => Promise<string | { value: string; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Text label displayed right to the color picker (optional)
         */
        "label"?: string;
        /**
          * (Advance) to manually set the operation status indicator.  Useful when managing device communication externally and you want to show loading/success/error states.
          * @param status - The status to display
          * @param errorMessage - (Optional) error message for error status
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Sets the color picker value with optional device communication api and other options.  This is the primary method for connecting color pickers to real devices. It supports optimistic updates, error handling, and automatic retries.
          * @param value - The color value to set in hex format (e.g., #ff0000)
          * @param options - Configuration for device communication and behavior
          * @returns Promise resolving to true if successful, false if failed
          * @example Basic Usage ```javascript await colorPicker.setValue('#ff0000'); ```
          * @example JS integration with node-wot browser bundle ```javascript const colorPicker = document.getElementById('device-color'); const initialValue = String(await (await thing.readProperty('deviceColor')).value()); await colorPicker.setValue(initialValue, { writeOperation: async value => { await thing.writeProperty('deviceColor', value); }, autoRetry: { attempts: 3, delay: 1000 } }); ```
         */
        "setValue": (value: string, options?: { writeOperation?: (value: string) => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; autoRetry?: { attempts: number; delay: number; }; _isRevert?: boolean; }) => Promise<boolean>;
        /**
          * This method updates the value silently without triggering events.  Use this for external data synchronization to prevent event loops. Perfect for WebSocket updates or polling from remote devices.
          * @param value - The color value to set silently in hex format
         */
        "setValueSilent": (value: string) => Promise<void>;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default true
         */
        "showStatus": boolean;
        /**
          * Current color value in hex format (e.g., #ff0000)
          * @default '#000000'
         */
        "value": string;
    }
    /**
     * A versatile event listener component designed for WoT device control.
     * It has various features, multiple visual styles, status and last updated timestamps.
     * @example Basic Usage
     * ```html
     * <ui-event variant="outlined" label="Temperature Events" event-name="temperatureChanged"></ui-event>
     * <ui-event variant="filled" label="Motion Events" max-events="20" show-timestamp="true"></ui-event>
     * <ui-event variant="outlined" label="Device Status" show-last-updated="true"></ui-event>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const eventListener = document.getElementById('event-listener');
     * await eventListener.startListening();
     * // Subscribe to event and pipe to component
     * await thing.subscribeEvent('on-bool', async data => {
     * const value = data?.value ?? data;
     * await eventListener.addEvent({
     * event: 'on-bool',
     * value,
     * timestamp: new Date().toISOString()
     * });
     * });
     * ```
     */
    interface UiEvent {
        /**
          * This method adds an event.
          * @param eventData - The event data to add
          * @param eventId - Optional event ID
         */
        "addEvent": (eventData: any, eventId?: string) => Promise<void>;
        /**
          * Clear event history and reset counters.
         */
        "clearEvents": () => Promise<void>;
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Connection status indicator
          * @default false
         */
        "connected": boolean;
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark": boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled": boolean;
        /**
          * Event name to subscribe to (for identification/display purposes)
         */
        "eventName"?: string;
        /**
          * Gets the current event history with optional metadata.
          * @param includeMetadata - Whether to include status, timestamp and other information
          * @returns Current event history or detailed metadata object
         */
        "getEventHistory": (includeMetadata?: boolean) => Promise<Array<any> | { value: Array<any>; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Check if component is currently listening for events.
          * @returns Promise resolving to boolean indicating listening status
         */
        "isListening": () => Promise<boolean>;
        /**
          * Enable keyboard navigation so user can interact using keyboard when true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed above the event listener (optional)
         */
        "label"?: string;
        /**
          * Maximum number of events to keep in history
          * @default 15
         */
        "maxEvents": number;
        /**
          * (Advance) to manually set the operation status indicator.  Useful when managing device communication externally and you want to show loading/success/error states.
          * @param status - The status to display
          * @param errorMessage - (Optional) error message for error status
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default true
         */
        "showStatus": boolean;
        /**
          * Show event timestamps
          * @default true
         */
        "showTimestamp": boolean;
        /**
          * Starts listening for events with optional device communication api and other options.  This is the primary method for connecting event listeners to real devices. It supports event filtering, history management, and status tracking.
          * @returns Promise resolving to void when listening starts  ```
         */
        "startListening": () => Promise<void>;
        /**
          * Stop listening for events.
          * @returns Promise resolving to void when listening stops
         */
        "stopListening": () => Promise<void>;
        /**
          * Visual style variant of the event listener. - outlined: Border-focused design with outline style - filled: Solid background design
          * @default 'outlined'
         */
        "variant": 'outlined' | 'filled';
    }
    /**
     * A versatile file picker component designed for WoT device control.
     * It supports single and multiple file selection, drag-and-drop, and file type restrictions.
     * @example Basic Usage
     * ```html
     * <ui-file-picker label="Upload Document" accept=".pdf,.doc,.docx"></ui-file-picker>
     * <ui-file-picker multiple="true" label="Select Images" accept="image/*"></ui-file-picker>
     * <ui-file-picker label="Device Files" show-last-updated="true"></ui-file-picker>
     * ```
     * @example JS integration with node-wot browser bundle
     * ```javascript
     * const file = document.getElementById('file');
     * await file.setUpload(async (fileData) => {
     * console.log('File processed:', fileData.name, 'Size:', fileData.size);
     * // Just log the file data, don't invoke action yet
     * return { success: true, message: 'File processed successfully' };
     * }, {
     * propertyName: 'selectedFile',
     * writeProperty: async (prop, value) => {
     * console.log('Writing to property:', prop, value);
     * await thing.writeProperty(prop, value);
     * }
     * });
     * ```
     */
    interface UiFilePicker {
        /**
          * File type restrictions (e.g., ".pdf,.doc", "image/*")
         */
        "accept"?: string;
        /**
          * This method clears the files silently without triggering events.  Use this for external data synchronization to prevent event loops. Perfect for WebSocket updates or polling from remote devices.
         */
        "clearFiles": () => Promise<void>;
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark": boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled": boolean;
        /**
          * Gets the currently selected files with optional metadata.
          * @param includeMetadata - Whether to include status, timestamp and other information
          * @returns Current files or detailed metadata object
         */
        "getFiles": (includeMetadata?: boolean) => Promise<File[] | { value: File[]; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Text label displayed above the file picker (optional)
         */
        "label"?: string;
        /**
          * Maximum number of files when multiple is true
         */
        "maxFiles"?: number;
        /**
          * Maximum file size in bytes
         */
        "maxSize"?: number;
        /**
          * Whether multiple files can be selected
          * @default false
         */
        "multiple": boolean;
        /**
          * (Advance) to manually set the operation status indicator.  Useful when managing device communication externally and you want to show loading/success/error states.
          * @param status - The status to display
          * @param errorMessage - (Optional) error message for error status
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Sets the file picker upload operation with optional device communication api and other options.  This is the primary method for connecting file pickers to real devices. Files are automatically converted to base64 with metadata for WoT integration.
          * @param operation - Function that receives processed file data
          * @param options - Optional configuration for device communication and behavior
          * @returns Promise resolving to true if successful, false if failed
          * @example Single file upload  ```javascript const file = document.getElementById('file'); await file.setUpload(async (fileData) => { console.log('File processed:', fileData.name, 'Size:', fileData.size); // Just log the file data, don't invoke action yet return { success: true, message: 'File processed successfully' }; }, { propertyName: 'selectedFile', writeProperty: async (prop, value) => { console.log('Writing to property:', prop, value); await thing.writeProperty(prop, value); } }); ```
          * @example Multiple file upload ```javascript const files = document.getElementById('files'); await files.setUpload(async (fileData) => { console.log('File processed:', fileData.name, 'Size:', fileData.size); // Just log the file data, don't invoke action yet return { success: true, message: 'File processed successfully' }; }, { propertyName: 'fileList', writeProperty: async (prop, value) => { console.log('Writing to property:', prop, value); await thing.writeProperty(prop, value); } }); ```
         */
        "setUpload": (operation: (fileData: { name: string; size: number; type: string; content: string; }) => Promise<any>, options?: { propertyName?: string; writeProperty?: (propertyName: string, value: any) => Promise<void>; }) => Promise<boolean>;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default true
         */
        "showStatus": boolean;
    }
    /**
     * A versatile notification component designed for WoT device control.
     * @example Basic Usage
     * ```html
     * <ui-notification type="info" message="Operation completed successfully"></ui-notification>
     * <ui-notification type="success" duration="3000" message="Device connected successfully"></ui-notification>
     * <ui-notification type="warning" show-close-button="true" message="Low battery warning"></ui-notification>
     * ```
     * @example JS integration with node-wot browser bundle
     * ```javascript
     * const notificationElement = document.getElementById('alert-notification');
     * const eventName = 'temperature-critical';
     * await thing.subscribeEvent(eventName, async (eventData) => {
     * const value = await eventData.value();
     * notificationElement.message = `Alert: ${eventName} - ${JSON.stringify(value)}`;
     * notificationElement.type = 'warning';
     * await notificationElement.show();
     * });
     * ```
     */
    interface UiNotification {
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark": boolean;
        /**
          * This method dismisses the notification with animation.  For external control or programmatic dismissal.
          * @param method - How the notification was dismissed
         */
        "dismiss": (method?: "auto" | "manual" | "programmatic") => Promise<void>;
        /**
          * Duration before auto-dismiss (0 to disable auto-dismiss)
          * @default 3000
         */
        "duration": number;
        /**
          * Gets the current notification visibility with optional metadata.
          * @param includeMetadata - Whether to include status, timestamp and other information
          * @returns Current visibility or detailed metadata object
         */
        "getValue": (includeMetadata?: boolean) => Promise<boolean | { value: boolean; message: string; type: string; duration: number; }>;
        /**
          * The message text to display in the notification
          * @default ''
         */
        "message": string;
        /**
          * Shows the notification with animation.  This is the primary method for displaying notifications programmatically.
          * @returns Promise resolving to void when animation completes
          * @example Basic Usage ```javascript await notification.show(); ```
         */
        "show": () => Promise<void>;
        /**
          * Whether to show a close button
          * @default true
         */
        "showCloseButton": boolean;
        /**
          * Whether to show an icon based on the notification type
          * @default true
         */
        "showIcon": boolean;
        /**
          * (Advance) to toggle the notification visibility.  Useful when managing notification state externally and you want to show/hide conditionally.
         */
        "toggle": () => Promise<void>;
        /**
          * Type of notification for different visual styling and icons. - info: General information (blue) - success: Success messages (green)  - warning: Warning messages (orange) - error: Error messages (red)
          * @default 'info'
         */
        "type": 'info' | 'success' | 'warning' | 'error';
    }
    /**
     * A versatile number picker component designed for WoT device control and monitoring.
     * It has increment/decrement buttons, multiple visual styles, status and last updated timestamps.
     * Supports both interactive control and read-only monitoring modes with customizable ranges.
     * @example Basic Usage
     * ```html
     * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
     * <ui-number-picker variant="filled" value="50" min="0" max="100"></ui-number-picker>
     * <ui-number-picker readonly="true" label="Sensor" show-last-updated="true"></ui-number-picker>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const numberPicker = document.getElementById('device-volume');
     * const initialValue = Number(await (await thing.readProperty('volume')).value());
     * await numberPicker.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('volume', value);
     * }
     * });
     * ```
     */
    interface UiNumberPicker {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for read-only monitoring
          * @default true
         */
        "connected": boolean;
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark": boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled": boolean;
        /**
          * Gets the current number picker value with optional metadata.
          * @param includeMetadata - Whether to include status, timestamp and other information
          * @returns Current value or detailed metadata object
         */
        "getValue": (includeMetadata?: boolean) => Promise<number | { value: number; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Enable keyboard navigation so user can change value using 'Arrow Up' and 'Arrow Down' keys) when true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed above the number picker (optional)
         */
        "label"?: string;
        /**
          * Maximum allowed value (optional)
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum allowed value (optional)
          * @default 0
         */
        "min"?: number;
        /**
          * Read only mode, display value but prevent changes when true. Just to monitor changes
          * @default false
         */
        "readonly": boolean;
        /**
          * (Advance) to manually set the operation status indicator.  Useful when managing device communication externally and you want to show loading/success/error states.
          * @param status - The status to display
          * @param errorMessage - (Optional) error message for error status
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Sets the number picker value with optional device communication api and other options.  This is the primary method for connecting number pickers to real devices. It supports optimistic updates, error handling, and automatic retries.
          * @param value - The numeric value to set
          * @param options - Optional configuration for device communication and behavior
          * @returns Promise resolving to true if successful, false if failed
          * @example Basic Usage ```javascript await numberPicker.setValue(50); ```
          * @example JS integration with node-wot browser bundle ```javascript const numberPicker = document.getElementById('device-volume'); const initialValue = Number(await (await thing.readProperty('volume')).value()); await numberPicker.setValue(initialValue, { writeOperation: async value => { await thing.writeProperty('volume', value); }, autoRetry: { attempts: 3, delay: 1000 } }); ```
         */
        "setValue": (value: number, options?: { writeOperation?: (value: number) => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; autoRetry?: { attempts: number; delay: number; }; _isRevert?: boolean; }) => Promise<boolean>;
        /**
          * This method updates the value silently without triggering events.  Use this for external data synchronization to prevent event loops. Perfect for WebSocket updates or polling from remote devices.
          * @param value - The numeric value to set silently
         */
        "setValueSilent": (value: number) => Promise<void>;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus": boolean;
        /**
          * Step increment/decrement amount (optional)
          * @default 1
         */
        "step"?: number;
        /**
          * This triggers a visual pulse for read-only mode.  Useful to shows users when data has been refreshed from an external source. The pulse automatically fades after 1.5 seconds.
         */
        "triggerReadPulse": () => Promise<void>;
        /**
          * Current numeric value of the number picker
          * @default 0
         */
        "value": number;
        /**
          * Visual style variant of the number picker. - minimal: Clean buttons with subtle background (default) - outlined: Buttons with border outline - filled: Solid filled buttons
          * @default 'minimal'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * A versatile object component designed for WoT device to handle object type TD properties.
     * It auto-generates an editor interface for TD object-type properties with save button to push
     * all the changes at once.
     * It also features status indicators, last updated timestamps.
     * @example Basic Usage
     * ```html
     * <ui-object variant="outlined" label="Device Settings"></ui-object>
     * <ui-object variant="filled" show-last-updated="true" show-status="true"></ui-object>
     * <ui-object readonly="true" label="System Status" dark="true"></ui-object>
     * ```
     * @example JS integration with node-wot browser bundle
     * ```javascript
     * const objectEditor = document.getElementById('device-config');
     * const initialValue = await (await thing.readProperty('configuration')).value();
     * await objectEditor.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('configuration', value);
     * }
     * });
     * ```
     */
    interface UiObject {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark": boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled": boolean;
        /**
          * Gets the current object value with optional metadata.
          * @param includeMetadata - Whether to include status, timestamp and other information
          * @returns Current value or detailed metadata object
         */
        "getValue": (includeMetadata?: boolean) => Promise<any | { value: any; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Text label displayed above the object editor (optional)
         */
        "label"?: string;
        /**
          * Read only mode, display value but prevent changes when true. Just to monitor changes
          * @default false
         */
        "readonly": boolean;
        /**
          * Executes the stored write operation to save the complete object to the device.  Combines all field changes into a single object and sends it via the configured write operation. Handles type coercion and error states automatically.
          * @returns Promise resolving to true if successful, false if failed
         */
        "save": () => Promise<boolean>;
        /**
          * Sets the object value with optional device communication api and other options.  This is the primary method for connecting object editors to real devices. It supports optimistic updates, error handling, and stores write operations for Save button.
          * @param value - The object value to set
          * @param options - Optional configuration for device communication and behavior
          * @returns Promise resolving to true if successful, false if failed
          * @example Basic Usage ```javascript await objectEditor.setValue({ temperature: 22, humidity: 45 }); ```
          * @example JS integration with node-wot browser bundle ```javascript const objectEditor = document.getElementById('device-config'); const initialValue = await (await thing.readProperty('configuration')).value(); await objectEditor.setValue(initialValue, { writeOperation: async value => { await thing.writeProperty('configuration', value); } }); ```
         */
        "setValue": (value: any, options?: { writeOperation?: (value: any) => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; _isRevert?: boolean; }) => Promise<boolean>;
        /**
          * This method updates the value silently without triggering events.  Use this for external data synchronization to prevent event loops. Perfect for WebSocket updates or polling from remote devices.
          * @param value - The object value to set silently
         */
        "setValueSilent": (value: any) => Promise<void>;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default true
         */
        "showStatus": boolean;
        /**
          * Visual style variant of the object editor. - outlined: Border around container (default) - filled: Background-filled container with border
          * @default 'outlined'
         */
        "variant": 'outlined' | 'filled';
    }
    /**
     * A versatile slider component designed for WoT device control and monitoring.
     * It supports continuous value selection with multiple visual styles, orientations, and different thumb shapes.
     * Supports both interactive control and read-only monitoring modes with customizable ranges.
     * @example Basic Usage
     * ```html
     * <ui-slider variant="narrow" value="50" label="Brightness"></ui-slider>
     * <ui-slider variant="wide" value="75" min="0" max="100"></ui-slider>
     * <ui-slider readonly="true" label="Sensor" show-last-updated="true"></ui-slider>
     * ```
     * @example JS integration with node-wot browser bundle
     * ```javascript
     * const slider = document.getElementById('device-brightness');
     * const initialValue = Number(await (await thing.readProperty('brightness')).value());
     * await slider.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('brightness', value);
     * }
     * });
     * ```
     */
    interface UiSlider {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for read-only monitoring
          * @default true
         */
        "connected": boolean;
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark": boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled": boolean;
        /**
          * Get the current slider value with optional metadata.
          * @param includeMetadata - Whether to include status, timestamp and other information
          * @returns Current value or detailed metadata object
         */
        "getValue": (includeMetadata?: boolean) => Promise<number | { value: number; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Enable keyboard navigation so user can change value using 'Arrow Up' and 'Arrow Down' keys) when true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed above the slider (optional)
         */
        "label"?: string;
        /**
          * Maximum allowed value (optional)
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum allowed value (optional)
          * @default 0
         */
        "min"?: number;
        /**
          * Orientation of the slider
          * @default 'horizontal'
         */
        "orientation": 'horizontal' | 'vertical';
        /**
          * Read only mode, display value but prevent changes when true. Just to monitor changes
          * @default false
         */
        "readonly": boolean;
        /**
          * (Advance) to manually set the operation status indicator.  Useful when managing device communication externally and you want to show loading/success/error states.
          * @param status - The status to display
          * @param errorMessage - (Optional) error message for error status
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Set the slider value with optional device api and other options.  This is the primary method for connecting slider to real devices. It supports optimistic updates, error handling, and automatic retries. Values are automatically clamped to the min/max range.
          * @param value - The numeric value to set (will be clamped to min/max range)
          * @param options - Optional configuration options for the operation
          * @returns Promise resolving to true if successful, false if failed
          * @example Basic Usage ```javascript const slider = document.querySelector('ui-slider'); await slider.setValue(50);    // Set to 50 await slider.setValue(75.5);  // Set to 75.5 (decimals supported) ```
          * @example JS integration with node-wot browser bundle ```javascript // Smart thermostat control const thermostat = document.querySelector('#thermostat');  await thermostat.setValue(72, { writeOperation: async value => { await thing.writeProperty('brightness', value); }, optimistic: true, autoRetry: { attempts: 2, delay: 3000 } }); ```
         */
        "setValue": (value: number, options?: { writeOperation?: (value: number) => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; autoRetry?: { attempts: number; delay: number; }; _isRevert?: boolean; }) => Promise<boolean>;
        /**
          * This method updates the value silently without triggering events.  Use this for external data synchronization to prevent event loops. Perfect for WebSocket updates or polling from remote devices.
          * @param value - The numeric value to set silently
         */
        "setValueSilent": (value: number) => Promise<void>;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus": boolean;
        /**
          * Step increment/decrement amount (optional)
          * @default 1
         */
        "step"?: number;
        /**
          * Shape of the slider thumb
          * @default 'circle'
         */
        "thumbShape": 'circle' | 'square' | 'arrow' | 'triangle' | 'diamond';
        /**
          * This triggers a visual pulse for read-only mode.  Useful to shows users when data has been refreshed from an external source. The pulse automatically fades after 1.5 seconds.
         */
        "triggerReadPulse": () => Promise<void>;
        /**
          * Current numeric value of the slider
          * @default 0
         */
        "value": number;
        /**
          * Visual style variant of the slider. - narrow: Thin track with minimal styling (default) - wide: Thicker track - rainbow: Multi-color gradient track - neon: Glowing effect styling - stepped: Visual step indicators
          * @default 'narrow'
         */
        "variant": 'narrow' | 'wide' | 'rainbow' | 'neon' | 'stepped';
    }
    /**
     * A versatile Text-Display component designed for WoT device control and monitoring
     * It has various features, visual styles and supports text-heavy data display.
     * Provides field, area, structured, unstructured, and editable modes with consistent styling.
     * @example Basic Usage
     * ```html
     * <ui-text mode="field" variant="outlined" value="Sample text" label="Name"></ui-text>
     * <ui-text mode="area" variant="filled" value="Long text content..." label="Description"></ui-text>
     * <ui-text mode="structured" variant="minimal" value='{"key": "value"}' label="JSON Data"></ui-text>
     * <ui-text mode="editable" variant="outlined" value="Edit me" label="Notes" id="notes-field"></ui-text>
     * ```
     * @example JS integration with node-wot browser bundle
     * ```javascript
     * const textElement = document.getElementById('text-field');
     * const value = await (await thing.readProperty('string')).value();
     * await textElement.setValue(value, {
     * writeOperation: async newValue => {
     * await thing.writeProperty('string', String(newValue));
     * },
     * });
     * ```
     */
    interface UiText {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark": boolean;
        /**
          * Debounce delay in milliseconds for editable mode updates (0 = disabled). Enabled it to reduce API calls by only sending updates after user stops typing.
          * @default 0
         */
        "debounceMs": number;
        /**
          * Focus the input element (editable mode only).
         */
        "focusInput": () => Promise<void>;
        /**
          * Get the current text value with optional metadata.
          * @param includeMetadata - Whether to include status, timestamp and other information
          * @returns Current value or detailed metadata object
         */
        "getValue": (includeMetadata?: boolean) => Promise<string | { value: string; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Text label displayed above the text display.
         */
        "label"?: string;
        /**
          * Maximum character limit (editable mode only).
         */
        "maxLength"?: number;
        /**
          * Maximum number of rows for area mode.
          * @default 10
         */
        "maxRows": number;
        /**
          * Minimum number of rows for area mode.
          * @default 3
         */
        "minRows": number;
        /**
          * Display mode for the text component. - field: One-line text display - area: Expandable text box (multi-line) - unstructured: Plain style, no highlighting - structured: Highlighted block (for JSON-like or formatted text) - editable: User can edit/write directly
          * @default 'unstructured'
         */
        "mode": 'field' | 'area' | 'unstructured' | 'structured' | 'editable';
        /**
          * Placeholder text shown when value is empty (editable mode only).
         */
        "placeholder"?: string;
        /**
          * Enable text area resizable.
          * @default true
         */
        "resizable": boolean;
        /**
          * (Advance) to manually set the operation status indicator.  Useful when managing device communication externally and you want to show loading/success/error states.
          * @param status - The status to display
          * @param errorMessage - (Optional) error message for error status
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Set the text value and handle optional operations and status management.  This is the primary method for connecting text to real devices. It supports optimistic updates, error handling, and automatic retries.
          * @param value - The string value to set
          * @param options - Optional configuration options for the operation
          * @returns Promise resolving to true if successful, false if failed
          * @example Basic Usage ```html await textElement.setValue(value); ```
          * @example JS integration with node-wot browser bundle ```javascript const textElement = document.getElementById('text-field'); const value = await (await thing.readProperty('string')).value();  await textElement.setValue(value, { writeOperation: async newValue => { await thing.writeProperty('string', String(newValue)); }, autoRetry: { attempts: 3, delay: 1000 } }); ```
         */
        "setValue": (value: string, options?: { writeOperation?: (value: string) => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; autoRetry?: { attempts: number; delay: number; }; _isRevert?: boolean; }) => Promise<boolean>;
        /**
          * This method updates the value silently without triggering events.  Use this for external data synchronization to prevent event loops. Perfect for WebSocket updates or polling from remote devices.
          * @param value - The string value to set silently
         */
        "setValueSilent": (value: string) => Promise<void>;
        /**
          * Show character count
          * @default false
         */
        "showCharCount": boolean;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show line numbers
          * @default false
         */
        "showLineNumbers": boolean;
        /**
          * Show save button for explicit updates (editable mode only). When true, changes are not sent until user clicks save.
          * @default false
         */
        "showSaveButton": boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus": boolean;
        /**
          * Current text value of the component.
          * @default ''
         */
        "value": string;
        /**
          * Visual style variant of the text display. - minimal: Text-only with subtle underline - outlined: Border style applied (default) - filled: Background color applied
          * @default 'outlined'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * A versatile toggle switch component designed for WoT device control and monitoring.
     * It has various features, multiple visual styles, status and last updated timestamps.
     * Supports both interactive control and read-only monitoring modes.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" value="true" label="Light"></ui-toggle>
     * <ui-toggle variant="neon" value="false" label="Fan"></ui-toggle>
     * <ui-toggle readonly="true" label="Sensor" show-last-updated="true"></ui-toggle>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const toggle = document.getElementById('device-toggle');
     * const initialValue = Boolean(await (await thing.readProperty('power')).value());
     * await toggle.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('power', value);
     * }
     * });
     * ```
     */
    interface UiToggle {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for read-only monitoring
          * @default true
         */
        "connected": boolean;
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark": boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled": boolean;
        /**
          * Gets the current toggle value with optional metadata.
          * @param includeMetadata - Whether to include status, timestamp and other information
          * @returns Current value or detailed metadata object
         */
        "getValue": (includeMetadata?: boolean) => Promise<boolean | { value: boolean; lastUpdated?: number; status: string; error?: string; }>;
        /**
          * Enable keyboard navigation so user can toggle using 'Space' and 'Enter' keys) when true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed left to the toggle (optional)
         */
        "label"?: string;
        /**
          * Read only mode, display value but prevent changes when true. Just to monitor changes
          * @default false
         */
        "readonly": boolean;
        /**
          * (Advance) to manually set the operation status indicator.  Useful when managing device communication externally and you want to show loading/success/error states.
          * @param status - The status to display
          * @param errorMessage - (Optional) error message for error status
         */
        "setStatus": (status: "idle" | "loading" | "success" | "error", errorMessage?: string) => Promise<void>;
        /**
          * Sets the toggle value with optional device communication api and other options.  This is the primary method for connecting toggles to real devices. It supports optimistic updates, error handling, and automatic retries.
          * @param value - The boolean value to set (true = on, false = off)
          * @param options - Optional configuration for device communication and behavior
          * @returns Promise resolving to true if successful, false if failed
          * @example Basic Usage ```javascript await toggle.setValue(true); ```
          * @example JS integration with node-wot browser bundle ```javascript const toggle = document.getElementById('device-toggle'); const initialValue = Boolean(await (await thing.readProperty('power')).value()); await toggle.setValue(initialValue, { writeOperation: async value => { await thing.writeProperty('power', value); }, autoRetry: { attempts: 3, delay: 1000 } }); ```
         */
        "setValue": (value: boolean, options?: { writeOperation?: (value: boolean) => Promise<any>; readOperation?: () => Promise<any>; optimistic?: boolean; autoRetry?: { attempts: number; delay: number; }; _isRevert?: boolean; }) => Promise<boolean>;
        /**
          * This method updates the value silently without triggering events.  Use this for external data synchronization to prevent event loops. Perfect for WebSocket updates or polling from remote devices.
          * @param value - The boolean value to set silently
         */
        "setValueSilent": (value: boolean) => Promise<void>;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated": boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus": boolean;
        /**
          * This triggers a visual pulse for read-only mode.  Useful to shows users when data has been refreshed from an external source. The pulse automatically fades after 1.5 seconds.
         */
        "triggerReadPulse": () => Promise<void>;
        /**
          * Current boolean value of the toggle
          * @default false
         */
        "value": boolean;
        /**
          * Visual style variant of the toggle. - circle: Common pill-shaped toggle (default) - square: Rectangular toggle with square thumb - apple: iOS-style switch (bigger size, rounded edges) - cross: Shows cross when off, tick when on with red background when off and green when on - neon: Glowing effect when active
          * @default 'circle'
         */
        "variant": 'circle' | 'square' | 'apple' | 'cross' | 'neon';
    }
}
export interface UiButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiButtonElement;
}
export interface UiCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiCalendarElement;
}
export interface UiCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiCheckboxElement;
}
export interface UiColorPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiColorPickerElement;
}
export interface UiEventCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiEventElement;
}
export interface UiFilePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiFilePickerElement;
}
export interface UiNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiNotificationElement;
}
export interface UiNumberPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiNumberPickerElement;
}
export interface UiSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiSliderElement;
}
export interface UiTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiTextElement;
}
export interface UiToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiToggleElement;
}
declare global {
    interface HTMLUiButtonElementEventMap {
        "clickMsg": UiMsg<string>;
    }
    /**
     * A simple button component designed for WoT device actions.
     * Features multiple visual styles, status indicators, and Web of Things integration.
     * Buttons trigger actions rather than managing state values.
     * @example Basic Usage
     * ```html
     * <ui-button label="Click Me"></ui-button>
     * <ui-button variant="filled" label="Submit" show-status="true"></ui-button>
     * ```
     * @example WoT Action Integration
     * ```javascript
     * const button = document.getElementById('device-button');
     * await button.setAction(async () => {
     * await thing.invokeAction('execute');
     * });
     * ```
     */
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiButtonElementEventMap>(type: K, listener: (this: HTMLUiButtonElement, ev: UiButtonCustomEvent<HTMLUiButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiButtonElementEventMap>(type: K, listener: (this: HTMLUiButtonElement, ev: UiButtonCustomEvent<HTMLUiButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiCalendarElementEventMap {
        "valueMsg": UiMsg<string>;
    }
    /**
     * A versatile calendar component designed for WoT device control.
     * It has various features, visual styles, status and last updated timestamps and other options.
     * @example Basic Usage
     * ```html
     * <ui-calendar variant="outlined" value="2023-12-25T00:00:00.000Z" label="Select Date"></ui-calendar>
     * <ui-calendar variant="filled" include-time="true" label="Pick Date & Time"></ui-calendar>
     * <ui-calendar variant="outlined" label="Device Calendar" show-last-updated="true"></ui-calendar>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const calendar = document.getElementById('device-calendar');
     * const initialValue = await (await thing.readProperty('targetDate')).value();
     * await calendar.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('targetDate', value);
     * }
     * });
     * ```
     */
    interface HTMLUiCalendarElement extends Components.UiCalendar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiCalendarElementEventMap>(type: K, listener: (this: HTMLUiCalendarElement, ev: UiCalendarCustomEvent<HTMLUiCalendarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiCalendarElementEventMap>(type: K, listener: (this: HTMLUiCalendarElement, ev: UiCalendarCustomEvent<HTMLUiCalendarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiCalendarElement: {
        prototype: HTMLUiCalendarElement;
        new (): HTMLUiCalendarElement;
    };
    interface HTMLUiCheckboxElementEventMap {
        "valueMsg": UiMsg<boolean>;
    }
    /**
     * A versatile checkbox component designed for WoT device control.
     * It has various features, multiple visual styles, status and last updated timestamps.
     * @example Basic Usage
     * ```html
     * <ui-checkbox variant="outlined" value="true" label="Accept Terms"></ui-checkbox>
     * <ui-checkbox variant="minimal" value="false" label="Enable Notifications"></ui-checkbox>
     * <ui-checkbox variant="filled" label="Device Status" show-last-updated="true"></ui-checkbox>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const checkbox = document.getElementById('device-checkbox');
     * const initialValue = Boolean(await (await thing.readProperty('enabled')).value());
     * await checkbox.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('enabled', value);
     * }
     * });
     * ```
     */
    interface HTMLUiCheckboxElement extends Components.UiCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiCheckboxElementEventMap>(type: K, listener: (this: HTMLUiCheckboxElement, ev: UiCheckboxCustomEvent<HTMLUiCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiCheckboxElementEventMap>(type: K, listener: (this: HTMLUiCheckboxElement, ev: UiCheckboxCustomEvent<HTMLUiCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiCheckboxElement: {
        prototype: HTMLUiCheckboxElement;
        new (): HTMLUiCheckboxElement;
    };
    interface HTMLUiColorPickerElementEventMap {
        "valueMsg": UiMsg<string>;
    }
    /**
     * A versatile color picker component designed for WoT device control.
     * @example Basic Usage
     * ```html
     * <ui-color-picker value="#ff0000" label="Theme Color"></ui-color-picker>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const colorPicker = document.getElementById('device-color');
     * const initialValue = String(await (await thing.readProperty('deviceColor')).value());
     * await colorPicker.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('deviceColor', value);
     * }
     * });
     * ```
     */
    interface HTMLUiColorPickerElement extends Components.UiColorPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiColorPickerElementEventMap>(type: K, listener: (this: HTMLUiColorPickerElement, ev: UiColorPickerCustomEvent<HTMLUiColorPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiColorPickerElementEventMap>(type: K, listener: (this: HTMLUiColorPickerElement, ev: UiColorPickerCustomEvent<HTMLUiColorPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiColorPickerElement: {
        prototype: HTMLUiColorPickerElement;
        new (): HTMLUiColorPickerElement;
    };
    interface HTMLUiEventElementEventMap {
        "eventReceived": UiMsg<any>;
    }
    /**
     * A versatile event listener component designed for WoT device control.
     * It has various features, multiple visual styles, status and last updated timestamps.
     * @example Basic Usage
     * ```html
     * <ui-event variant="outlined" label="Temperature Events" event-name="temperatureChanged"></ui-event>
     * <ui-event variant="filled" label="Motion Events" max-events="20" show-timestamp="true"></ui-event>
     * <ui-event variant="outlined" label="Device Status" show-last-updated="true"></ui-event>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const eventListener = document.getElementById('event-listener');
     * await eventListener.startListening();
     * // Subscribe to event and pipe to component
     * await thing.subscribeEvent('on-bool', async data => {
     * const value = data?.value ?? data;
     * await eventListener.addEvent({
     * event: 'on-bool',
     * value,
     * timestamp: new Date().toISOString()
     * });
     * });
     * ```
     */
    interface HTMLUiEventElement extends Components.UiEvent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiEventElementEventMap>(type: K, listener: (this: HTMLUiEventElement, ev: UiEventCustomEvent<HTMLUiEventElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiEventElementEventMap>(type: K, listener: (this: HTMLUiEventElement, ev: UiEventCustomEvent<HTMLUiEventElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiEventElement: {
        prototype: HTMLUiEventElement;
        new (): HTMLUiEventElement;
    };
    interface HTMLUiFilePickerElementEventMap {
        "valueMsg": UiMsg<File[]>;
    }
    /**
     * A versatile file picker component designed for WoT device control.
     * It supports single and multiple file selection, drag-and-drop, and file type restrictions.
     * @example Basic Usage
     * ```html
     * <ui-file-picker label="Upload Document" accept=".pdf,.doc,.docx"></ui-file-picker>
     * <ui-file-picker multiple="true" label="Select Images" accept="image/*"></ui-file-picker>
     * <ui-file-picker label="Device Files" show-last-updated="true"></ui-file-picker>
     * ```
     * @example JS integration with node-wot browser bundle
     * ```javascript
     * const file = document.getElementById('file');
     * await file.setUpload(async (fileData) => {
     * console.log('File processed:', fileData.name, 'Size:', fileData.size);
     * // Just log the file data, don't invoke action yet
     * return { success: true, message: 'File processed successfully' };
     * }, {
     * propertyName: 'selectedFile',
     * writeProperty: async (prop, value) => {
     * console.log('Writing to property:', prop, value);
     * await thing.writeProperty(prop, value);
     * }
     * });
     * ```
     */
    interface HTMLUiFilePickerElement extends Components.UiFilePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiFilePickerElementEventMap>(type: K, listener: (this: HTMLUiFilePickerElement, ev: UiFilePickerCustomEvent<HTMLUiFilePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiFilePickerElementEventMap>(type: K, listener: (this: HTMLUiFilePickerElement, ev: UiFilePickerCustomEvent<HTMLUiFilePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiFilePickerElement: {
        prototype: HTMLUiFilePickerElement;
        new (): HTMLUiFilePickerElement;
    };
    interface HTMLUiNotificationElementEventMap {
        "notificationClose": {
    message: string;
    type: string;
    dismissMethod: 'auto' | 'manual' | 'programmatic';
    timestamp: number;
  };
    }
    /**
     * A versatile notification component designed for WoT device control.
     * @example Basic Usage
     * ```html
     * <ui-notification type="info" message="Operation completed successfully"></ui-notification>
     * <ui-notification type="success" duration="3000" message="Device connected successfully"></ui-notification>
     * <ui-notification type="warning" show-close-button="true" message="Low battery warning"></ui-notification>
     * ```
     * @example JS integration with node-wot browser bundle
     * ```javascript
     * const notificationElement = document.getElementById('alert-notification');
     * const eventName = 'temperature-critical';
     * await thing.subscribeEvent(eventName, async (eventData) => {
     * const value = await eventData.value();
     * notificationElement.message = `Alert: ${eventName} - ${JSON.stringify(value)}`;
     * notificationElement.type = 'warning';
     * await notificationElement.show();
     * });
     * ```
     */
    interface HTMLUiNotificationElement extends Components.UiNotification, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiNotificationElementEventMap>(type: K, listener: (this: HTMLUiNotificationElement, ev: UiNotificationCustomEvent<HTMLUiNotificationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiNotificationElementEventMap>(type: K, listener: (this: HTMLUiNotificationElement, ev: UiNotificationCustomEvent<HTMLUiNotificationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiNotificationElement: {
        prototype: HTMLUiNotificationElement;
        new (): HTMLUiNotificationElement;
    };
    interface HTMLUiNumberPickerElementEventMap {
        "valueMsg": UiMsg<number>;
    }
    /**
     * A versatile number picker component designed for WoT device control and monitoring.
     * It has increment/decrement buttons, multiple visual styles, status and last updated timestamps.
     * Supports both interactive control and read-only monitoring modes with customizable ranges.
     * @example Basic Usage
     * ```html
     * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
     * <ui-number-picker variant="filled" value="50" min="0" max="100"></ui-number-picker>
     * <ui-number-picker readonly="true" label="Sensor" show-last-updated="true"></ui-number-picker>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const numberPicker = document.getElementById('device-volume');
     * const initialValue = Number(await (await thing.readProperty('volume')).value());
     * await numberPicker.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('volume', value);
     * }
     * });
     * ```
     */
    interface HTMLUiNumberPickerElement extends Components.UiNumberPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiNumberPickerElementEventMap>(type: K, listener: (this: HTMLUiNumberPickerElement, ev: UiNumberPickerCustomEvent<HTMLUiNumberPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiNumberPickerElementEventMap>(type: K, listener: (this: HTMLUiNumberPickerElement, ev: UiNumberPickerCustomEvent<HTMLUiNumberPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiNumberPickerElement: {
        prototype: HTMLUiNumberPickerElement;
        new (): HTMLUiNumberPickerElement;
    };
    /**
     * A versatile object component designed for WoT device to handle object type TD properties.
     * It auto-generates an editor interface for TD object-type properties with save button to push
     * all the changes at once.
     * It also features status indicators, last updated timestamps.
     * @example Basic Usage
     * ```html
     * <ui-object variant="outlined" label="Device Settings"></ui-object>
     * <ui-object variant="filled" show-last-updated="true" show-status="true"></ui-object>
     * <ui-object readonly="true" label="System Status" dark="true"></ui-object>
     * ```
     * @example JS integration with node-wot browser bundle
     * ```javascript
     * const objectEditor = document.getElementById('device-config');
     * const initialValue = await (await thing.readProperty('configuration')).value();
     * await objectEditor.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('configuration', value);
     * }
     * });
     * ```
     */
    interface HTMLUiObjectElement extends Components.UiObject, HTMLStencilElement {
    }
    var HTMLUiObjectElement: {
        prototype: HTMLUiObjectElement;
        new (): HTMLUiObjectElement;
    };
    interface HTMLUiSliderElementEventMap {
        "valueMsg": UiMsg<number>;
    }
    /**
     * A versatile slider component designed for WoT device control and monitoring.
     * It supports continuous value selection with multiple visual styles, orientations, and different thumb shapes.
     * Supports both interactive control and read-only monitoring modes with customizable ranges.
     * @example Basic Usage
     * ```html
     * <ui-slider variant="narrow" value="50" label="Brightness"></ui-slider>
     * <ui-slider variant="wide" value="75" min="0" max="100"></ui-slider>
     * <ui-slider readonly="true" label="Sensor" show-last-updated="true"></ui-slider>
     * ```
     * @example JS integration with node-wot browser bundle
     * ```javascript
     * const slider = document.getElementById('device-brightness');
     * const initialValue = Number(await (await thing.readProperty('brightness')).value());
     * await slider.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('brightness', value);
     * }
     * });
     * ```
     */
    interface HTMLUiSliderElement extends Components.UiSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiSliderElementEventMap>(type: K, listener: (this: HTMLUiSliderElement, ev: UiSliderCustomEvent<HTMLUiSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiSliderElementEventMap>(type: K, listener: (this: HTMLUiSliderElement, ev: UiSliderCustomEvent<HTMLUiSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiSliderElement: {
        prototype: HTMLUiSliderElement;
        new (): HTMLUiSliderElement;
    };
    interface HTMLUiTextElementEventMap {
        "valueMsg": UiMsg<string>;
    }
    /**
     * A versatile Text-Display component designed for WoT device control and monitoring
     * It has various features, visual styles and supports text-heavy data display.
     * Provides field, area, structured, unstructured, and editable modes with consistent styling.
     * @example Basic Usage
     * ```html
     * <ui-text mode="field" variant="outlined" value="Sample text" label="Name"></ui-text>
     * <ui-text mode="area" variant="filled" value="Long text content..." label="Description"></ui-text>
     * <ui-text mode="structured" variant="minimal" value='{"key": "value"}' label="JSON Data"></ui-text>
     * <ui-text mode="editable" variant="outlined" value="Edit me" label="Notes" id="notes-field"></ui-text>
     * ```
     * @example JS integration with node-wot browser bundle
     * ```javascript
     * const textElement = document.getElementById('text-field');
     * const value = await (await thing.readProperty('string')).value();
     * await textElement.setValue(value, {
     * writeOperation: async newValue => {
     * await thing.writeProperty('string', String(newValue));
     * },
     * });
     * ```
     */
    interface HTMLUiTextElement extends Components.UiText, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiTextElementEventMap>(type: K, listener: (this: HTMLUiTextElement, ev: UiTextCustomEvent<HTMLUiTextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiTextElementEventMap>(type: K, listener: (this: HTMLUiTextElement, ev: UiTextCustomEvent<HTMLUiTextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiTextElement: {
        prototype: HTMLUiTextElement;
        new (): HTMLUiTextElement;
    };
    interface HTMLUiToggleElementEventMap {
        "valueMsg": UiMsg<boolean>;
    }
    /**
     * A versatile toggle switch component designed for WoT device control and monitoring.
     * It has various features, multiple visual styles, status and last updated timestamps.
     * Supports both interactive control and read-only monitoring modes.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" value="true" label="Light"></ui-toggle>
     * <ui-toggle variant="neon" value="false" label="Fan"></ui-toggle>
     * <ui-toggle readonly="true" label="Sensor" show-last-updated="true"></ui-toggle>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const toggle = document.getElementById('device-toggle');
     * const initialValue = Boolean(await (await thing.readProperty('power')).value());
     * await toggle.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('power', value);
     * }
     * });
     * ```
     */
    interface HTMLUiToggleElement extends Components.UiToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiToggleElementEventMap>(type: K, listener: (this: HTMLUiToggleElement, ev: UiToggleCustomEvent<HTMLUiToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiToggleElementEventMap>(type: K, listener: (this: HTMLUiToggleElement, ev: UiToggleCustomEvent<HTMLUiToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiToggleElement: {
        prototype: HTMLUiToggleElement;
        new (): HTMLUiToggleElement;
    };
    interface HTMLElementTagNameMap {
        "ui-button": HTMLUiButtonElement;
        "ui-calendar": HTMLUiCalendarElement;
        "ui-checkbox": HTMLUiCheckboxElement;
        "ui-color-picker": HTMLUiColorPickerElement;
        "ui-event": HTMLUiEventElement;
        "ui-file-picker": HTMLUiFilePickerElement;
        "ui-notification": HTMLUiNotificationElement;
        "ui-number-picker": HTMLUiNumberPickerElement;
        "ui-object": HTMLUiObjectElement;
        "ui-slider": HTMLUiSliderElement;
        "ui-text": HTMLUiTextElement;
        "ui-toggle": HTMLUiToggleElement;
    }
}
declare namespace LocalJSX {
    /**
     * A simple button component designed for WoT device actions.
     * Features multiple visual styles, status indicators, and Web of Things integration.
     * Buttons trigger actions rather than managing state values.
     * @example Basic Usage
     * ```html
     * <ui-button label="Click Me"></ui-button>
     * <ui-button variant="filled" label="Submit" show-status="true"></ui-button>
     * ```
     * @example WoT Action Integration
     * ```javascript
     * const button = document.getElementById('device-button');
     * await button.setAction(async () => {
     * await thing.invokeAction('execute');
     * });
     * ```
     */
    interface UiButton {
        /**
          * Color theme for the button matching to thingsweb theme
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark"?: boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable keyboard navigation so user can click using 'Space' and 'Enter' keys when true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed on the button
          * @default 'Button'
         */
        "label"?: string;
        /**
          * Emitted when button is clicked through user interaction. Contains the button label, timestamp, and source information.
         */
        "onClickMsg"?: (event: UiButtonCustomEvent<UiMsg<string>>) => void;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus"?: boolean;
        /**
          * Visual style variant of the button. - minimal: Clean design with transparent background - outlined: Border-focused design with outline style - filled: Solid background design
          * @default 'outlined'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * A versatile calendar component designed for WoT device control.
     * It has various features, visual styles, status and last updated timestamps and other options.
     * @example Basic Usage
     * ```html
     * <ui-calendar variant="outlined" value="2023-12-25T00:00:00.000Z" label="Select Date"></ui-calendar>
     * <ui-calendar variant="filled" include-time="true" label="Pick Date & Time"></ui-calendar>
     * <ui-calendar variant="outlined" label="Device Calendar" show-last-updated="true"></ui-calendar>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const calendar = document.getElementById('device-calendar');
     * const initialValue = await (await thing.readProperty('targetDate')).value();
     * await calendar.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('targetDate', value);
     * }
     * });
     * ```
     */
    interface UiCalendar {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for readonly mode
          * @default true
         */
        "connected"?: boolean;
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark"?: boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled"?: boolean;
        /**
          * First day of week (0 = Sunday, 1 = Monday)
          * @default 0
         */
        "firstDayOfWeek"?: 0 | 1;
        /**
          * Include time picker alongside date picker
          * @default false
         */
        "includeTime"?: boolean;
        /**
          * Display calendar inline instead of as a popup
          * @default false
         */
        "inline"?: boolean;
        /**
          * Enable keyboard navigation so user can interact using keyboard when true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed above the calendar (optional)
         */
        "label"?: string;
        /**
          * Maximum selectable date (ISO string)  (Optional)
         */
        "maxDate"?: string;
        /**
          * Minimum selectable date (ISO string)  (Optional)
         */
        "minDate"?: string;
        /**
          * Emitted when calendar value changes through user interaction or setValue calls. Contains the new value, previous value, timestamp, and source information.
         */
        "onValueMsg"?: (event: UiCalendarCustomEvent<UiMsg<string>>) => void;
        /**
          * Show clear button to reset selection
          * @default true
         */
        "showClearButton"?: boolean;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default true
         */
        "showStatus"?: boolean;
        /**
          * Show today button
          * @default true
         */
        "showTodayButton"?: boolean;
        /**
          * Show week numbers in calendar grid
          * @default false
         */
        "showWeekNumbers"?: boolean;
        /**
          * Time format when includeTime is enabled (12-hour or 24-hour)
          * @default '12'
         */
        "timeFormat"?: '12' | '24';
        /**
          * Current date-time value of the calendar (ISO string)
         */
        "value"?: string;
        /**
          * Visual style variant of the calendar. - outlined: Border-focused design with outline style - filled: Solid background design
          * @default 'outlined'
         */
        "variant"?: 'outlined' | 'filled';
    }
    /**
     * A versatile checkbox component designed for WoT device control.
     * It has various features, multiple visual styles, status and last updated timestamps.
     * @example Basic Usage
     * ```html
     * <ui-checkbox variant="outlined" value="true" label="Accept Terms"></ui-checkbox>
     * <ui-checkbox variant="minimal" value="false" label="Enable Notifications"></ui-checkbox>
     * <ui-checkbox variant="filled" label="Device Status" show-last-updated="true"></ui-checkbox>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const checkbox = document.getElementById('device-checkbox');
     * const initialValue = Boolean(await (await thing.readProperty('enabled')).value());
     * await checkbox.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('enabled', value);
     * }
     * });
     * ```
     */
    interface UiCheckbox {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark"?: boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable keyboard navigation so user can toggle using 'Space' and 'Enter' keys) when true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed right to the checkbox (optional)
         */
        "label"?: string;
        /**
          * Emitted when checkbox value changes through user interaction or setValue calls. Contains the new value, previous value, timestamp, and source information.
         */
        "onValueMsg"?: (event: UiCheckboxCustomEvent<UiMsg<boolean>>) => void;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus"?: boolean;
        /**
          * Current boolean value of the checkbox
          * @default false
         */
        "value"?: boolean;
        /**
          * Visual style variant of the checkbox. - minimal: Clean design with transparent background - outlined: Border-focused design with outline style - filled: Solid background when checked
          * @default 'outlined'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * A versatile color picker component designed for WoT device control.
     * @example Basic Usage
     * ```html
     * <ui-color-picker value="#ff0000" label="Theme Color"></ui-color-picker>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const colorPicker = document.getElementById('device-color');
     * const initialValue = String(await (await thing.readProperty('deviceColor')).value());
     * await colorPicker.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('deviceColor', value);
     * }
     * });
     * ```
     */
    interface UiColorPicker {
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark"?: boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Text label displayed right to the color picker (optional)
         */
        "label"?: string;
        /**
          * Emitted when color picker value changes through user interaction or setValue calls. Contains the new value, previous value, timestamp, and source information.
         */
        "onValueMsg"?: (event: UiColorPickerCustomEvent<UiMsg<string>>) => void;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default true
         */
        "showStatus"?: boolean;
        /**
          * Current color value in hex format (e.g., #ff0000)
          * @default '#000000'
         */
        "value"?: string;
    }
    /**
     * A versatile event listener component designed for WoT device control.
     * It has various features, multiple visual styles, status and last updated timestamps.
     * @example Basic Usage
     * ```html
     * <ui-event variant="outlined" label="Temperature Events" event-name="temperatureChanged"></ui-event>
     * <ui-event variant="filled" label="Motion Events" max-events="20" show-timestamp="true"></ui-event>
     * <ui-event variant="outlined" label="Device Status" show-last-updated="true"></ui-event>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const eventListener = document.getElementById('event-listener');
     * await eventListener.startListening();
     * // Subscribe to event and pipe to component
     * await thing.subscribeEvent('on-bool', async data => {
     * const value = data?.value ?? data;
     * await eventListener.addEvent({
     * event: 'on-bool',
     * value,
     * timestamp: new Date().toISOString()
     * });
     * });
     * ```
     */
    interface UiEvent {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Connection status indicator
          * @default false
         */
        "connected"?: boolean;
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark"?: boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Event name to subscribe to (for identification/display purposes)
         */
        "eventName"?: string;
        /**
          * Enable keyboard navigation so user can interact using keyboard when true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed above the event listener (optional)
         */
        "label"?: string;
        /**
          * Maximum number of events to keep in history
          * @default 15
         */
        "maxEvents"?: number;
        /**
          * Emitted when an event is received. Contains the event data with metadata and source information.
         */
        "onEventReceived"?: (event: UiEventCustomEvent<UiMsg<any>>) => void;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default true
         */
        "showStatus"?: boolean;
        /**
          * Show event timestamps
          * @default true
         */
        "showTimestamp"?: boolean;
        /**
          * Visual style variant of the event listener. - outlined: Border-focused design with outline style - filled: Solid background design
          * @default 'outlined'
         */
        "variant"?: 'outlined' | 'filled';
    }
    /**
     * A versatile file picker component designed for WoT device control.
     * It supports single and multiple file selection, drag-and-drop, and file type restrictions.
     * @example Basic Usage
     * ```html
     * <ui-file-picker label="Upload Document" accept=".pdf,.doc,.docx"></ui-file-picker>
     * <ui-file-picker multiple="true" label="Select Images" accept="image/*"></ui-file-picker>
     * <ui-file-picker label="Device Files" show-last-updated="true"></ui-file-picker>
     * ```
     * @example JS integration with node-wot browser bundle
     * ```javascript
     * const file = document.getElementById('file');
     * await file.setUpload(async (fileData) => {
     * console.log('File processed:', fileData.name, 'Size:', fileData.size);
     * // Just log the file data, don't invoke action yet
     * return { success: true, message: 'File processed successfully' };
     * }, {
     * propertyName: 'selectedFile',
     * writeProperty: async (prop, value) => {
     * console.log('Writing to property:', prop, value);
     * await thing.writeProperty(prop, value);
     * }
     * });
     * ```
     */
    interface UiFilePicker {
        /**
          * File type restrictions (e.g., ".pdf,.doc", "image/*")
         */
        "accept"?: string;
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark"?: boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Text label displayed above the file picker (optional)
         */
        "label"?: string;
        /**
          * Maximum number of files when multiple is true
         */
        "maxFiles"?: number;
        /**
          * Maximum file size in bytes
         */
        "maxSize"?: number;
        /**
          * Whether multiple files can be selected
          * @default false
         */
        "multiple"?: boolean;
        /**
          * Emitted when file picker value changes through user interaction or setValue calls. Contains the new value, previous value, timestamp, and source information.
         */
        "onValueMsg"?: (event: UiFilePickerCustomEvent<UiMsg<File[]>>) => void;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default true
         */
        "showStatus"?: boolean;
    }
    /**
     * A versatile notification component designed for WoT device control.
     * @example Basic Usage
     * ```html
     * <ui-notification type="info" message="Operation completed successfully"></ui-notification>
     * <ui-notification type="success" duration="3000" message="Device connected successfully"></ui-notification>
     * <ui-notification type="warning" show-close-button="true" message="Low battery warning"></ui-notification>
     * ```
     * @example JS integration with node-wot browser bundle
     * ```javascript
     * const notificationElement = document.getElementById('alert-notification');
     * const eventName = 'temperature-critical';
     * await thing.subscribeEvent(eventName, async (eventData) => {
     * const value = await eventData.value();
     * notificationElement.message = `Alert: ${eventName} - ${JSON.stringify(value)}`;
     * notificationElement.type = 'warning';
     * await notificationElement.show();
     * });
     * ```
     */
    interface UiNotification {
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark"?: boolean;
        /**
          * Duration before auto-dismiss (0 to disable auto-dismiss)
          * @default 3000
         */
        "duration"?: number;
        /**
          * The message text to display in the notification
          * @default ''
         */
        "message"?: string;
        /**
          * Emitted when the notification is closed/dismissed. Contains information about how it was closed (auto, manual, programmatic).
         */
        "onNotificationClose"?: (event: UiNotificationCustomEvent<{
    message: string;
    type: string;
    dismissMethod: 'auto' | 'manual' | 'programmatic';
    timestamp: number;
  }>) => void;
        /**
          * Whether to show a close button
          * @default true
         */
        "showCloseButton"?: boolean;
        /**
          * Whether to show an icon based on the notification type
          * @default true
         */
        "showIcon"?: boolean;
        /**
          * Type of notification for different visual styling and icons. - info: General information (blue) - success: Success messages (green)  - warning: Warning messages (orange) - error: Error messages (red)
          * @default 'info'
         */
        "type"?: 'info' | 'success' | 'warning' | 'error';
    }
    /**
     * A versatile number picker component designed for WoT device control and monitoring.
     * It has increment/decrement buttons, multiple visual styles, status and last updated timestamps.
     * Supports both interactive control and read-only monitoring modes with customizable ranges.
     * @example Basic Usage
     * ```html
     * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
     * <ui-number-picker variant="filled" value="50" min="0" max="100"></ui-number-picker>
     * <ui-number-picker readonly="true" label="Sensor" show-last-updated="true"></ui-number-picker>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const numberPicker = document.getElementById('device-volume');
     * const initialValue = Number(await (await thing.readProperty('volume')).value());
     * await numberPicker.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('volume', value);
     * }
     * });
     * ```
     */
    interface UiNumberPicker {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for read-only monitoring
          * @default true
         */
        "connected"?: boolean;
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark"?: boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable keyboard navigation so user can change value using 'Arrow Up' and 'Arrow Down' keys) when true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed above the number picker (optional)
         */
        "label"?: string;
        /**
          * Maximum allowed value (optional)
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum allowed value (optional)
          * @default 0
         */
        "min"?: number;
        /**
          * Emitted when number picker value changes through user interaction or setValue calls. Contains the new value, previous value, timestamp, and source information.
         */
        "onValueMsg"?: (event: UiNumberPickerCustomEvent<UiMsg<number>>) => void;
        /**
          * Read only mode, display value but prevent changes when true. Just to monitor changes
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus"?: boolean;
        /**
          * Step increment/decrement amount (optional)
          * @default 1
         */
        "step"?: number;
        /**
          * Current numeric value of the number picker
          * @default 0
         */
        "value"?: number;
        /**
          * Visual style variant of the number picker. - minimal: Clean buttons with subtle background (default) - outlined: Buttons with border outline - filled: Solid filled buttons
          * @default 'minimal'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * A versatile object component designed for WoT device to handle object type TD properties.
     * It auto-generates an editor interface for TD object-type properties with save button to push
     * all the changes at once.
     * It also features status indicators, last updated timestamps.
     * @example Basic Usage
     * ```html
     * <ui-object variant="outlined" label="Device Settings"></ui-object>
     * <ui-object variant="filled" show-last-updated="true" show-status="true"></ui-object>
     * <ui-object readonly="true" label="System Status" dark="true"></ui-object>
     * ```
     * @example JS integration with node-wot browser bundle
     * ```javascript
     * const objectEditor = document.getElementById('device-config');
     * const initialValue = await (await thing.readProperty('configuration')).value();
     * await objectEditor.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('configuration', value);
     * }
     * });
     * ```
     */
    interface UiObject {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark"?: boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Text label displayed above the object editor (optional)
         */
        "label"?: string;
        /**
          * Read only mode, display value but prevent changes when true. Just to monitor changes
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default true
         */
        "showStatus"?: boolean;
        /**
          * Visual style variant of the object editor. - outlined: Border around container (default) - filled: Background-filled container with border
          * @default 'outlined'
         */
        "variant"?: 'outlined' | 'filled';
    }
    /**
     * A versatile slider component designed for WoT device control and monitoring.
     * It supports continuous value selection with multiple visual styles, orientations, and different thumb shapes.
     * Supports both interactive control and read-only monitoring modes with customizable ranges.
     * @example Basic Usage
     * ```html
     * <ui-slider variant="narrow" value="50" label="Brightness"></ui-slider>
     * <ui-slider variant="wide" value="75" min="0" max="100"></ui-slider>
     * <ui-slider readonly="true" label="Sensor" show-last-updated="true"></ui-slider>
     * ```
     * @example JS integration with node-wot browser bundle
     * ```javascript
     * const slider = document.getElementById('device-brightness');
     * const initialValue = Number(await (await thing.readProperty('brightness')).value());
     * await slider.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('brightness', value);
     * }
     * });
     * ```
     */
    interface UiSlider {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for read-only monitoring
          * @default true
         */
        "connected"?: boolean;
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark"?: boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable keyboard navigation so user can change value using 'Arrow Up' and 'Arrow Down' keys) when true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed above the slider (optional)
         */
        "label"?: string;
        /**
          * Maximum allowed value (optional)
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum allowed value (optional)
          * @default 0
         */
        "min"?: number;
        /**
          * Emitted when slider value changes through user interaction or setValue calls. Contains the new value, previous value, timestamp, and source information.
         */
        "onValueMsg"?: (event: UiSliderCustomEvent<UiMsg<number>>) => void;
        /**
          * Orientation of the slider
          * @default 'horizontal'
         */
        "orientation"?: 'horizontal' | 'vertical';
        /**
          * Read only mode, display value but prevent changes when true. Just to monitor changes
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus"?: boolean;
        /**
          * Step increment/decrement amount (optional)
          * @default 1
         */
        "step"?: number;
        /**
          * Shape of the slider thumb
          * @default 'circle'
         */
        "thumbShape"?: 'circle' | 'square' | 'arrow' | 'triangle' | 'diamond';
        /**
          * Current numeric value of the slider
          * @default 0
         */
        "value"?: number;
        /**
          * Visual style variant of the slider. - narrow: Thin track with minimal styling (default) - wide: Thicker track - rainbow: Multi-color gradient track - neon: Glowing effect styling - stepped: Visual step indicators
          * @default 'narrow'
         */
        "variant"?: 'narrow' | 'wide' | 'rainbow' | 'neon' | 'stepped';
    }
    /**
     * A versatile Text-Display component designed for WoT device control and monitoring
     * It has various features, visual styles and supports text-heavy data display.
     * Provides field, area, structured, unstructured, and editable modes with consistent styling.
     * @example Basic Usage
     * ```html
     * <ui-text mode="field" variant="outlined" value="Sample text" label="Name"></ui-text>
     * <ui-text mode="area" variant="filled" value="Long text content..." label="Description"></ui-text>
     * <ui-text mode="structured" variant="minimal" value='{"key": "value"}' label="JSON Data"></ui-text>
     * <ui-text mode="editable" variant="outlined" value="Edit me" label="Notes" id="notes-field"></ui-text>
     * ```
     * @example JS integration with node-wot browser bundle
     * ```javascript
     * const textElement = document.getElementById('text-field');
     * const value = await (await thing.readProperty('string')).value();
     * await textElement.setValue(value, {
     * writeOperation: async newValue => {
     * await thing.writeProperty('string', String(newValue));
     * },
     * });
     * ```
     */
    interface UiText {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark"?: boolean;
        /**
          * Debounce delay in milliseconds for editable mode updates (0 = disabled). Enabled it to reduce API calls by only sending updates after user stops typing.
          * @default 0
         */
        "debounceMs"?: number;
        /**
          * Text label displayed above the text display.
         */
        "label"?: string;
        /**
          * Maximum character limit (editable mode only).
         */
        "maxLength"?: number;
        /**
          * Maximum number of rows for area mode.
          * @default 10
         */
        "maxRows"?: number;
        /**
          * Minimum number of rows for area mode.
          * @default 3
         */
        "minRows"?: number;
        /**
          * Display mode for the text component. - field: One-line text display - area: Expandable text box (multi-line) - unstructured: Plain style, no highlighting - structured: Highlighted block (for JSON-like or formatted text) - editable: User can edit/write directly
          * @default 'unstructured'
         */
        "mode"?: 'field' | 'area' | 'unstructured' | 'structured' | 'editable';
        /**
          * Emitted when toggle value changes through user interaction or setValue calls. Contains the new value, previous value, timestamp, and source information.
         */
        "onValueMsg"?: (event: UiTextCustomEvent<UiMsg<string>>) => void;
        /**
          * Placeholder text shown when value is empty (editable mode only).
         */
        "placeholder"?: string;
        /**
          * Enable text area resizable.
          * @default true
         */
        "resizable"?: boolean;
        /**
          * Show character count
          * @default false
         */
        "showCharCount"?: boolean;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show line numbers
          * @default false
         */
        "showLineNumbers"?: boolean;
        /**
          * Show save button for explicit updates (editable mode only). When true, changes are not sent until user clicks save.
          * @default false
         */
        "showSaveButton"?: boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus"?: boolean;
        /**
          * Current text value of the component.
          * @default ''
         */
        "value"?: string;
        /**
          * Visual style variant of the text display. - minimal: Text-only with subtle underline - outlined: Border style applied (default) - filled: Background color applied
          * @default 'outlined'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * A versatile toggle switch component designed for WoT device control and monitoring.
     * It has various features, multiple visual styles, status and last updated timestamps.
     * Supports both interactive control and read-only monitoring modes.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" value="true" label="Light"></ui-toggle>
     * <ui-toggle variant="neon" value="false" label="Fan"></ui-toggle>
     * <ui-toggle readonly="true" label="Sensor" show-last-updated="true"></ui-toggle>
     * ```
     * @example JS integaration with node-wot browser bundle
     * ```javascript
     * const toggle = document.getElementById('device-toggle');
     * const initialValue = Boolean(await (await thing.readProperty('power')).value());
     * await toggle.setValue(initialValue, {
     * writeOperation: async value => {
     * await thing.writeProperty('power', value);
     * }
     * });
     * ```
     */
    interface UiToggle {
        /**
          * Color theme for the active state matching to thingsweb theme
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Connection state for read-only monitoring
          * @default true
         */
        "connected"?: boolean;
        /**
          * Enable dark mode theme styling when true
          * @default false
         */
        "dark"?: boolean;
        /**
          * Disable user interaction when true
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable keyboard navigation so user can toggle using 'Space' and 'Enter' keys) when true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed left to the toggle (optional)
         */
        "label"?: string;
        /**
          * Emitted when toggle value changes through user interaction or setValue calls. Contains the new value, previous value, timestamp, and source information.
         */
        "onValueMsg"?: (event: UiToggleCustomEvent<UiMsg<boolean>>) => void;
        /**
          * Read only mode, display value but prevent changes when true. Just to monitor changes
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Show last updated timestamp below the component
          * @default false
         */
        "showLastUpdated"?: boolean;
        /**
          * Show visual operation status indicators (loading, success, failed) right to the component
          * @default false
         */
        "showStatus"?: boolean;
        /**
          * Current boolean value of the toggle
          * @default false
         */
        "value"?: boolean;
        /**
          * Visual style variant of the toggle. - circle: Common pill-shaped toggle (default) - square: Rectangular toggle with square thumb - apple: iOS-style switch (bigger size, rounded edges) - cross: Shows cross when off, tick when on with red background when off and green when on - neon: Glowing effect when active
          * @default 'circle'
         */
        "variant"?: 'circle' | 'square' | 'apple' | 'cross' | 'neon';
    }
    interface IntrinsicElements {
        "ui-button": UiButton;
        "ui-calendar": UiCalendar;
        "ui-checkbox": UiCheckbox;
        "ui-color-picker": UiColorPicker;
        "ui-event": UiEvent;
        "ui-file-picker": UiFilePicker;
        "ui-notification": UiNotification;
        "ui-number-picker": UiNumberPicker;
        "ui-object": UiObject;
        "ui-slider": UiSlider;
        "ui-text": UiText;
        "ui-toggle": UiToggle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * A simple button component designed for WoT device actions.
             * Features multiple visual styles, status indicators, and Web of Things integration.
             * Buttons trigger actions rather than managing state values.
             * @example Basic Usage
             * ```html
             * <ui-button label="Click Me"></ui-button>
             * <ui-button variant="filled" label="Submit" show-status="true"></ui-button>
             * ```
             * @example WoT Action Integration
             * ```javascript
             * const button = document.getElementById('device-button');
             * await button.setAction(async () => {
             * await thing.invokeAction('execute');
             * });
             * ```
             */
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            /**
             * A versatile calendar component designed for WoT device control.
             * It has various features, visual styles, status and last updated timestamps and other options.
             * @example Basic Usage
             * ```html
             * <ui-calendar variant="outlined" value="2023-12-25T00:00:00.000Z" label="Select Date"></ui-calendar>
             * <ui-calendar variant="filled" include-time="true" label="Pick Date & Time"></ui-calendar>
             * <ui-calendar variant="outlined" label="Device Calendar" show-last-updated="true"></ui-calendar>
             * ```
             * @example JS integaration with node-wot browser bundle
             * ```javascript
             * const calendar = document.getElementById('device-calendar');
             * const initialValue = await (await thing.readProperty('targetDate')).value();
             * await calendar.setValue(initialValue, {
             * writeOperation: async value => {
             * await thing.writeProperty('targetDate', value);
             * }
             * });
             * ```
             */
            "ui-calendar": LocalJSX.UiCalendar & JSXBase.HTMLAttributes<HTMLUiCalendarElement>;
            /**
             * A versatile checkbox component designed for WoT device control.
             * It has various features, multiple visual styles, status and last updated timestamps.
             * @example Basic Usage
             * ```html
             * <ui-checkbox variant="outlined" value="true" label="Accept Terms"></ui-checkbox>
             * <ui-checkbox variant="minimal" value="false" label="Enable Notifications"></ui-checkbox>
             * <ui-checkbox variant="filled" label="Device Status" show-last-updated="true"></ui-checkbox>
             * ```
             * @example JS integaration with node-wot browser bundle
             * ```javascript
             * const checkbox = document.getElementById('device-checkbox');
             * const initialValue = Boolean(await (await thing.readProperty('enabled')).value());
             * await checkbox.setValue(initialValue, {
             * writeOperation: async value => {
             * await thing.writeProperty('enabled', value);
             * }
             * });
             * ```
             */
            "ui-checkbox": LocalJSX.UiCheckbox & JSXBase.HTMLAttributes<HTMLUiCheckboxElement>;
            /**
             * A versatile color picker component designed for WoT device control.
             * @example Basic Usage
             * ```html
             * <ui-color-picker value="#ff0000" label="Theme Color"></ui-color-picker>
             * ```
             * @example JS integaration with node-wot browser bundle
             * ```javascript
             * const colorPicker = document.getElementById('device-color');
             * const initialValue = String(await (await thing.readProperty('deviceColor')).value());
             * await colorPicker.setValue(initialValue, {
             * writeOperation: async value => {
             * await thing.writeProperty('deviceColor', value);
             * }
             * });
             * ```
             */
            "ui-color-picker": LocalJSX.UiColorPicker & JSXBase.HTMLAttributes<HTMLUiColorPickerElement>;
            /**
             * A versatile event listener component designed for WoT device control.
             * It has various features, multiple visual styles, status and last updated timestamps.
             * @example Basic Usage
             * ```html
             * <ui-event variant="outlined" label="Temperature Events" event-name="temperatureChanged"></ui-event>
             * <ui-event variant="filled" label="Motion Events" max-events="20" show-timestamp="true"></ui-event>
             * <ui-event variant="outlined" label="Device Status" show-last-updated="true"></ui-event>
             * ```
             * @example JS integaration with node-wot browser bundle
             * ```javascript
             * const eventListener = document.getElementById('event-listener');
             * await eventListener.startListening();
             * // Subscribe to event and pipe to component
             * await thing.subscribeEvent('on-bool', async data => {
             * const value = data?.value ?? data;
             * await eventListener.addEvent({
             * event: 'on-bool',
             * value,
             * timestamp: new Date().toISOString()
             * });
             * });
             * ```
             */
            "ui-event": LocalJSX.UiEvent & JSXBase.HTMLAttributes<HTMLUiEventElement>;
            /**
             * A versatile file picker component designed for WoT device control.
             * It supports single and multiple file selection, drag-and-drop, and file type restrictions.
             * @example Basic Usage
             * ```html
             * <ui-file-picker label="Upload Document" accept=".pdf,.doc,.docx"></ui-file-picker>
             * <ui-file-picker multiple="true" label="Select Images" accept="image/*"></ui-file-picker>
             * <ui-file-picker label="Device Files" show-last-updated="true"></ui-file-picker>
             * ```
             * @example JS integration with node-wot browser bundle
             * ```javascript
             * const file = document.getElementById('file');
             * await file.setUpload(async (fileData) => {
             * console.log('File processed:', fileData.name, 'Size:', fileData.size);
             * // Just log the file data, don't invoke action yet
             * return { success: true, message: 'File processed successfully' };
             * }, {
             * propertyName: 'selectedFile',
             * writeProperty: async (prop, value) => {
             * console.log('Writing to property:', prop, value);
             * await thing.writeProperty(prop, value);
             * }
             * });
             * ```
             */
            "ui-file-picker": LocalJSX.UiFilePicker & JSXBase.HTMLAttributes<HTMLUiFilePickerElement>;
            /**
             * A versatile notification component designed for WoT device control.
             * @example Basic Usage
             * ```html
             * <ui-notification type="info" message="Operation completed successfully"></ui-notification>
             * <ui-notification type="success" duration="3000" message="Device connected successfully"></ui-notification>
             * <ui-notification type="warning" show-close-button="true" message="Low battery warning"></ui-notification>
             * ```
             * @example JS integration with node-wot browser bundle
             * ```javascript
             * const notificationElement = document.getElementById('alert-notification');
             * const eventName = 'temperature-critical';
             * await thing.subscribeEvent(eventName, async (eventData) => {
             * const value = await eventData.value();
             * notificationElement.message = `Alert: ${eventName} - ${JSON.stringify(value)}`;
             * notificationElement.type = 'warning';
             * await notificationElement.show();
             * });
             * ```
             */
            "ui-notification": LocalJSX.UiNotification & JSXBase.HTMLAttributes<HTMLUiNotificationElement>;
            /**
             * A versatile number picker component designed for WoT device control and monitoring.
             * It has increment/decrement buttons, multiple visual styles, status and last updated timestamps.
             * Supports both interactive control and read-only monitoring modes with customizable ranges.
             * @example Basic Usage
             * ```html
             * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
             * <ui-number-picker variant="filled" value="50" min="0" max="100"></ui-number-picker>
             * <ui-number-picker readonly="true" label="Sensor" show-last-updated="true"></ui-number-picker>
             * ```
             * @example JS integaration with node-wot browser bundle
             * ```javascript
             * const numberPicker = document.getElementById('device-volume');
             * const initialValue = Number(await (await thing.readProperty('volume')).value());
             * await numberPicker.setValue(initialValue, {
             * writeOperation: async value => {
             * await thing.writeProperty('volume', value);
             * }
             * });
             * ```
             */
            "ui-number-picker": LocalJSX.UiNumberPicker & JSXBase.HTMLAttributes<HTMLUiNumberPickerElement>;
            /**
             * A versatile object component designed for WoT device to handle object type TD properties.
             * It auto-generates an editor interface for TD object-type properties with save button to push
             * all the changes at once.
             * It also features status indicators, last updated timestamps.
             * @example Basic Usage
             * ```html
             * <ui-object variant="outlined" label="Device Settings"></ui-object>
             * <ui-object variant="filled" show-last-updated="true" show-status="true"></ui-object>
             * <ui-object readonly="true" label="System Status" dark="true"></ui-object>
             * ```
             * @example JS integration with node-wot browser bundle
             * ```javascript
             * const objectEditor = document.getElementById('device-config');
             * const initialValue = await (await thing.readProperty('configuration')).value();
             * await objectEditor.setValue(initialValue, {
             * writeOperation: async value => {
             * await thing.writeProperty('configuration', value);
             * }
             * });
             * ```
             */
            "ui-object": LocalJSX.UiObject & JSXBase.HTMLAttributes<HTMLUiObjectElement>;
            /**
             * A versatile slider component designed for WoT device control and monitoring.
             * It supports continuous value selection with multiple visual styles, orientations, and different thumb shapes.
             * Supports both interactive control and read-only monitoring modes with customizable ranges.
             * @example Basic Usage
             * ```html
             * <ui-slider variant="narrow" value="50" label="Brightness"></ui-slider>
             * <ui-slider variant="wide" value="75" min="0" max="100"></ui-slider>
             * <ui-slider readonly="true" label="Sensor" show-last-updated="true"></ui-slider>
             * ```
             * @example JS integration with node-wot browser bundle
             * ```javascript
             * const slider = document.getElementById('device-brightness');
             * const initialValue = Number(await (await thing.readProperty('brightness')).value());
             * await slider.setValue(initialValue, {
             * writeOperation: async value => {
             * await thing.writeProperty('brightness', value);
             * }
             * });
             * ```
             */
            "ui-slider": LocalJSX.UiSlider & JSXBase.HTMLAttributes<HTMLUiSliderElement>;
            /**
             * A versatile Text-Display component designed for WoT device control and monitoring
             * It has various features, visual styles and supports text-heavy data display.
             * Provides field, area, structured, unstructured, and editable modes with consistent styling.
             * @example Basic Usage
             * ```html
             * <ui-text mode="field" variant="outlined" value="Sample text" label="Name"></ui-text>
             * <ui-text mode="area" variant="filled" value="Long text content..." label="Description"></ui-text>
             * <ui-text mode="structured" variant="minimal" value='{"key": "value"}' label="JSON Data"></ui-text>
             * <ui-text mode="editable" variant="outlined" value="Edit me" label="Notes" id="notes-field"></ui-text>
             * ```
             * @example JS integration with node-wot browser bundle
             * ```javascript
             * const textElement = document.getElementById('text-field');
             * const value = await (await thing.readProperty('string')).value();
             * await textElement.setValue(value, {
             * writeOperation: async newValue => {
             * await thing.writeProperty('string', String(newValue));
             * },
             * });
             * ```
             */
            "ui-text": LocalJSX.UiText & JSXBase.HTMLAttributes<HTMLUiTextElement>;
            /**
             * A versatile toggle switch component designed for WoT device control and monitoring.
             * It has various features, multiple visual styles, status and last updated timestamps.
             * Supports both interactive control and read-only monitoring modes.
             * @example Basic Usage
             * ```html
             * <ui-toggle variant="circle" value="true" label="Light"></ui-toggle>
             * <ui-toggle variant="neon" value="false" label="Fan"></ui-toggle>
             * <ui-toggle readonly="true" label="Sensor" show-last-updated="true"></ui-toggle>
             * ```
             * @example JS integaration with node-wot browser bundle
             * ```javascript
             * const toggle = document.getElementById('device-toggle');
             * const initialValue = Boolean(await (await thing.readProperty('power')).value());
             * await toggle.setValue(initialValue, {
             * writeOperation: async value => {
             * await thing.writeProperty('power', value);
             * }
             * });
             * ```
             */
            "ui-toggle": LocalJSX.UiToggle & JSXBase.HTMLAttributes<HTMLUiToggleElement>;
        }
    }
}
