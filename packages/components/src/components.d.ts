/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { UiMsg } from "./utils/types";
import { UiButtonClick } from "./components/ui-button/ui-button";
import { UiCalendarDateChange, UiCalendarValueChange } from "./components/ui-calendar/ui-calendar";
import { UiCheckboxCheckboxChange, UiCheckboxValueChange } from "./components/ui-checkbox/ui-checkbox";
import { UiNumberPickerValueChange } from "./components/ui-number-picker/ui-number-picker";
import { UiSliderValueChange } from "./components/ui-slider/ui-slider";
import { UiTextValueChange } from "./components/ui-text/ui-text";
export { UiMsg } from "./utils/types";
export { UiButtonClick } from "./components/ui-button/ui-button";
export { UiCalendarDateChange, UiCalendarValueChange } from "./components/ui-calendar/ui-calendar";
export { UiCheckboxCheckboxChange, UiCheckboxValueChange } from "./components/ui-checkbox/ui-checkbox";
export { UiNumberPickerValueChange } from "./components/ui-number-picker/ui-number-picker";
export { UiSliderValueChange } from "./components/ui-slider/ui-slider";
export { UiTextValueChange } from "./components/ui-text/ui-text";
export namespace Components {
    /**
     * Button component with various visual styles, matching the ui-number-picker design family.
     * Supports the same variants, colors, and themes as the number picker.
     * @example Basic Usage
     * ```html
     * <ui-button variant="minimal" label="Click Me"></ui-button>
     * ```
     * @example Different Variants
     * ```html
     * <ui-button variant="outlined" color="primary" label="Outlined Button"></ui-button>
     * <ui-button variant="filled" color="secondary" label="Filled Button"></ui-button>
     * ```
     * @example Custom Click Handler
     * ```html
     * <ui-button on-click="handleButtonClick" label="Custom Handler"></ui-button>
     * ```
     * @example Event Handling
     * ```javascript
     * window.handleButtonClick = function(data) {
     * console.log('Button clicked:', data.label);
     * // Your custom logic here
     * };
     * ```
     */
    interface UiButton {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Whether the component is disabled (cannot be interacted with).
          * @default false
         */
        "disabled": boolean;
        "getValue": () => Promise<string>;
        /**
          * Enable keyboard navigation. Default: true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Button text label.
          * @default 'Button'
         */
        "label": string;
        /**
          * Legacy mode prop for backward compatibility with older demos. Accepts 'read' to indicate read-only mode, 'readwrite' for interactive.
         */
        "mode"?: 'read' | 'readwrite';
        /**
          * Whether the component is read-only (displays value but cannot be changed).
          * @default false
         */
        "readonly": boolean;
        /**
          * Implement base class abstract methods
         */
        "setValue": (value: string) => Promise<boolean>;
        /**
          * Current state of the button. - active: Button is enabled (default) - disabled: Button cannot be interacted with
          * @default 'active'
         */
        "state": 'active' | 'disabled';
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * Visual style variant of the button. - minimal: Clean button with subtle background (default) - outlined: Button with border outline - filled: Solid filled button
          * @default 'minimal'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Calendar component for date-time selection with various visual styles and TD integration.
     * Link a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-calendar variant="outlined" color="primary" label="Select Date"></ui-calendar>
     * ```
     * @example TD Integration
     * ```html
     * <ui-calendar
     * td-url="http://device.local/properties/schedule"
     * variant="filled"
     * label="Device Schedule"
     * include-time="true">
     * </ui-calendar>
     * ```
     */
    interface UiCalendar {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Include time picker alongside date picker.
          * @default false
         */
        "includeTime": boolean;
        /**
          * Optional text label for the calendar.
         */
        "label"?: string;
        /**
          * Maximum selectable date (ISO string).
         */
        "maxDate"?: string;
        /**
          * Minimum selectable date (ISO string).
         */
        "minDate"?: string;
        /**
          * Current state of the calendar. - disabled: Calendar cannot be interacted with - default: Calendar is interactive (default)
          * @default 'default'
         */
        "state": 'disabled' | 'default';
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * Current selected date-time value (ISO string).
         */
        "value"?: string;
        /**
          * Visual style variant of the calendar. - minimal: Clean minimal design (default) - outlined: Border with background - filled: Solid background
          * @default 'minimal'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Checkbox component with consistent styling to match the design system.
     */
    interface UiCheckbox {
        /**
          * Whether the checkbox is checked.
          * @default false
         */
        "checked": boolean;
        /**
          * Color scheme to match design system.
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Disabled state
          * @default false
         */
        "disabled": boolean;
        /**
          * Keyboard interaction
          * @default true
         */
        "keyboard": boolean;
        /**
          * Label text
          * @default 'Checkbox'
         */
        "label": string;
        /**
          * Legacy mode mapping
         */
        "mode"?: 'read' | 'readwrite';
        /**
          * Readonly mode
          * @default false
         */
        "readonly": boolean;
        /**
          * Current state of the checkbox.
          * @default 'default'
         */
        "state": 'disabled' | 'active' | 'default';
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * Visual style variant of the checkbox.
          * @default 'outlined'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    interface UiHeading {
        "text": string;
    }
    /**
     * Number picker component with various visual styles, TD integration and customizable range.
     * Supports increment/decrement buttons with Thing Description integration for IoT devices.
     * @example Basic Usage
     * ```html
     * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
     * ```
     * @example TD Integration with HTTP
     * ```html
     * <ui-number-picker
     * td-url="http://device.local/properties/volume"
     * label="Device Volume"
     * protocol="http"
     * mode="readwrite"
     * min="0"
     * max="100">
     * </ui-number-picker>
     * ```
     * @example TD Integration with MQTT
     * ```html
     * <ui-number-picker
     * td-url="mqtt://device"
     * mqtt-host="localhost:1883"
     * mqtt-topic="device/volume"
     * label="MQTT Volume"
     * protocol="mqtt"
     * mode="readwrite">
     * </ui-number-picker>
     * ```
     * @example TD Device Read-Only (shows value only)
     * ```html
     * <ui-number-picker
     * td-url="http://sensor.local/temperature"
     * label="Temperature Sensor"
     * mode="read">
     * </ui-number-picker>
     * ```
     * @example Local Control with Custom Handler
     * ```html
     * <ui-number-picker
     * value="3"
     * on-change="handleNumberChange"
     * variant="filled"
     * label="Custom Counter">
     * </ui-number-picker>
     * ```
     * @example Event Handling
     * ```javascript
     * window.handleNumberChange = function(data) {
     * console.log('Number changed:', data.value);
     * console.log('Label:', data.label);
     * // Your custom logic here
     * };
     * ```
     */
    interface UiNumberPicker {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Optional text label, to display above the number picker.
         */
        "label"?: string;
        /**
          * Maximum allowed value.
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum allowed value.
          * @default 0
         */
        "min"?: number;
        /**
          * Device interaction mode. - read: Only read from device (display current value, no interaction) - write: Only write to device (control device but don't sync state) - readwrite: Read and write (full synchronization) - default
          * @default 'readwrite'
         */
        "mode": 'read' | 'write' | 'readwrite';
        /**
          * Current state of the number picker. - active: Number picker is enabled (default) - disabled: Number picker cannot be interacted with
          * @default 'active'
         */
        "state": 'active' | 'disabled';
        /**
          * Step increment/decrement amount.
          * @default 1
         */
        "step": number;
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * Current value of the number picker (for local control mode). When no td-url is provided and value is set, this controls the picker state.
          * @example 5, 10, 25
          * @default 0
         */
        "value": number;
        /**
          * Visual style variant of the number picker. - minimal: Clean buttons with subtle background (default) - outlined: Buttons with border outline - filled: Solid filled buttons
          * @default 'minimal'
         */
        "variant": 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Smart wrapper for TD properties that provides visual feedback, status indicators,
     * and handles the connection between UI controls and Thing Description properties.
     * @example Basic usage with toggle:
     * ```html
     * <ui-property-card property="on" thing-id="light-1" label="Living Room Light">
     *   <ui-toggle slot="control" value="false"></ui-toggle>
     * </ui-property-card>
     * ```
     */
    interface UiPropertyCard {
        /**
          * Acknowledge a successful operation
         */
        "ackSuccess": (message?: string) => Promise<void>;
        /**
          * Description text for the property
         */
        "description"?: string;
        /**
          * Display label for the property
         */
        "label"?: string;
        /**
          * Property name from the Thing Description
         */
        "property"?: string;
        /**
          * Report an error
         */
        "reportError": (message: string) => Promise<void>;
        /**
          * Property schema from Thing Description (for capability detection)
         */
        "schema"?: any;
        /**
          * Set the current status with optional auto-clear
         */
        "setStatus": (status: "idle" | "pending" | "success" | "error", message?: string, autoClearMs?: number) => Promise<void>;
        /**
          * Show capability badge (read-only, write-only, etc.)
          * @default true
         */
        "showCapabilityBadge": boolean;
        /**
          * Show status indicator (success, error, pending)
          * @default true
         */
        "showStatus": boolean;
        /**
          * Show last updated timestamp
          * @default true
         */
        "showTimestamp": boolean;
        /**
          * Thing ID this property belongs to
         */
        "thingId"?: string;
        /**
          * Visual style variant
          * @default 'default'
         */
        "variant": 'default' | 'compact' | 'minimal';
    }
    /**
     * Slider component with various features, multiple visual styles and TD integration.
     * Link a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="50" label="Brightness"></ui-slider>
     * ```
     * @example TD Integration
     * ```html
     * <ui-slider
     * td-url="http://plugfest.thingweb.io:80/http-data-schema-thing/properties/brightness"
     * min="0"
     * max="100"
     * label="Device Brightness"
     * enable-manual-control="true">
     * </ui-slider>
     * ```
     */
    interface UiSlider {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Enable manual control interface.
          * @default false
         */
        "enableManualControl": boolean;
        /**
          * Optional text label, to display text above the slider.
         */
        "label"?: string;
        /**
          * Maximum value of the slider.
          * @default 100
         */
        "max": number;
        /**
          * Minimum value of the slider.
          * @default 0
         */
        "min": number;
        /**
          * Orientation of the slider. - horizontal: Left to right slider (default) - vertical: Bottom to top slider
          * @default 'horizontal'
         */
        "orientation": 'horizontal' | 'vertical';
        /**
          * Current state of the slider. - disabled: Slider cannot be clicked or interacted with - default: Slider is interactive (default)
          * @default 'default'
         */
        "state": 'disabled' | 'default';
        /**
          * Step increment for the slider.
          * @default 1
         */
        "step": number;
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * Shape of the slider thumb. - circle: Round thumb (default) - square: Square thumb - arrow: Arrow-shaped thumb pointing right - triangle: Triangle-shaped thumb - diamond: Diamond-shaped thumb (<> style)
          * @default 'circle'
         */
        "thumbShape": 'circle' | 'square' | 'arrow' | 'triangle' | 'diamond';
        /**
          * Current value of the slider.
          * @default 0
         */
        "value": number;
        /**
          * Visual style variant of the slider. - narrow: Thin slider track (default) - wide: Thick slider track - rainbow: Gradient color track - neon: Glowing effect - stepped: Shows step marks
          * @default 'narrow'
         */
        "variant": 'narrow' | 'wide' | 'rainbow' | 'neon' | 'stepped';
    }
    interface UiText {
        /**
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * @default false
         */
        "expandable": boolean;
        "label"?: string;
        /**
          * @default 200
         */
        "maxHeight": number;
        "maxLength"?: number;
        "placeholder"?: string;
        /**
          * @default false
         */
        "resizable": boolean;
        /**
          * @default 4
         */
        "rows": number;
        /**
          * @default 'default'
         */
        "state": 'disabled' | 'active' | 'default';
        /**
          * @default 'unstructured'
         */
        "structure": 'unstructured' | 'json' | 'yaml' | 'xml' | 'markdown';
        /**
          * @default 'single'
         */
        "textType": 'single' | 'multi';
        /**
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * @default ''
         */
        "value": string;
        /**
          * @default 'display'
         */
        "variant": 'display' | 'edit';
    }
    /**
     * Advanced toggle switch component with reactive state management and multiple visual styles.
     * Provides accessibility features, flexible event handling, and beautiful UI variants.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" value="true" label="Light"></ui-toggle>
     * ```
     * @example Different Variants
     * ```html
     * <ui-toggle variant="apple" value="false" label="iOS Style"></ui-toggle>
     * <ui-toggle variant="square" value="true" label="Square Style"></ui-toggle>
     * <ui-toggle variant="cross" value="false" label="Cross/Tick Style"></ui-toggle>
     * <ui-toggle variant="neon" value="true" label="Neon Glow"></ui-toggle>
     * ```
     * @example Read-Only Mode
     * ```html
     * <ui-toggle readonly="true" value="false" label="Sensor Status"></ui-toggle>
     * ```
     * @example JavaScript Integration
     * ```javascript
     * const toggle = document.querySelector('ui-toggle');
     * // Listen for value changes (preferred)
     * toggle.addEventListener('valueMsg', (e) => {
     * console.log('New value:', e.detail.payload);
     * console.log('Previous:', e.detail.prev);
     * console.log('Timestamp:', e.detail.ts);
     * });
     * // Programmatically set value
     * await toggle.setValue(true);
     * // Get current value
     * const currentValue = await toggle.getValue();
     * ```
     * <!--
     * @deprecated The following events are deprecated, use valueMsg instead
     * @example Legacy Events (Deprecated)
     * ```javascript
     * // DON'T USE - Deprecated events
     * toggle.addEventListener('valueChange', (e) => {
     * console.log('Legacy value change:', e.detail.value);
     * });
     * toggle.addEventListener('toggle', (e) => {
     * console.log('Legacy toggle:', e.detail.active);
     * });
     * ```
     * -->
     */
    interface UiToggle {
        /**
          * Color theme variant.
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Enable dark theme for the component. When true, uses light text on dark backgrounds.
          * @default false
         */
        "dark": boolean;
        /**
          * Whether the toggle is disabled (cannot be interacted with).
          * @default false
         */
        "disabled": boolean;
        /**
          * Get the current toggle value.
          * @returns Promise that resolves to the current boolean value
         */
        "getValue": () => Promise<boolean>;
        /**
          * Enable keyboard navigation (Space and Enter keys). Default: true
          * @default true
         */
        "keyboard": boolean;
        /**
          * Text label displayed next to the toggle.
         */
        "label"?: string;
        /**
          * Legacy mode prop for backward compatibility with older demos. Accepts 'read' to indicate read-only mode, 'readwrite' for interactive.
         */
        "mode"?: 'read' | 'readwrite';
        /**
          * Whether the toggle is read-only (displays value but cannot be changed).
          * @default false
         */
        "readonly": boolean;
        /**
          * Set the toggle value programmatically.
          * @param value - The new boolean value
          * @returns Promise that resolves to true if successful
         */
        "setValue": (value: boolean) => Promise<boolean>;
        /**
          * Current boolean value of the toggle.
          * @default false
         */
        "value": boolean;
        /**
          * Visual style variant of the toggle.
          * @default 'circle'
         */
        "variant": 'circle' | 'square' | 'apple' | 'cross' | 'neon';
    }
}
export interface UiButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiButtonElement;
}
export interface UiCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiCalendarElement;
}
export interface UiCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiCheckboxElement;
}
export interface UiNumberPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiNumberPickerElement;
}
export interface UiPropertyCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiPropertyCardElement;
}
export interface UiSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiSliderElement;
}
export interface UiTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiTextElement;
}
export interface UiToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiToggleElement;
}
declare global {
    interface HTMLUiButtonElementEventMap {
        "valueMsg": UiMsg<string>;
        "buttonClick": UiButtonClick;
    }
    /**
     * Button component with various visual styles, matching the ui-number-picker design family.
     * Supports the same variants, colors, and themes as the number picker.
     * @example Basic Usage
     * ```html
     * <ui-button variant="minimal" label="Click Me"></ui-button>
     * ```
     * @example Different Variants
     * ```html
     * <ui-button variant="outlined" color="primary" label="Outlined Button"></ui-button>
     * <ui-button variant="filled" color="secondary" label="Filled Button"></ui-button>
     * ```
     * @example Custom Click Handler
     * ```html
     * <ui-button on-click="handleButtonClick" label="Custom Handler"></ui-button>
     * ```
     * @example Event Handling
     * ```javascript
     * window.handleButtonClick = function(data) {
     * console.log('Button clicked:', data.label);
     * // Your custom logic here
     * };
     * ```
     */
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiButtonElementEventMap>(type: K, listener: (this: HTMLUiButtonElement, ev: UiButtonCustomEvent<HTMLUiButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiButtonElementEventMap>(type: K, listener: (this: HTMLUiButtonElement, ev: UiButtonCustomEvent<HTMLUiButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiCalendarElementEventMap {
        "dateChange": UiCalendarDateChange;
        "valueChange": UiCalendarValueChange;
    }
    /**
     * Calendar component for date-time selection with various visual styles and TD integration.
     * Link a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-calendar variant="outlined" color="primary" label="Select Date"></ui-calendar>
     * ```
     * @example TD Integration
     * ```html
     * <ui-calendar
     * td-url="http://device.local/properties/schedule"
     * variant="filled"
     * label="Device Schedule"
     * include-time="true">
     * </ui-calendar>
     * ```
     */
    interface HTMLUiCalendarElement extends Components.UiCalendar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiCalendarElementEventMap>(type: K, listener: (this: HTMLUiCalendarElement, ev: UiCalendarCustomEvent<HTMLUiCalendarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiCalendarElementEventMap>(type: K, listener: (this: HTMLUiCalendarElement, ev: UiCalendarCustomEvent<HTMLUiCalendarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiCalendarElement: {
        prototype: HTMLUiCalendarElement;
        new (): HTMLUiCalendarElement;
    };
    interface HTMLUiCheckboxElementEventMap {
        "checkboxChange": UiCheckboxCheckboxChange;
        "valueChange": UiCheckboxValueChange;
        "valueMsg": import('../../utils/types').UiMsg<boolean>;
    }
    /**
     * Checkbox component with consistent styling to match the design system.
     */
    interface HTMLUiCheckboxElement extends Components.UiCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiCheckboxElementEventMap>(type: K, listener: (this: HTMLUiCheckboxElement, ev: UiCheckboxCustomEvent<HTMLUiCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiCheckboxElementEventMap>(type: K, listener: (this: HTMLUiCheckboxElement, ev: UiCheckboxCustomEvent<HTMLUiCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiCheckboxElement: {
        prototype: HTMLUiCheckboxElement;
        new (): HTMLUiCheckboxElement;
    };
    interface HTMLUiHeadingElement extends Components.UiHeading, HTMLStencilElement {
    }
    var HTMLUiHeadingElement: {
        prototype: HTMLUiHeadingElement;
        new (): HTMLUiHeadingElement;
    };
    interface HTMLUiNumberPickerElementEventMap {
        "valueChange": UiNumberPickerValueChange;
    }
    /**
     * Number picker component with various visual styles, TD integration and customizable range.
     * Supports increment/decrement buttons with Thing Description integration for IoT devices.
     * @example Basic Usage
     * ```html
     * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
     * ```
     * @example TD Integration with HTTP
     * ```html
     * <ui-number-picker
     * td-url="http://device.local/properties/volume"
     * label="Device Volume"
     * protocol="http"
     * mode="readwrite"
     * min="0"
     * max="100">
     * </ui-number-picker>
     * ```
     * @example TD Integration with MQTT
     * ```html
     * <ui-number-picker
     * td-url="mqtt://device"
     * mqtt-host="localhost:1883"
     * mqtt-topic="device/volume"
     * label="MQTT Volume"
     * protocol="mqtt"
     * mode="readwrite">
     * </ui-number-picker>
     * ```
     * @example TD Device Read-Only (shows value only)
     * ```html
     * <ui-number-picker
     * td-url="http://sensor.local/temperature"
     * label="Temperature Sensor"
     * mode="read">
     * </ui-number-picker>
     * ```
     * @example Local Control with Custom Handler
     * ```html
     * <ui-number-picker
     * value="3"
     * on-change="handleNumberChange"
     * variant="filled"
     * label="Custom Counter">
     * </ui-number-picker>
     * ```
     * @example Event Handling
     * ```javascript
     * window.handleNumberChange = function(data) {
     * console.log('Number changed:', data.value);
     * console.log('Label:', data.label);
     * // Your custom logic here
     * };
     * ```
     */
    interface HTMLUiNumberPickerElement extends Components.UiNumberPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiNumberPickerElementEventMap>(type: K, listener: (this: HTMLUiNumberPickerElement, ev: UiNumberPickerCustomEvent<HTMLUiNumberPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiNumberPickerElementEventMap>(type: K, listener: (this: HTMLUiNumberPickerElement, ev: UiNumberPickerCustomEvent<HTMLUiNumberPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiNumberPickerElement: {
        prototype: HTMLUiNumberPickerElement;
        new (): HTMLUiNumberPickerElement;
    };
    interface HTMLUiPropertyCardElementEventMap {
        "propertyAction": {
    action: 'read' | 'write' | 'observe' | 'unobserve';
    thingId?: string;
    property?: string;
    value?: any;
  };
    }
    /**
     * Smart wrapper for TD properties that provides visual feedback, status indicators,
     * and handles the connection between UI controls and Thing Description properties.
     * @example Basic usage with toggle:
     * ```html
     * <ui-property-card property="on" thing-id="light-1" label="Living Room Light">
     *   <ui-toggle slot="control" value="false"></ui-toggle>
     * </ui-property-card>
     * ```
     */
    interface HTMLUiPropertyCardElement extends Components.UiPropertyCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiPropertyCardElementEventMap>(type: K, listener: (this: HTMLUiPropertyCardElement, ev: UiPropertyCardCustomEvent<HTMLUiPropertyCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiPropertyCardElementEventMap>(type: K, listener: (this: HTMLUiPropertyCardElement, ev: UiPropertyCardCustomEvent<HTMLUiPropertyCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiPropertyCardElement: {
        prototype: HTMLUiPropertyCardElement;
        new (): HTMLUiPropertyCardElement;
    };
    interface HTMLUiSliderElementEventMap {
        "valueChange": UiSliderValueChange;
    }
    /**
     * Slider component with various features, multiple visual styles and TD integration.
     * Link a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="50" label="Brightness"></ui-slider>
     * ```
     * @example TD Integration
     * ```html
     * <ui-slider
     * td-url="http://plugfest.thingweb.io:80/http-data-schema-thing/properties/brightness"
     * min="0"
     * max="100"
     * label="Device Brightness"
     * enable-manual-control="true">
     * </ui-slider>
     * ```
     */
    interface HTMLUiSliderElement extends Components.UiSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiSliderElementEventMap>(type: K, listener: (this: HTMLUiSliderElement, ev: UiSliderCustomEvent<HTMLUiSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiSliderElementEventMap>(type: K, listener: (this: HTMLUiSliderElement, ev: UiSliderCustomEvent<HTMLUiSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiSliderElement: {
        prototype: HTMLUiSliderElement;
        new (): HTMLUiSliderElement;
    };
    interface HTMLUiTextElementEventMap {
        "textChange": UiTextValueChange;
        "valueChange": UiTextValueChange;
    }
    interface HTMLUiTextElement extends Components.UiText, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiTextElementEventMap>(type: K, listener: (this: HTMLUiTextElement, ev: UiTextCustomEvent<HTMLUiTextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiTextElementEventMap>(type: K, listener: (this: HTMLUiTextElement, ev: UiTextCustomEvent<HTMLUiTextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiTextElement: {
        prototype: HTMLUiTextElement;
        new (): HTMLUiTextElement;
    };
    interface HTMLUiToggleElementEventMap {
        "valueMsg": UiMsg<boolean>;
    }
    /**
     * Advanced toggle switch component with reactive state management and multiple visual styles.
     * Provides accessibility features, flexible event handling, and beautiful UI variants.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" value="true" label="Light"></ui-toggle>
     * ```
     * @example Different Variants
     * ```html
     * <ui-toggle variant="apple" value="false" label="iOS Style"></ui-toggle>
     * <ui-toggle variant="square" value="true" label="Square Style"></ui-toggle>
     * <ui-toggle variant="cross" value="false" label="Cross/Tick Style"></ui-toggle>
     * <ui-toggle variant="neon" value="true" label="Neon Glow"></ui-toggle>
     * ```
     * @example Read-Only Mode
     * ```html
     * <ui-toggle readonly="true" value="false" label="Sensor Status"></ui-toggle>
     * ```
     * @example JavaScript Integration
     * ```javascript
     * const toggle = document.querySelector('ui-toggle');
     * // Listen for value changes (preferred)
     * toggle.addEventListener('valueMsg', (e) => {
     * console.log('New value:', e.detail.payload);
     * console.log('Previous:', e.detail.prev);
     * console.log('Timestamp:', e.detail.ts);
     * });
     * // Programmatically set value
     * await toggle.setValue(true);
     * // Get current value
     * const currentValue = await toggle.getValue();
     * ```
     * <!--
     * @deprecated The following events are deprecated, use valueMsg instead
     * @example Legacy Events (Deprecated)
     * ```javascript
     * // DON'T USE - Deprecated events
     * toggle.addEventListener('valueChange', (e) => {
     * console.log('Legacy value change:', e.detail.value);
     * });
     * toggle.addEventListener('toggle', (e) => {
     * console.log('Legacy toggle:', e.detail.active);
     * });
     * ```
     * -->
     */
    interface HTMLUiToggleElement extends Components.UiToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiToggleElementEventMap>(type: K, listener: (this: HTMLUiToggleElement, ev: UiToggleCustomEvent<HTMLUiToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiToggleElementEventMap>(type: K, listener: (this: HTMLUiToggleElement, ev: UiToggleCustomEvent<HTMLUiToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiToggleElement: {
        prototype: HTMLUiToggleElement;
        new (): HTMLUiToggleElement;
    };
    interface HTMLElementTagNameMap {
        "ui-button": HTMLUiButtonElement;
        "ui-calendar": HTMLUiCalendarElement;
        "ui-checkbox": HTMLUiCheckboxElement;
        "ui-heading": HTMLUiHeadingElement;
        "ui-number-picker": HTMLUiNumberPickerElement;
        "ui-property-card": HTMLUiPropertyCardElement;
        "ui-slider": HTMLUiSliderElement;
        "ui-text": HTMLUiTextElement;
        "ui-toggle": HTMLUiToggleElement;
    }
}
declare namespace LocalJSX {
    /**
     * Button component with various visual styles, matching the ui-number-picker design family.
     * Supports the same variants, colors, and themes as the number picker.
     * @example Basic Usage
     * ```html
     * <ui-button variant="minimal" label="Click Me"></ui-button>
     * ```
     * @example Different Variants
     * ```html
     * <ui-button variant="outlined" color="primary" label="Outlined Button"></ui-button>
     * <ui-button variant="filled" color="secondary" label="Filled Button"></ui-button>
     * ```
     * @example Custom Click Handler
     * ```html
     * <ui-button on-click="handleButtonClick" label="Custom Handler"></ui-button>
     * ```
     * @example Event Handling
     * ```javascript
     * window.handleButtonClick = function(data) {
     * console.log('Button clicked:', data.label);
     * // Your custom logic here
     * };
     * ```
     */
    interface UiButton {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Whether the component is disabled (cannot be interacted with).
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable keyboard navigation. Default: true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Button text label.
          * @default 'Button'
         */
        "label"?: string;
        /**
          * Legacy mode prop for backward compatibility with older demos. Accepts 'read' to indicate read-only mode, 'readwrite' for interactive.
         */
        "mode"?: 'read' | 'readwrite';
        /**
          * Event emitted when button is clicked
         */
        "onButtonClick"?: (event: UiButtonCustomEvent<UiButtonClick>) => void;
        /**
          * Primary event emitted when the component value changes. Use this event for all value change handling.
         */
        "onValueMsg"?: (event: UiButtonCustomEvent<UiMsg<string>>) => void;
        /**
          * Whether the component is read-only (displays value but cannot be changed).
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Current state of the button. - active: Button is enabled (default) - disabled: Button cannot be interacted with
          * @default 'active'
         */
        "state"?: 'active' | 'disabled';
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * Visual style variant of the button. - minimal: Clean button with subtle background (default) - outlined: Button with border outline - filled: Solid filled button
          * @default 'minimal'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Calendar component for date-time selection with various visual styles and TD integration.
     * Link a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-calendar variant="outlined" color="primary" label="Select Date"></ui-calendar>
     * ```
     * @example TD Integration
     * ```html
     * <ui-calendar
     * td-url="http://device.local/properties/schedule"
     * variant="filled"
     * label="Device Schedule"
     * include-time="true">
     * </ui-calendar>
     * ```
     */
    interface UiCalendar {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Include time picker alongside date picker.
          * @default false
         */
        "includeTime"?: boolean;
        /**
          * Optional text label for the calendar.
         */
        "label"?: string;
        /**
          * Maximum selectable date (ISO string).
         */
        "maxDate"?: string;
        /**
          * Minimum selectable date (ISO string).
         */
        "minDate"?: string;
        /**
          * Event emitted when date changes
         */
        "onDateChange"?: (event: UiCalendarCustomEvent<UiCalendarDateChange>) => void;
        /**
          * Standardized valueChange event for calendar
         */
        "onValueChange"?: (event: UiCalendarCustomEvent<UiCalendarValueChange>) => void;
        /**
          * Current state of the calendar. - disabled: Calendar cannot be interacted with - default: Calendar is interactive (default)
          * @default 'default'
         */
        "state"?: 'disabled' | 'default';
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * Current selected date-time value (ISO string).
         */
        "value"?: string;
        /**
          * Visual style variant of the calendar. - minimal: Clean minimal design (default) - outlined: Border with background - filled: Solid background
          * @default 'minimal'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Checkbox component with consistent styling to match the design system.
     */
    interface UiCheckbox {
        /**
          * Whether the checkbox is checked.
          * @default false
         */
        "checked"?: boolean;
        /**
          * Color scheme to match design system.
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Disabled state
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Keyboard interaction
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Label text
          * @default 'Checkbox'
         */
        "label"?: string;
        /**
          * Legacy mode mapping
         */
        "mode"?: 'read' | 'readwrite';
        /**
          * Event emitted when checkbox state changes.
         */
        "onCheckboxChange"?: (event: UiCheckboxCustomEvent<UiCheckboxCheckboxChange>) => void;
        /**
          * Standardized valueChange event (boolean value)
         */
        "onValueChange"?: (event: UiCheckboxCustomEvent<UiCheckboxValueChange>) => void;
        /**
          * Unified UiMsg event
         */
        "onValueMsg"?: (event: UiCheckboxCustomEvent<import('../../utils/types').UiMsg<boolean>>) => void;
        /**
          * Readonly mode
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Current state of the checkbox.
          * @default 'default'
         */
        "state"?: 'disabled' | 'active' | 'default';
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * Visual style variant of the checkbox.
          * @default 'outlined'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    interface UiHeading {
        "text"?: string;
    }
    /**
     * Number picker component with various visual styles, TD integration and customizable range.
     * Supports increment/decrement buttons with Thing Description integration for IoT devices.
     * @example Basic Usage
     * ```html
     * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
     * ```
     * @example TD Integration with HTTP
     * ```html
     * <ui-number-picker
     * td-url="http://device.local/properties/volume"
     * label="Device Volume"
     * protocol="http"
     * mode="readwrite"
     * min="0"
     * max="100">
     * </ui-number-picker>
     * ```
     * @example TD Integration with MQTT
     * ```html
     * <ui-number-picker
     * td-url="mqtt://device"
     * mqtt-host="localhost:1883"
     * mqtt-topic="device/volume"
     * label="MQTT Volume"
     * protocol="mqtt"
     * mode="readwrite">
     * </ui-number-picker>
     * ```
     * @example TD Device Read-Only (shows value only)
     * ```html
     * <ui-number-picker
     * td-url="http://sensor.local/temperature"
     * label="Temperature Sensor"
     * mode="read">
     * </ui-number-picker>
     * ```
     * @example Local Control with Custom Handler
     * ```html
     * <ui-number-picker
     * value="3"
     * on-change="handleNumberChange"
     * variant="filled"
     * label="Custom Counter">
     * </ui-number-picker>
     * ```
     * @example Event Handling
     * ```javascript
     * window.handleNumberChange = function(data) {
     * console.log('Number changed:', data.value);
     * console.log('Label:', data.label);
     * // Your custom logic here
     * };
     * ```
     */
    interface UiNumberPicker {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Optional text label, to display above the number picker.
         */
        "label"?: string;
        /**
          * Maximum allowed value.
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum allowed value.
          * @default 0
         */
        "min"?: number;
        /**
          * Device interaction mode. - read: Only read from device (display current value, no interaction) - write: Only write to device (control device but don't sync state) - readwrite: Read and write (full synchronization) - default
          * @default 'readwrite'
         */
        "mode"?: 'read' | 'write' | 'readwrite';
        /**
          * Event emitted when value changes
         */
        "onValueChange"?: (event: UiNumberPickerCustomEvent<UiNumberPickerValueChange>) => void;
        /**
          * Current state of the number picker. - active: Number picker is enabled (default) - disabled: Number picker cannot be interacted with
          * @default 'active'
         */
        "state"?: 'active' | 'disabled';
        /**
          * Step increment/decrement amount.
          * @default 1
         */
        "step"?: number;
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * Current value of the number picker (for local control mode). When no td-url is provided and value is set, this controls the picker state.
          * @example 5, 10, 25
          * @default 0
         */
        "value"?: number;
        /**
          * Visual style variant of the number picker. - minimal: Clean buttons with subtle background (default) - outlined: Buttons with border outline - filled: Solid filled buttons
          * @default 'minimal'
         */
        "variant"?: 'minimal' | 'outlined' | 'filled';
    }
    /**
     * Smart wrapper for TD properties that provides visual feedback, status indicators,
     * and handles the connection between UI controls and Thing Description properties.
     * @example Basic usage with toggle:
     * ```html
     * <ui-property-card property="on" thing-id="light-1" label="Living Room Light">
     *   <ui-toggle slot="control" value="false"></ui-toggle>
     * </ui-property-card>
     * ```
     */
    interface UiPropertyCard {
        /**
          * Description text for the property
         */
        "description"?: string;
        /**
          * Display label for the property
         */
        "label"?: string;
        /**
          * Emitted when a control action should be performed (read, write, observe)
         */
        "onPropertyAction"?: (event: UiPropertyCardCustomEvent<{
    action: 'read' | 'write' | 'observe' | 'unobserve';
    thingId?: string;
    property?: string;
    value?: any;
  }>) => void;
        /**
          * Property name from the Thing Description
         */
        "property"?: string;
        /**
          * Property schema from Thing Description (for capability detection)
         */
        "schema"?: any;
        /**
          * Show capability badge (read-only, write-only, etc.)
          * @default true
         */
        "showCapabilityBadge"?: boolean;
        /**
          * Show status indicator (success, error, pending)
          * @default true
         */
        "showStatus"?: boolean;
        /**
          * Show last updated timestamp
          * @default true
         */
        "showTimestamp"?: boolean;
        /**
          * Thing ID this property belongs to
         */
        "thingId"?: string;
        /**
          * Visual style variant
          * @default 'default'
         */
        "variant"?: 'default' | 'compact' | 'minimal';
    }
    /**
     * Slider component with various features, multiple visual styles and TD integration.
     * Link a direct property URL for plug-and-play device control.
     * @example Basic Usage
     * ```html
     * <ui-slider variant="narrow" min="0" max="100" value="50" label="Brightness"></ui-slider>
     * ```
     * @example TD Integration
     * ```html
     * <ui-slider
     * td-url="http://plugfest.thingweb.io:80/http-data-schema-thing/properties/brightness"
     * min="0"
     * max="100"
     * label="Device Brightness"
     * enable-manual-control="true">
     * </ui-slider>
     * ```
     */
    interface UiSlider {
        /**
          * Color scheme to match thingsweb webpage
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Enable manual control interface.
          * @default false
         */
        "enableManualControl"?: boolean;
        /**
          * Optional text label, to display text above the slider.
         */
        "label"?: string;
        /**
          * Maximum value of the slider.
          * @default 100
         */
        "max"?: number;
        /**
          * Minimum value of the slider.
          * @default 0
         */
        "min"?: number;
        /**
          * Event emitted when value changes
         */
        "onValueChange"?: (event: UiSliderCustomEvent<UiSliderValueChange>) => void;
        /**
          * Orientation of the slider. - horizontal: Left to right slider (default) - vertical: Bottom to top slider
          * @default 'horizontal'
         */
        "orientation"?: 'horizontal' | 'vertical';
        /**
          * Current state of the slider. - disabled: Slider cannot be clicked or interacted with - default: Slider is interactive (default)
          * @default 'default'
         */
        "state"?: 'disabled' | 'default';
        /**
          * Step increment for the slider.
          * @default 1
         */
        "step"?: number;
        /**
          * Theme for the component.
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * Shape of the slider thumb. - circle: Round thumb (default) - square: Square thumb - arrow: Arrow-shaped thumb pointing right - triangle: Triangle-shaped thumb - diamond: Diamond-shaped thumb (<> style)
          * @default 'circle'
         */
        "thumbShape"?: 'circle' | 'square' | 'arrow' | 'triangle' | 'diamond';
        /**
          * Current value of the slider.
          * @default 0
         */
        "value"?: number;
        /**
          * Visual style variant of the slider. - narrow: Thin slider track (default) - wide: Thick slider track - rainbow: Gradient color track - neon: Glowing effect - stepped: Shows step marks
          * @default 'narrow'
         */
        "variant"?: 'narrow' | 'wide' | 'rainbow' | 'neon' | 'stepped';
    }
    interface UiText {
        /**
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * @default false
         */
        "expandable"?: boolean;
        "label"?: string;
        /**
          * @default 200
         */
        "maxHeight"?: number;
        "maxLength"?: number;
        "onTextChange"?: (event: UiTextCustomEvent<UiTextValueChange>) => void;
        "onValueChange"?: (event: UiTextCustomEvent<UiTextValueChange>) => void;
        "placeholder"?: string;
        /**
          * @default false
         */
        "resizable"?: boolean;
        /**
          * @default 4
         */
        "rows"?: number;
        /**
          * @default 'default'
         */
        "state"?: 'disabled' | 'active' | 'default';
        /**
          * @default 'unstructured'
         */
        "structure"?: 'unstructured' | 'json' | 'yaml' | 'xml' | 'markdown';
        /**
          * @default 'single'
         */
        "textType"?: 'single' | 'multi';
        /**
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * @default ''
         */
        "value"?: string;
        /**
          * @default 'display'
         */
        "variant"?: 'display' | 'edit';
    }
    /**
     * Advanced toggle switch component with reactive state management and multiple visual styles.
     * Provides accessibility features, flexible event handling, and beautiful UI variants.
     * @example Basic Usage
     * ```html
     * <ui-toggle variant="circle" value="true" label="Light"></ui-toggle>
     * ```
     * @example Different Variants
     * ```html
     * <ui-toggle variant="apple" value="false" label="iOS Style"></ui-toggle>
     * <ui-toggle variant="square" value="true" label="Square Style"></ui-toggle>
     * <ui-toggle variant="cross" value="false" label="Cross/Tick Style"></ui-toggle>
     * <ui-toggle variant="neon" value="true" label="Neon Glow"></ui-toggle>
     * ```
     * @example Read-Only Mode
     * ```html
     * <ui-toggle readonly="true" value="false" label="Sensor Status"></ui-toggle>
     * ```
     * @example JavaScript Integration
     * ```javascript
     * const toggle = document.querySelector('ui-toggle');
     * // Listen for value changes (preferred)
     * toggle.addEventListener('valueMsg', (e) => {
     * console.log('New value:', e.detail.payload);
     * console.log('Previous:', e.detail.prev);
     * console.log('Timestamp:', e.detail.ts);
     * });
     * // Programmatically set value
     * await toggle.setValue(true);
     * // Get current value
     * const currentValue = await toggle.getValue();
     * ```
     * <!--
     * @deprecated The following events are deprecated, use valueMsg instead
     * @example Legacy Events (Deprecated)
     * ```javascript
     * // DON'T USE - Deprecated events
     * toggle.addEventListener('valueChange', (e) => {
     * console.log('Legacy value change:', e.detail.value);
     * });
     * toggle.addEventListener('toggle', (e) => {
     * console.log('Legacy toggle:', e.detail.active);
     * });
     * ```
     * -->
     */
    interface UiToggle {
        /**
          * Color theme variant.
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Enable dark theme for the component. When true, uses light text on dark backgrounds.
          * @default false
         */
        "dark"?: boolean;
        /**
          * Whether the toggle is disabled (cannot be interacted with).
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Enable keyboard navigation (Space and Enter keys). Default: true
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * Text label displayed next to the toggle.
         */
        "label"?: string;
        /**
          * Legacy mode prop for backward compatibility with older demos. Accepts 'read' to indicate read-only mode, 'readwrite' for interactive.
         */
        "mode"?: 'read' | 'readwrite';
        /**
          * Primary event emitted when the toggle value changes. Use this event for all value change handling.
         */
        "onValueMsg"?: (event: UiToggleCustomEvent<UiMsg<boolean>>) => void;
        /**
          * Whether the toggle is read-only (displays value but cannot be changed).
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Current boolean value of the toggle.
          * @default false
         */
        "value"?: boolean;
        /**
          * Visual style variant of the toggle.
          * @default 'circle'
         */
        "variant"?: 'circle' | 'square' | 'apple' | 'cross' | 'neon';
    }
    interface IntrinsicElements {
        "ui-button": UiButton;
        "ui-calendar": UiCalendar;
        "ui-checkbox": UiCheckbox;
        "ui-heading": UiHeading;
        "ui-number-picker": UiNumberPicker;
        "ui-property-card": UiPropertyCard;
        "ui-slider": UiSlider;
        "ui-text": UiText;
        "ui-toggle": UiToggle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * Button component with various visual styles, matching the ui-number-picker design family.
             * Supports the same variants, colors, and themes as the number picker.
             * @example Basic Usage
             * ```html
             * <ui-button variant="minimal" label="Click Me"></ui-button>
             * ```
             * @example Different Variants
             * ```html
             * <ui-button variant="outlined" color="primary" label="Outlined Button"></ui-button>
             * <ui-button variant="filled" color="secondary" label="Filled Button"></ui-button>
             * ```
             * @example Custom Click Handler
             * ```html
             * <ui-button on-click="handleButtonClick" label="Custom Handler"></ui-button>
             * ```
             * @example Event Handling
             * ```javascript
             * window.handleButtonClick = function(data) {
             * console.log('Button clicked:', data.label);
             * // Your custom logic here
             * };
             * ```
             */
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            /**
             * Calendar component for date-time selection with various visual styles and TD integration.
             * Link a direct property URL for plug-and-play device control.
             * @example Basic Usage
             * ```html
             * <ui-calendar variant="outlined" color="primary" label="Select Date"></ui-calendar>
             * ```
             * @example TD Integration
             * ```html
             * <ui-calendar
             * td-url="http://device.local/properties/schedule"
             * variant="filled"
             * label="Device Schedule"
             * include-time="true">
             * </ui-calendar>
             * ```
             */
            "ui-calendar": LocalJSX.UiCalendar & JSXBase.HTMLAttributes<HTMLUiCalendarElement>;
            /**
             * Checkbox component with consistent styling to match the design system.
             */
            "ui-checkbox": LocalJSX.UiCheckbox & JSXBase.HTMLAttributes<HTMLUiCheckboxElement>;
            "ui-heading": LocalJSX.UiHeading & JSXBase.HTMLAttributes<HTMLUiHeadingElement>;
            /**
             * Number picker component with various visual styles, TD integration and customizable range.
             * Supports increment/decrement buttons with Thing Description integration for IoT devices.
             * @example Basic Usage
             * ```html
             * <ui-number-picker variant="minimal" value="3" label="Quantity"></ui-number-picker>
             * ```
             * @example TD Integration with HTTP
             * ```html
             * <ui-number-picker
             * td-url="http://device.local/properties/volume"
             * label="Device Volume"
             * protocol="http"
             * mode="readwrite"
             * min="0"
             * max="100">
             * </ui-number-picker>
             * ```
             * @example TD Integration with MQTT
             * ```html
             * <ui-number-picker
             * td-url="mqtt://device"
             * mqtt-host="localhost:1883"
             * mqtt-topic="device/volume"
             * label="MQTT Volume"
             * protocol="mqtt"
             * mode="readwrite">
             * </ui-number-picker>
             * ```
             * @example TD Device Read-Only (shows value only)
             * ```html
             * <ui-number-picker
             * td-url="http://sensor.local/temperature"
             * label="Temperature Sensor"
             * mode="read">
             * </ui-number-picker>
             * ```
             * @example Local Control with Custom Handler
             * ```html
             * <ui-number-picker
             * value="3"
             * on-change="handleNumberChange"
             * variant="filled"
             * label="Custom Counter">
             * </ui-number-picker>
             * ```
             * @example Event Handling
             * ```javascript
             * window.handleNumberChange = function(data) {
             * console.log('Number changed:', data.value);
             * console.log('Label:', data.label);
             * // Your custom logic here
             * };
             * ```
             */
            "ui-number-picker": LocalJSX.UiNumberPicker & JSXBase.HTMLAttributes<HTMLUiNumberPickerElement>;
            /**
             * Smart wrapper for TD properties that provides visual feedback, status indicators,
             * and handles the connection between UI controls and Thing Description properties.
             * @example Basic usage with toggle:
             * ```html
             * <ui-property-card property="on" thing-id="light-1" label="Living Room Light">
             *   <ui-toggle slot="control" value="false"></ui-toggle>
             * </ui-property-card>
             * ```
             */
            "ui-property-card": LocalJSX.UiPropertyCard & JSXBase.HTMLAttributes<HTMLUiPropertyCardElement>;
            /**
             * Slider component with various features, multiple visual styles and TD integration.
             * Link a direct property URL for plug-and-play device control.
             * @example Basic Usage
             * ```html
             * <ui-slider variant="narrow" min="0" max="100" value="50" label="Brightness"></ui-slider>
             * ```
             * @example TD Integration
             * ```html
             * <ui-slider
             * td-url="http://plugfest.thingweb.io:80/http-data-schema-thing/properties/brightness"
             * min="0"
             * max="100"
             * label="Device Brightness"
             * enable-manual-control="true">
             * </ui-slider>
             * ```
             */
            "ui-slider": LocalJSX.UiSlider & JSXBase.HTMLAttributes<HTMLUiSliderElement>;
            "ui-text": LocalJSX.UiText & JSXBase.HTMLAttributes<HTMLUiTextElement>;
            /**
             * Advanced toggle switch component with reactive state management and multiple visual styles.
             * Provides accessibility features, flexible event handling, and beautiful UI variants.
             * @example Basic Usage
             * ```html
             * <ui-toggle variant="circle" value="true" label="Light"></ui-toggle>
             * ```
             * @example Different Variants
             * ```html
             * <ui-toggle variant="apple" value="false" label="iOS Style"></ui-toggle>
             * <ui-toggle variant="square" value="true" label="Square Style"></ui-toggle>
             * <ui-toggle variant="cross" value="false" label="Cross/Tick Style"></ui-toggle>
             * <ui-toggle variant="neon" value="true" label="Neon Glow"></ui-toggle>
             * ```
             * @example Read-Only Mode
             * ```html
             * <ui-toggle readonly="true" value="false" label="Sensor Status"></ui-toggle>
             * ```
             * @example JavaScript Integration
             * ```javascript
             * const toggle = document.querySelector('ui-toggle');
             * // Listen for value changes (preferred)
             * toggle.addEventListener('valueMsg', (e) => {
             * console.log('New value:', e.detail.payload);
             * console.log('Previous:', e.detail.prev);
             * console.log('Timestamp:', e.detail.ts);
             * });
             * // Programmatically set value
             * await toggle.setValue(true);
             * // Get current value
             * const currentValue = await toggle.getValue();
             * ```
             * <!--
             * @deprecated The following events are deprecated, use valueMsg instead
             * @example Legacy Events (Deprecated)
             * ```javascript
             * // DON'T USE - Deprecated events
             * toggle.addEventListener('valueChange', (e) => {
             * console.log('Legacy value change:', e.detail.value);
             * });
             * toggle.addEventListener('toggle', (e) => {
             * console.log('Legacy toggle:', e.detail.active);
             * });
             * ```
             * -->
             */
            "ui-toggle": LocalJSX.UiToggle & JSXBase.HTMLAttributes<HTMLUiToggleElement>;
        }
    }
}
