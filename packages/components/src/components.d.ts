/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IoTDevice } from "./components/ui-toggle/ui-toggle";
export { IoTDevice } from "./components/ui-toggle/ui-toggle";
export namespace Components {
    interface UiHeading {
        "text": string;
    }
    /**
     * UI Toggle - A Smart Switch for Web and IoT
     * Simple toggle component that can control anything from UI state to smart lights!
     * Just give it a device URL and property name - it handles the rest.
     * @example <!-- Basic toggle -->
     * <ui-toggle label="Dark mode"></ui-toggle>
     * <!-- Smart device control -->
     * <ui-toggle 
     *   device-url="https://my-lamp.local/td" 
     *   property="power"
     *   label="Living room lamp">
     * </ui-toggle>
     */
    interface UiToggle {
        /**
          * Color scheme primary = teal/green secondary = pink/purple   neutral = gray
          * @default 'primary'
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Legacy way to connect devices (use device-url instead)
          * @deprecated
         */
        "device"?: IoTDevice;
        /**
          * URL to your smart device's description file Makes the toggle control real IoT devices!
         */
        "deviceUrl"?: string;
        /**
          * Text shown next to toggle (clickable)
         */
        "label"?: string;
        /**
          * Which device property to control (default: "switch") Common names: "power", "state", "on", "enabled"
          * @default 'switch'
         */
        "property": string;
        /**
          * Is the toggle on or off? default = off/inactive active = on/active   disabled = can't be clicked
          * @default 'default'
         */
        "state": 'default' | 'active' | 'disabled';
        /**
          * Light or dark appearance
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * How the toggle looks circle = standard pill shape square = rectangular with rounded corners   apple = iOS style with shadow cross = shows × and ✓ icons neon = glowing effect
          * @default 'circle'
         */
        "variant": 'circle' | 'square' | 'apple' | 'cross' | 'neon';
    }
}
export interface UiToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiToggleElement;
}
declare global {
    interface HTMLUiHeadingElement extends Components.UiHeading, HTMLStencilElement {
    }
    var HTMLUiHeadingElement: {
        prototype: HTMLUiHeadingElement;
        new (): HTMLUiHeadingElement;
    };
    interface HTMLUiToggleElementEventMap {
        "toggle": { active: boolean; state: string };
    }
    /**
     * UI Toggle - A Smart Switch for Web and IoT
     * Simple toggle component that can control anything from UI state to smart lights!
     * Just give it a device URL and property name - it handles the rest.
     * @example <!-- Basic toggle -->
     * <ui-toggle label="Dark mode"></ui-toggle>
     * <!-- Smart device control -->
     * <ui-toggle 
     *   device-url="https://my-lamp.local/td" 
     *   property="power"
     *   label="Living room lamp">
     * </ui-toggle>
     */
    interface HTMLUiToggleElement extends Components.UiToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiToggleElementEventMap>(type: K, listener: (this: HTMLUiToggleElement, ev: UiToggleCustomEvent<HTMLUiToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiToggleElementEventMap>(type: K, listener: (this: HTMLUiToggleElement, ev: UiToggleCustomEvent<HTMLUiToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiToggleElement: {
        prototype: HTMLUiToggleElement;
        new (): HTMLUiToggleElement;
    };
    interface HTMLElementTagNameMap {
        "ui-heading": HTMLUiHeadingElement;
        "ui-toggle": HTMLUiToggleElement;
    }
}
declare namespace LocalJSX {
    interface UiHeading {
        "text"?: string;
    }
    /**
     * UI Toggle - A Smart Switch for Web and IoT
     * Simple toggle component that can control anything from UI state to smart lights!
     * Just give it a device URL and property name - it handles the rest.
     * @example <!-- Basic toggle -->
     * <ui-toggle label="Dark mode"></ui-toggle>
     * <!-- Smart device control -->
     * <ui-toggle 
     *   device-url="https://my-lamp.local/td" 
     *   property="power"
     *   label="Living room lamp">
     * </ui-toggle>
     */
    interface UiToggle {
        /**
          * Color scheme primary = teal/green secondary = pink/purple   neutral = gray
          * @default 'primary'
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Legacy way to connect devices (use device-url instead)
          * @deprecated
         */
        "device"?: IoTDevice;
        /**
          * URL to your smart device's description file Makes the toggle control real IoT devices!
         */
        "deviceUrl"?: string;
        /**
          * Text shown next to toggle (clickable)
         */
        "label"?: string;
        "onToggle"?: (event: UiToggleCustomEvent<{ active: boolean; state: string }>) => void;
        /**
          * Which device property to control (default: "switch") Common names: "power", "state", "on", "enabled"
          * @default 'switch'
         */
        "property"?: string;
        /**
          * Is the toggle on or off? default = off/inactive active = on/active   disabled = can't be clicked
          * @default 'default'
         */
        "state"?: 'default' | 'active' | 'disabled';
        /**
          * Light or dark appearance
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * How the toggle looks circle = standard pill shape square = rectangular with rounded corners   apple = iOS style with shadow cross = shows × and ✓ icons neon = glowing effect
          * @default 'circle'
         */
        "variant"?: 'circle' | 'square' | 'apple' | 'cross' | 'neon';
    }
    interface IntrinsicElements {
        "ui-heading": UiHeading;
        "ui-toggle": UiToggle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ui-heading": LocalJSX.UiHeading & JSXBase.HTMLAttributes<HTMLUiHeadingElement>;
            /**
             * UI Toggle - A Smart Switch for Web and IoT
             * Simple toggle component that can control anything from UI state to smart lights!
             * Just give it a device URL and property name - it handles the rest.
             * @example <!-- Basic toggle -->
             * <ui-toggle label="Dark mode"></ui-toggle>
             * <!-- Smart device control -->
             * <ui-toggle 
             *   device-url="https://my-lamp.local/td" 
             *   property="power"
             *   label="Living room lamp">
             * </ui-toggle>
             */
            "ui-toggle": LocalJSX.UiToggle & JSXBase.HTMLAttributes<HTMLUiToggleElement>;
        }
    }
}
