/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ThingProperty } from "./components/ui-toggle/ui-toggle";
export { ThingProperty } from "./components/ui-toggle/ui-toggle";
export namespace Components {
    interface UiHeading {
        "text": string;
    }
    /**
     * UI Toggle Component
     * @component 
     * @description A modern, accessible toggle switch with multiple visual styles and themes.
     * Perfect for forms, settings panels, and IoT device controls.
     * Features smooth animations and Web of Things integration.
     * @example <ui-toggle variant="circle" state="active" label="Enable notifications"></ui-toggle>
     */
    interface UiToggle {
        /**
          * Color scheme for the toggle appearance
          * @type {'primary' | 'secondary' | 'neutral'}
          * @default 'primary'
          * @description - primary: Teal/green professional color - secondary: Pink/purple accent color - neutral: Grayscale minimal appearance
         */
        "color": 'primary' | 'secondary' | 'neutral';
        /**
          * Optional text label displayed next to the toggle
          * @type {string}
          * @optional 
          * @description When provided, clicking the label will also toggle the switch
         */
        "label"?: string;
        /**
          * Current operational state of the toggle
          * @type {'default' | 'active' | 'disabled'}
          * @default 'default'
          * @description - default: Toggle is off/inactive - active: Toggle is on/active   - disabled: Toggle cannot be interacted with
         */
        "state": 'default' | 'active' | 'disabled';
        /**
          * Visual theme for the component
          * @type {'light' | 'dark'}
          * @default 'light'
          * @description - light: Bright colors suitable for light backgrounds - dark: Muted colors suitable for dark backgrounds
         */
        "theme": 'light' | 'dark';
        /**
          * Connect to IoT devices and services via Thing Web
          * @optional
         */
        "thingProperty"?: ThingProperty;
        /**
          * Visual style variant of the toggle switch
          * @type {'circle' | 'square' | 'apple' | 'cross' | 'neon'}
          * @default 'circle'
          * @description - circle: Standard pill-shaped toggle (default) - square: Rectangular toggle with square thumb - apple: iOS-style switch with inner shadow - cross: Shows × when off, ✓ when on - neon: Glowing effect when active
         */
        "variant": 'circle' | 'square' | 'apple' | 'cross' | 'neon';
    }
}
export interface UiToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiToggleElement;
}
declare global {
    interface HTMLUiHeadingElement extends Components.UiHeading, HTMLStencilElement {
    }
    var HTMLUiHeadingElement: {
        prototype: HTMLUiHeadingElement;
        new (): HTMLUiHeadingElement;
    };
    interface HTMLUiToggleElementEventMap {
        "toggle": { active: boolean; state: string };
    }
    /**
     * UI Toggle Component
     * @component 
     * @description A modern, accessible toggle switch with multiple visual styles and themes.
     * Perfect for forms, settings panels, and IoT device controls.
     * Features smooth animations and Web of Things integration.
     * @example <ui-toggle variant="circle" state="active" label="Enable notifications"></ui-toggle>
     */
    interface HTMLUiToggleElement extends Components.UiToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiToggleElementEventMap>(type: K, listener: (this: HTMLUiToggleElement, ev: UiToggleCustomEvent<HTMLUiToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiToggleElementEventMap>(type: K, listener: (this: HTMLUiToggleElement, ev: UiToggleCustomEvent<HTMLUiToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiToggleElement: {
        prototype: HTMLUiToggleElement;
        new (): HTMLUiToggleElement;
    };
    interface HTMLElementTagNameMap {
        "ui-heading": HTMLUiHeadingElement;
        "ui-toggle": HTMLUiToggleElement;
    }
}
declare namespace LocalJSX {
    interface UiHeading {
        "text"?: string;
    }
    /**
     * UI Toggle Component
     * @component 
     * @description A modern, accessible toggle switch with multiple visual styles and themes.
     * Perfect for forms, settings panels, and IoT device controls.
     * Features smooth animations and Web of Things integration.
     * @example <ui-toggle variant="circle" state="active" label="Enable notifications"></ui-toggle>
     */
    interface UiToggle {
        /**
          * Color scheme for the toggle appearance
          * @type {'primary' | 'secondary' | 'neutral'}
          * @default 'primary'
          * @description - primary: Teal/green professional color - secondary: Pink/purple accent color - neutral: Grayscale minimal appearance
         */
        "color"?: 'primary' | 'secondary' | 'neutral';
        /**
          * Optional text label displayed next to the toggle
          * @type {string}
          * @optional 
          * @description When provided, clicking the label will also toggle the switch
         */
        "label"?: string;
        /**
          * Custom event emitted when toggle state changes
          * @event toggle
          * @type {EventEmitter<{ active: boolean; state: string }>}
          * @description Contains both boolean active state and string state name Use this to react to user interactions and state changes
         */
        "onToggle"?: (event: UiToggleCustomEvent<{ active: boolean; state: string }>) => void;
        /**
          * Current operational state of the toggle
          * @type {'default' | 'active' | 'disabled'}
          * @default 'default'
          * @description - default: Toggle is off/inactive - active: Toggle is on/active   - disabled: Toggle cannot be interacted with
         */
        "state"?: 'default' | 'active' | 'disabled';
        /**
          * Visual theme for the component
          * @type {'light' | 'dark'}
          * @default 'light'
          * @description - light: Bright colors suitable for light backgrounds - dark: Muted colors suitable for dark backgrounds
         */
        "theme"?: 'light' | 'dark';
        /**
          * Connect to IoT devices and services via Thing Web
          * @optional
         */
        "thingProperty"?: ThingProperty;
        /**
          * Visual style variant of the toggle switch
          * @type {'circle' | 'square' | 'apple' | 'cross' | 'neon'}
          * @default 'circle'
          * @description - circle: Standard pill-shaped toggle (default) - square: Rectangular toggle with square thumb - apple: iOS-style switch with inner shadow - cross: Shows × when off, ✓ when on - neon: Glowing effect when active
         */
        "variant"?: 'circle' | 'square' | 'apple' | 'cross' | 'neon';
    }
    interface IntrinsicElements {
        "ui-heading": UiHeading;
        "ui-toggle": UiToggle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ui-heading": LocalJSX.UiHeading & JSXBase.HTMLAttributes<HTMLUiHeadingElement>;
            /**
             * UI Toggle Component
             * @component 
             * @description A modern, accessible toggle switch with multiple visual styles and themes.
             * Perfect for forms, settings panels, and IoT device controls.
             * Features smooth animations and Web of Things integration.
             * @example <ui-toggle variant="circle" state="active" label="Enable notifications"></ui-toggle>
             */
            "ui-toggle": LocalJSX.UiToggle & JSXBase.HTMLAttributes<HTMLUiToggleElement>;
        }
    }
}
